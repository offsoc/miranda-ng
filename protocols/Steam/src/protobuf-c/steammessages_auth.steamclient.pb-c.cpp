/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_auth.steamclient.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "steammessages_auth.steamclient.pb-c.h"
size_t cauthentication__get_password_rsapublic_key__request__get_packed_size
                     (const CAuthenticationGetPasswordRSAPublicKeyRequest *message)
{
  assert(message->descriptor == &cauthentication__get_password_rsapublic_key__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__get_password_rsapublic_key__request__pack
                     (const CAuthenticationGetPasswordRSAPublicKeyRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__get_password_rsapublic_key__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__get_password_rsapublic_key__request__pack_to_buffer
                     (const CAuthenticationGetPasswordRSAPublicKeyRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__get_password_rsapublic_key__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationGetPasswordRSAPublicKeyRequest *
       cauthentication__get_password_rsapublic_key__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationGetPasswordRSAPublicKeyRequest *)
     protobuf_c_message_unpack (&cauthentication__get_password_rsapublic_key__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__get_password_rsapublic_key__request__free_unpacked
                     (CAuthenticationGetPasswordRSAPublicKeyRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__get_password_rsapublic_key__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__get_password_rsapublic_key__response__get_packed_size
                     (const CAuthenticationGetPasswordRSAPublicKeyResponse *message)
{
  assert(message->descriptor == &cauthentication__get_password_rsapublic_key__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__get_password_rsapublic_key__response__pack
                     (const CAuthenticationGetPasswordRSAPublicKeyResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__get_password_rsapublic_key__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__get_password_rsapublic_key__response__pack_to_buffer
                     (const CAuthenticationGetPasswordRSAPublicKeyResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__get_password_rsapublic_key__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationGetPasswordRSAPublicKeyResponse *
       cauthentication__get_password_rsapublic_key__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationGetPasswordRSAPublicKeyResponse *)
     protobuf_c_message_unpack (&cauthentication__get_password_rsapublic_key__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__get_password_rsapublic_key__response__free_unpacked
                     (CAuthenticationGetPasswordRSAPublicKeyResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__get_password_rsapublic_key__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__device_details__get_packed_size
                     (const CAuthenticationDeviceDetails *message)
{
  assert(message->descriptor == &cauthentication__device_details__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__device_details__pack
                     (const CAuthenticationDeviceDetails *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__device_details__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__device_details__pack_to_buffer
                     (const CAuthenticationDeviceDetails *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__device_details__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationDeviceDetails *
       cauthentication__device_details__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationDeviceDetails *)
     protobuf_c_message_unpack (&cauthentication__device_details__descriptor,
                                allocator, len, data);
}
void   cauthentication__device_details__free_unpacked
                     (CAuthenticationDeviceDetails *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__device_details__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__begin_auth_session_via_qr__request__get_packed_size
                     (const CAuthenticationBeginAuthSessionViaQRRequest *message)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_qr__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__begin_auth_session_via_qr__request__pack
                     (const CAuthenticationBeginAuthSessionViaQRRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_qr__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__begin_auth_session_via_qr__request__pack_to_buffer
                     (const CAuthenticationBeginAuthSessionViaQRRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_qr__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationBeginAuthSessionViaQRRequest *
       cauthentication__begin_auth_session_via_qr__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationBeginAuthSessionViaQRRequest *)
     protobuf_c_message_unpack (&cauthentication__begin_auth_session_via_qr__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__begin_auth_session_via_qr__request__free_unpacked
                     (CAuthenticationBeginAuthSessionViaQRRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__begin_auth_session_via_qr__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__allowed_confirmation__get_packed_size
                     (const CAuthenticationAllowedConfirmation *message)
{
  assert(message->descriptor == &cauthentication__allowed_confirmation__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__allowed_confirmation__pack
                     (const CAuthenticationAllowedConfirmation *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__allowed_confirmation__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__allowed_confirmation__pack_to_buffer
                     (const CAuthenticationAllowedConfirmation *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__allowed_confirmation__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationAllowedConfirmation *
       cauthentication__allowed_confirmation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationAllowedConfirmation *)
     protobuf_c_message_unpack (&cauthentication__allowed_confirmation__descriptor,
                                allocator, len, data);
}
void   cauthentication__allowed_confirmation__free_unpacked
                     (CAuthenticationAllowedConfirmation *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__allowed_confirmation__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__begin_auth_session_via_qr__response__get_packed_size
                     (const CAuthenticationBeginAuthSessionViaQRResponse *message)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_qr__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__begin_auth_session_via_qr__response__pack
                     (const CAuthenticationBeginAuthSessionViaQRResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_qr__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__begin_auth_session_via_qr__response__pack_to_buffer
                     (const CAuthenticationBeginAuthSessionViaQRResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_qr__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationBeginAuthSessionViaQRResponse *
       cauthentication__begin_auth_session_via_qr__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationBeginAuthSessionViaQRResponse *)
     protobuf_c_message_unpack (&cauthentication__begin_auth_session_via_qr__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__begin_auth_session_via_qr__response__free_unpacked
                     (CAuthenticationBeginAuthSessionViaQRResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__begin_auth_session_via_qr__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__begin_auth_session_via_credentials__request__get_packed_size
                     (const CAuthenticationBeginAuthSessionViaCredentialsRequest *message)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_credentials__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__begin_auth_session_via_credentials__request__pack
                     (const CAuthenticationBeginAuthSessionViaCredentialsRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_credentials__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__begin_auth_session_via_credentials__request__pack_to_buffer
                     (const CAuthenticationBeginAuthSessionViaCredentialsRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_credentials__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationBeginAuthSessionViaCredentialsRequest *
       cauthentication__begin_auth_session_via_credentials__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationBeginAuthSessionViaCredentialsRequest *)
     protobuf_c_message_unpack (&cauthentication__begin_auth_session_via_credentials__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__begin_auth_session_via_credentials__request__free_unpacked
                     (CAuthenticationBeginAuthSessionViaCredentialsRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__begin_auth_session_via_credentials__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__begin_auth_session_via_credentials__response__get_packed_size
                     (const CAuthenticationBeginAuthSessionViaCredentialsResponse *message)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_credentials__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__begin_auth_session_via_credentials__response__pack
                     (const CAuthenticationBeginAuthSessionViaCredentialsResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_credentials__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__begin_auth_session_via_credentials__response__pack_to_buffer
                     (const CAuthenticationBeginAuthSessionViaCredentialsResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__begin_auth_session_via_credentials__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationBeginAuthSessionViaCredentialsResponse *
       cauthentication__begin_auth_session_via_credentials__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationBeginAuthSessionViaCredentialsResponse *)
     protobuf_c_message_unpack (&cauthentication__begin_auth_session_via_credentials__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__begin_auth_session_via_credentials__response__free_unpacked
                     (CAuthenticationBeginAuthSessionViaCredentialsResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__begin_auth_session_via_credentials__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__poll_auth_session_status__request__get_packed_size
                     (const CAuthenticationPollAuthSessionStatusRequest *message)
{
  assert(message->descriptor == &cauthentication__poll_auth_session_status__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__poll_auth_session_status__request__pack
                     (const CAuthenticationPollAuthSessionStatusRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__poll_auth_session_status__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__poll_auth_session_status__request__pack_to_buffer
                     (const CAuthenticationPollAuthSessionStatusRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__poll_auth_session_status__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationPollAuthSessionStatusRequest *
       cauthentication__poll_auth_session_status__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationPollAuthSessionStatusRequest *)
     protobuf_c_message_unpack (&cauthentication__poll_auth_session_status__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__poll_auth_session_status__request__free_unpacked
                     (CAuthenticationPollAuthSessionStatusRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__poll_auth_session_status__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__poll_auth_session_status__response__get_packed_size
                     (const CAuthenticationPollAuthSessionStatusResponse *message)
{
  assert(message->descriptor == &cauthentication__poll_auth_session_status__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__poll_auth_session_status__response__pack
                     (const CAuthenticationPollAuthSessionStatusResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__poll_auth_session_status__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__poll_auth_session_status__response__pack_to_buffer
                     (const CAuthenticationPollAuthSessionStatusResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__poll_auth_session_status__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationPollAuthSessionStatusResponse *
       cauthentication__poll_auth_session_status__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationPollAuthSessionStatusResponse *)
     protobuf_c_message_unpack (&cauthentication__poll_auth_session_status__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__poll_auth_session_status__response__free_unpacked
                     (CAuthenticationPollAuthSessionStatusResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__poll_auth_session_status__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__get_auth_session_info__request__get_packed_size
                     (const CAuthenticationGetAuthSessionInfoRequest *message)
{
  assert(message->descriptor == &cauthentication__get_auth_session_info__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__get_auth_session_info__request__pack
                     (const CAuthenticationGetAuthSessionInfoRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__get_auth_session_info__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__get_auth_session_info__request__pack_to_buffer
                     (const CAuthenticationGetAuthSessionInfoRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__get_auth_session_info__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationGetAuthSessionInfoRequest *
       cauthentication__get_auth_session_info__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationGetAuthSessionInfoRequest *)
     protobuf_c_message_unpack (&cauthentication__get_auth_session_info__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__get_auth_session_info__request__free_unpacked
                     (CAuthenticationGetAuthSessionInfoRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__get_auth_session_info__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__get_auth_session_info__response__get_packed_size
                     (const CAuthenticationGetAuthSessionInfoResponse *message)
{
  assert(message->descriptor == &cauthentication__get_auth_session_info__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__get_auth_session_info__response__pack
                     (const CAuthenticationGetAuthSessionInfoResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__get_auth_session_info__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__get_auth_session_info__response__pack_to_buffer
                     (const CAuthenticationGetAuthSessionInfoResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__get_auth_session_info__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationGetAuthSessionInfoResponse *
       cauthentication__get_auth_session_info__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationGetAuthSessionInfoResponse *)
     protobuf_c_message_unpack (&cauthentication__get_auth_session_info__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__get_auth_session_info__response__free_unpacked
                     (CAuthenticationGetAuthSessionInfoResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__get_auth_session_info__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__update_auth_session_with_mobile_confirmation__request__get_packed_size
                     (const CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest *message)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_mobile_confirmation__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__update_auth_session_with_mobile_confirmation__request__pack
                     (const CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_mobile_confirmation__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__update_auth_session_with_mobile_confirmation__request__pack_to_buffer
                     (const CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_mobile_confirmation__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest *
       cauthentication__update_auth_session_with_mobile_confirmation__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest *)
     protobuf_c_message_unpack (&cauthentication__update_auth_session_with_mobile_confirmation__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__update_auth_session_with_mobile_confirmation__request__free_unpacked
                     (CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__update_auth_session_with_mobile_confirmation__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__update_auth_session_with_mobile_confirmation__response__get_packed_size
                     (const CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse *message)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_mobile_confirmation__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__update_auth_session_with_mobile_confirmation__response__pack
                     (const CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_mobile_confirmation__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__update_auth_session_with_mobile_confirmation__response__pack_to_buffer
                     (const CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_mobile_confirmation__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse *
       cauthentication__update_auth_session_with_mobile_confirmation__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse *)
     protobuf_c_message_unpack (&cauthentication__update_auth_session_with_mobile_confirmation__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__update_auth_session_with_mobile_confirmation__response__free_unpacked
                     (CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__update_auth_session_with_mobile_confirmation__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__update_auth_session_with_steam_guard_code__request__get_packed_size
                     (const CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest *message)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_steam_guard_code__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__update_auth_session_with_steam_guard_code__request__pack
                     (const CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_steam_guard_code__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__update_auth_session_with_steam_guard_code__request__pack_to_buffer
                     (const CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_steam_guard_code__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest *
       cauthentication__update_auth_session_with_steam_guard_code__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest *)
     protobuf_c_message_unpack (&cauthentication__update_auth_session_with_steam_guard_code__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__update_auth_session_with_steam_guard_code__request__free_unpacked
                     (CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__update_auth_session_with_steam_guard_code__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__update_auth_session_with_steam_guard_code__response__get_packed_size
                     (const CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse *message)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_steam_guard_code__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__update_auth_session_with_steam_guard_code__response__pack
                     (const CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_steam_guard_code__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__update_auth_session_with_steam_guard_code__response__pack_to_buffer
                     (const CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__update_auth_session_with_steam_guard_code__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse *
       cauthentication__update_auth_session_with_steam_guard_code__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse *)
     protobuf_c_message_unpack (&cauthentication__update_auth_session_with_steam_guard_code__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__update_auth_session_with_steam_guard_code__response__free_unpacked
                     (CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__update_auth_session_with_steam_guard_code__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__access_token__generate_for_app__request__get_packed_size
                     (const CAuthenticationAccessTokenGenerateForAppRequest *message)
{
  assert(message->descriptor == &cauthentication__access_token__generate_for_app__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__access_token__generate_for_app__request__pack
                     (const CAuthenticationAccessTokenGenerateForAppRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__access_token__generate_for_app__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__access_token__generate_for_app__request__pack_to_buffer
                     (const CAuthenticationAccessTokenGenerateForAppRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__access_token__generate_for_app__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationAccessTokenGenerateForAppRequest *
       cauthentication__access_token__generate_for_app__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationAccessTokenGenerateForAppRequest *)
     protobuf_c_message_unpack (&cauthentication__access_token__generate_for_app__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__access_token__generate_for_app__request__free_unpacked
                     (CAuthenticationAccessTokenGenerateForAppRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__access_token__generate_for_app__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__access_token__generate_for_app__response__get_packed_size
                     (const CAuthenticationAccessTokenGenerateForAppResponse *message)
{
  assert(message->descriptor == &cauthentication__access_token__generate_for_app__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__access_token__generate_for_app__response__pack
                     (const CAuthenticationAccessTokenGenerateForAppResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__access_token__generate_for_app__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__access_token__generate_for_app__response__pack_to_buffer
                     (const CAuthenticationAccessTokenGenerateForAppResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__access_token__generate_for_app__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationAccessTokenGenerateForAppResponse *
       cauthentication__access_token__generate_for_app__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationAccessTokenGenerateForAppResponse *)
     protobuf_c_message_unpack (&cauthentication__access_token__generate_for_app__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__access_token__generate_for_app__response__free_unpacked
                     (CAuthenticationAccessTokenGenerateForAppResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__access_token__generate_for_app__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__refresh_token__enumerate__request__get_packed_size
                     (const CAuthenticationRefreshTokenEnumerateRequest *message)
{
  assert(message->descriptor == &cauthentication__refresh_token__enumerate__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__refresh_token__enumerate__request__pack
                     (const CAuthenticationRefreshTokenEnumerateRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__refresh_token__enumerate__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__refresh_token__enumerate__request__pack_to_buffer
                     (const CAuthenticationRefreshTokenEnumerateRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__refresh_token__enumerate__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationRefreshTokenEnumerateRequest *
       cauthentication__refresh_token__enumerate__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationRefreshTokenEnumerateRequest *)
     protobuf_c_message_unpack (&cauthentication__refresh_token__enumerate__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__refresh_token__enumerate__request__free_unpacked
                     (CAuthenticationRefreshTokenEnumerateRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__refresh_token__enumerate__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__refresh_token__enumerate__response__get_packed_size
                     (const CAuthenticationRefreshTokenEnumerateResponse *message)
{
  assert(message->descriptor == &cauthentication__refresh_token__enumerate__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__refresh_token__enumerate__response__pack
                     (const CAuthenticationRefreshTokenEnumerateResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__refresh_token__enumerate__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__refresh_token__enumerate__response__pack_to_buffer
                     (const CAuthenticationRefreshTokenEnumerateResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__refresh_token__enumerate__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationRefreshTokenEnumerateResponse *
       cauthentication__refresh_token__enumerate__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationRefreshTokenEnumerateResponse *)
     protobuf_c_message_unpack (&cauthentication__refresh_token__enumerate__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__refresh_token__enumerate__response__free_unpacked
                     (CAuthenticationRefreshTokenEnumerateResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__refresh_token__enumerate__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__get_auth_sessions_for_account__request__get_packed_size
                     (const CAuthenticationGetAuthSessionsForAccountRequest *message)
{
  assert(message->descriptor == &cauthentication__get_auth_sessions_for_account__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__get_auth_sessions_for_account__request__pack
                     (const CAuthenticationGetAuthSessionsForAccountRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__get_auth_sessions_for_account__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__get_auth_sessions_for_account__request__pack_to_buffer
                     (const CAuthenticationGetAuthSessionsForAccountRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__get_auth_sessions_for_account__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationGetAuthSessionsForAccountRequest *
       cauthentication__get_auth_sessions_for_account__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationGetAuthSessionsForAccountRequest *)
     protobuf_c_message_unpack (&cauthentication__get_auth_sessions_for_account__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__get_auth_sessions_for_account__request__free_unpacked
                     (CAuthenticationGetAuthSessionsForAccountRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__get_auth_sessions_for_account__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__get_auth_sessions_for_account__response__get_packed_size
                     (const CAuthenticationGetAuthSessionsForAccountResponse *message)
{
  assert(message->descriptor == &cauthentication__get_auth_sessions_for_account__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__get_auth_sessions_for_account__response__pack
                     (const CAuthenticationGetAuthSessionsForAccountResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__get_auth_sessions_for_account__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__get_auth_sessions_for_account__response__pack_to_buffer
                     (const CAuthenticationGetAuthSessionsForAccountResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__get_auth_sessions_for_account__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationGetAuthSessionsForAccountResponse *
       cauthentication__get_auth_sessions_for_account__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationGetAuthSessionsForAccountResponse *)
     protobuf_c_message_unpack (&cauthentication__get_auth_sessions_for_account__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__get_auth_sessions_for_account__response__free_unpacked
                     (CAuthenticationGetAuthSessionsForAccountResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__get_auth_sessions_for_account__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__migrate_mobile_session__request__get_packed_size
                     (const CAuthenticationMigrateMobileSessionRequest *message)
{
  assert(message->descriptor == &cauthentication__migrate_mobile_session__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__migrate_mobile_session__request__pack
                     (const CAuthenticationMigrateMobileSessionRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__migrate_mobile_session__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__migrate_mobile_session__request__pack_to_buffer
                     (const CAuthenticationMigrateMobileSessionRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__migrate_mobile_session__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationMigrateMobileSessionRequest *
       cauthentication__migrate_mobile_session__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationMigrateMobileSessionRequest *)
     protobuf_c_message_unpack (&cauthentication__migrate_mobile_session__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__migrate_mobile_session__request__free_unpacked
                     (CAuthenticationMigrateMobileSessionRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__migrate_mobile_session__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__migrate_mobile_session__response__get_packed_size
                     (const CAuthenticationMigrateMobileSessionResponse *message)
{
  assert(message->descriptor == &cauthentication__migrate_mobile_session__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__migrate_mobile_session__response__pack
                     (const CAuthenticationMigrateMobileSessionResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__migrate_mobile_session__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__migrate_mobile_session__response__pack_to_buffer
                     (const CAuthenticationMigrateMobileSessionResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__migrate_mobile_session__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationMigrateMobileSessionResponse *
       cauthentication__migrate_mobile_session__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationMigrateMobileSessionResponse *)
     protobuf_c_message_unpack (&cauthentication__migrate_mobile_session__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__migrate_mobile_session__response__free_unpacked
                     (CAuthenticationMigrateMobileSessionResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__migrate_mobile_session__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__token__revoke__request__get_packed_size
                     (const CAuthenticationTokenRevokeRequest *message)
{
  assert(message->descriptor == &cauthentication__token__revoke__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__token__revoke__request__pack
                     (const CAuthenticationTokenRevokeRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__token__revoke__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__token__revoke__request__pack_to_buffer
                     (const CAuthenticationTokenRevokeRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__token__revoke__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationTokenRevokeRequest *
       cauthentication__token__revoke__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationTokenRevokeRequest *)
     protobuf_c_message_unpack (&cauthentication__token__revoke__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__token__revoke__request__free_unpacked
                     (CAuthenticationTokenRevokeRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__token__revoke__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__token__revoke__response__get_packed_size
                     (const CAuthenticationTokenRevokeResponse *message)
{
  assert(message->descriptor == &cauthentication__token__revoke__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__token__revoke__response__pack
                     (const CAuthenticationTokenRevokeResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__token__revoke__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__token__revoke__response__pack_to_buffer
                     (const CAuthenticationTokenRevokeResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__token__revoke__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationTokenRevokeResponse *
       cauthentication__token__revoke__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationTokenRevokeResponse *)
     protobuf_c_message_unpack (&cauthentication__token__revoke__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__token__revoke__response__free_unpacked
                     (CAuthenticationTokenRevokeResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__token__revoke__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__refresh_token__revoke__request__get_packed_size
                     (const CAuthenticationRefreshTokenRevokeRequest *message)
{
  assert(message->descriptor == &cauthentication__refresh_token__revoke__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__refresh_token__revoke__request__pack
                     (const CAuthenticationRefreshTokenRevokeRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__refresh_token__revoke__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__refresh_token__revoke__request__pack_to_buffer
                     (const CAuthenticationRefreshTokenRevokeRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__refresh_token__revoke__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationRefreshTokenRevokeRequest *
       cauthentication__refresh_token__revoke__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationRefreshTokenRevokeRequest *)
     protobuf_c_message_unpack (&cauthentication__refresh_token__revoke__request__descriptor,
                                allocator, len, data);
}
void   cauthentication__refresh_token__revoke__request__free_unpacked
                     (CAuthenticationRefreshTokenRevokeRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__refresh_token__revoke__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication__refresh_token__revoke__response__get_packed_size
                     (const CAuthenticationRefreshTokenRevokeResponse *message)
{
  assert(message->descriptor == &cauthentication__refresh_token__revoke__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication__refresh_token__revoke__response__pack
                     (const CAuthenticationRefreshTokenRevokeResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication__refresh_token__revoke__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication__refresh_token__revoke__response__pack_to_buffer
                     (const CAuthenticationRefreshTokenRevokeResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication__refresh_token__revoke__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationRefreshTokenRevokeResponse *
       cauthentication__refresh_token__revoke__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationRefreshTokenRevokeResponse *)
     protobuf_c_message_unpack (&cauthentication__refresh_token__revoke__response__descriptor,
                                allocator, len, data);
}
void   cauthentication__refresh_token__revoke__response__free_unpacked
                     (CAuthenticationRefreshTokenRevokeResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication__refresh_token__revoke__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication_support__query_refresh_tokens_by_account__request__get_packed_size
                     (const CAuthenticationSupportQueryRefreshTokensByAccountRequest *message)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_tokens_by_account__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication_support__query_refresh_tokens_by_account__request__pack
                     (const CAuthenticationSupportQueryRefreshTokensByAccountRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_tokens_by_account__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication_support__query_refresh_tokens_by_account__request__pack_to_buffer
                     (const CAuthenticationSupportQueryRefreshTokensByAccountRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_tokens_by_account__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationSupportQueryRefreshTokensByAccountRequest *
       cauthentication_support__query_refresh_tokens_by_account__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationSupportQueryRefreshTokensByAccountRequest *)
     protobuf_c_message_unpack (&cauthentication_support__query_refresh_tokens_by_account__request__descriptor,
                                allocator, len, data);
}
void   cauthentication_support__query_refresh_tokens_by_account__request__free_unpacked
                     (CAuthenticationSupportQueryRefreshTokensByAccountRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication_support__query_refresh_tokens_by_account__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t csupport_refresh_token_description__get_packed_size
                     (const CSupportRefreshTokenDescription *message)
{
  assert(message->descriptor == &csupport_refresh_token_description__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t csupport_refresh_token_description__pack
                     (const CSupportRefreshTokenDescription *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &csupport_refresh_token_description__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t csupport_refresh_token_description__pack_to_buffer
                     (const CSupportRefreshTokenDescription *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &csupport_refresh_token_description__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CSupportRefreshTokenDescription *
       csupport_refresh_token_description__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CSupportRefreshTokenDescription *)
     protobuf_c_message_unpack (&csupport_refresh_token_description__descriptor,
                                allocator, len, data);
}
void   csupport_refresh_token_description__free_unpacked
                     (CSupportRefreshTokenDescription *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &csupport_refresh_token_description__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication_support__query_refresh_tokens_by_account__response__get_packed_size
                     (const CAuthenticationSupportQueryRefreshTokensByAccountResponse *message)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_tokens_by_account__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication_support__query_refresh_tokens_by_account__response__pack
                     (const CAuthenticationSupportQueryRefreshTokensByAccountResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_tokens_by_account__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication_support__query_refresh_tokens_by_account__response__pack_to_buffer
                     (const CAuthenticationSupportQueryRefreshTokensByAccountResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_tokens_by_account__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationSupportQueryRefreshTokensByAccountResponse *
       cauthentication_support__query_refresh_tokens_by_account__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationSupportQueryRefreshTokensByAccountResponse *)
     protobuf_c_message_unpack (&cauthentication_support__query_refresh_tokens_by_account__response__descriptor,
                                allocator, len, data);
}
void   cauthentication_support__query_refresh_tokens_by_account__response__free_unpacked
                     (CAuthenticationSupportQueryRefreshTokensByAccountResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication_support__query_refresh_tokens_by_account__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication_support__query_refresh_token_by_id__request__get_packed_size
                     (const CAuthenticationSupportQueryRefreshTokenByIDRequest *message)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_token_by_id__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication_support__query_refresh_token_by_id__request__pack
                     (const CAuthenticationSupportQueryRefreshTokenByIDRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_token_by_id__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication_support__query_refresh_token_by_id__request__pack_to_buffer
                     (const CAuthenticationSupportQueryRefreshTokenByIDRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_token_by_id__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationSupportQueryRefreshTokenByIDRequest *
       cauthentication_support__query_refresh_token_by_id__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationSupportQueryRefreshTokenByIDRequest *)
     protobuf_c_message_unpack (&cauthentication_support__query_refresh_token_by_id__request__descriptor,
                                allocator, len, data);
}
void   cauthentication_support__query_refresh_token_by_id__request__free_unpacked
                     (CAuthenticationSupportQueryRefreshTokenByIDRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication_support__query_refresh_token_by_id__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication_support__query_refresh_token_by_id__response__get_packed_size
                     (const CAuthenticationSupportQueryRefreshTokenByIDResponse *message)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_token_by_id__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication_support__query_refresh_token_by_id__response__pack
                     (const CAuthenticationSupportQueryRefreshTokenByIDResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_token_by_id__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication_support__query_refresh_token_by_id__response__pack_to_buffer
                     (const CAuthenticationSupportQueryRefreshTokenByIDResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication_support__query_refresh_token_by_id__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationSupportQueryRefreshTokenByIDResponse *
       cauthentication_support__query_refresh_token_by_id__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationSupportQueryRefreshTokenByIDResponse *)
     protobuf_c_message_unpack (&cauthentication_support__query_refresh_token_by_id__response__descriptor,
                                allocator, len, data);
}
void   cauthentication_support__query_refresh_token_by_id__response__free_unpacked
                     (CAuthenticationSupportQueryRefreshTokenByIDResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication_support__query_refresh_token_by_id__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication_support__revoke_token__request__get_packed_size
                     (const CAuthenticationSupportRevokeTokenRequest *message)
{
  assert(message->descriptor == &cauthentication_support__revoke_token__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication_support__revoke_token__request__pack
                     (const CAuthenticationSupportRevokeTokenRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication_support__revoke_token__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication_support__revoke_token__request__pack_to_buffer
                     (const CAuthenticationSupportRevokeTokenRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication_support__revoke_token__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationSupportRevokeTokenRequest *
       cauthentication_support__revoke_token__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationSupportRevokeTokenRequest *)
     protobuf_c_message_unpack (&cauthentication_support__revoke_token__request__descriptor,
                                allocator, len, data);
}
void   cauthentication_support__revoke_token__request__free_unpacked
                     (CAuthenticationSupportRevokeTokenRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication_support__revoke_token__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication_support__revoke_token__response__get_packed_size
                     (const CAuthenticationSupportRevokeTokenResponse *message)
{
  assert(message->descriptor == &cauthentication_support__revoke_token__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication_support__revoke_token__response__pack
                     (const CAuthenticationSupportRevokeTokenResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication_support__revoke_token__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication_support__revoke_token__response__pack_to_buffer
                     (const CAuthenticationSupportRevokeTokenResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication_support__revoke_token__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationSupportRevokeTokenResponse *
       cauthentication_support__revoke_token__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationSupportRevokeTokenResponse *)
     protobuf_c_message_unpack (&cauthentication_support__revoke_token__response__descriptor,
                                allocator, len, data);
}
void   cauthentication_support__revoke_token__response__free_unpacked
                     (CAuthenticationSupportRevokeTokenResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication_support__revoke_token__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication_support__get_token_history__request__get_packed_size
                     (const CAuthenticationSupportGetTokenHistoryRequest *message)
{
  assert(message->descriptor == &cauthentication_support__get_token_history__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication_support__get_token_history__request__pack
                     (const CAuthenticationSupportGetTokenHistoryRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication_support__get_token_history__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication_support__get_token_history__request__pack_to_buffer
                     (const CAuthenticationSupportGetTokenHistoryRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication_support__get_token_history__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationSupportGetTokenHistoryRequest *
       cauthentication_support__get_token_history__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationSupportGetTokenHistoryRequest *)
     protobuf_c_message_unpack (&cauthentication_support__get_token_history__request__descriptor,
                                allocator, len, data);
}
void   cauthentication_support__get_token_history__request__free_unpacked
                     (CAuthenticationSupportGetTokenHistoryRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication_support__get_token_history__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t csupport_refresh_token_audit__get_packed_size
                     (const CSupportRefreshTokenAudit *message)
{
  assert(message->descriptor == &csupport_refresh_token_audit__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t csupport_refresh_token_audit__pack
                     (const CSupportRefreshTokenAudit *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &csupport_refresh_token_audit__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t csupport_refresh_token_audit__pack_to_buffer
                     (const CSupportRefreshTokenAudit *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &csupport_refresh_token_audit__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CSupportRefreshTokenAudit *
       csupport_refresh_token_audit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CSupportRefreshTokenAudit *)
     protobuf_c_message_unpack (&csupport_refresh_token_audit__descriptor,
                                allocator, len, data);
}
void   csupport_refresh_token_audit__free_unpacked
                     (CSupportRefreshTokenAudit *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &csupport_refresh_token_audit__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cauthentication_support__get_token_history__response__get_packed_size
                     (const CAuthenticationSupportGetTokenHistoryResponse *message)
{
  assert(message->descriptor == &cauthentication_support__get_token_history__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cauthentication_support__get_token_history__response__pack
                     (const CAuthenticationSupportGetTokenHistoryResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cauthentication_support__get_token_history__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cauthentication_support__get_token_history__response__pack_to_buffer
                     (const CAuthenticationSupportGetTokenHistoryResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cauthentication_support__get_token_history__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CAuthenticationSupportGetTokenHistoryResponse *
       cauthentication_support__get_token_history__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CAuthenticationSupportGetTokenHistoryResponse *)
     protobuf_c_message_unpack (&cauthentication_support__get_token_history__response__descriptor,
                                allocator, len, data);
}
void   cauthentication_support__get_token_history__response__free_unpacked
                     (CAuthenticationSupportGetTokenHistoryResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cauthentication_support__get_token_history__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t ccloud_gaming__create_nonce__request__get_packed_size
                     (const CCloudGamingCreateNonceRequest *message)
{
  assert(message->descriptor == &ccloud_gaming__create_nonce__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t ccloud_gaming__create_nonce__request__pack
                     (const CCloudGamingCreateNonceRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &ccloud_gaming__create_nonce__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t ccloud_gaming__create_nonce__request__pack_to_buffer
                     (const CCloudGamingCreateNonceRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &ccloud_gaming__create_nonce__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CCloudGamingCreateNonceRequest *
       ccloud_gaming__create_nonce__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CCloudGamingCreateNonceRequest *)
     protobuf_c_message_unpack (&ccloud_gaming__create_nonce__request__descriptor,
                                allocator, len, data);
}
void   ccloud_gaming__create_nonce__request__free_unpacked
                     (CCloudGamingCreateNonceRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &ccloud_gaming__create_nonce__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t ccloud_gaming__create_nonce__response__get_packed_size
                     (const CCloudGamingCreateNonceResponse *message)
{
  assert(message->descriptor == &ccloud_gaming__create_nonce__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t ccloud_gaming__create_nonce__response__pack
                     (const CCloudGamingCreateNonceResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &ccloud_gaming__create_nonce__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t ccloud_gaming__create_nonce__response__pack_to_buffer
                     (const CCloudGamingCreateNonceResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &ccloud_gaming__create_nonce__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CCloudGamingCreateNonceResponse *
       ccloud_gaming__create_nonce__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CCloudGamingCreateNonceResponse *)
     protobuf_c_message_unpack (&ccloud_gaming__create_nonce__response__descriptor,
                                allocator, len, data);
}
void   ccloud_gaming__create_nonce__response__free_unpacked
                     (CCloudGamingCreateNonceResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &ccloud_gaming__create_nonce__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t ccloud_gaming__get_time_remaining__request__get_packed_size
                     (const CCloudGamingGetTimeRemainingRequest *message)
{
  assert(message->descriptor == &ccloud_gaming__get_time_remaining__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t ccloud_gaming__get_time_remaining__request__pack
                     (const CCloudGamingGetTimeRemainingRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &ccloud_gaming__get_time_remaining__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t ccloud_gaming__get_time_remaining__request__pack_to_buffer
                     (const CCloudGamingGetTimeRemainingRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &ccloud_gaming__get_time_remaining__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CCloudGamingGetTimeRemainingRequest *
       ccloud_gaming__get_time_remaining__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CCloudGamingGetTimeRemainingRequest *)
     protobuf_c_message_unpack (&ccloud_gaming__get_time_remaining__request__descriptor,
                                allocator, len, data);
}
void   ccloud_gaming__get_time_remaining__request__free_unpacked
                     (CCloudGamingGetTimeRemainingRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &ccloud_gaming__get_time_remaining__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t ccloud_gaming__time_remaining__get_packed_size
                     (const CCloudGamingTimeRemaining *message)
{
  assert(message->descriptor == &ccloud_gaming__time_remaining__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t ccloud_gaming__time_remaining__pack
                     (const CCloudGamingTimeRemaining *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &ccloud_gaming__time_remaining__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t ccloud_gaming__time_remaining__pack_to_buffer
                     (const CCloudGamingTimeRemaining *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &ccloud_gaming__time_remaining__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CCloudGamingTimeRemaining *
       ccloud_gaming__time_remaining__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CCloudGamingTimeRemaining *)
     protobuf_c_message_unpack (&ccloud_gaming__time_remaining__descriptor,
                                allocator, len, data);
}
void   ccloud_gaming__time_remaining__free_unpacked
                     (CCloudGamingTimeRemaining *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &ccloud_gaming__time_remaining__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t ccloud_gaming__get_time_remaining__response__get_packed_size
                     (const CCloudGamingGetTimeRemainingResponse *message)
{
  assert(message->descriptor == &ccloud_gaming__get_time_remaining__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t ccloud_gaming__get_time_remaining__response__pack
                     (const CCloudGamingGetTimeRemainingResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &ccloud_gaming__get_time_remaining__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t ccloud_gaming__get_time_remaining__response__pack_to_buffer
                     (const CCloudGamingGetTimeRemainingResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &ccloud_gaming__get_time_remaining__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CCloudGamingGetTimeRemainingResponse *
       ccloud_gaming__get_time_remaining__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CCloudGamingGetTimeRemainingResponse *)
     protobuf_c_message_unpack (&ccloud_gaming__get_time_remaining__response__descriptor,
                                allocator, len, data);
}
void   ccloud_gaming__get_time_remaining__response__free_unpacked
                     (CCloudGamingGetTimeRemainingResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &ccloud_gaming__get_time_remaining__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

static const ProtobufCFieldDescriptor cauthentication__get_password_rsapublic_key__request__field_descriptors[1] =
{
  {
    "account_name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetPasswordRSAPublicKeyRequest, account_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__get_password_rsapublic_key__request__field_indices_by_name[] = {
  0,   /* field[0] = account_name */
};
static const ProtobufCIntRange cauthentication__get_password_rsapublic_key__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cauthentication__get_password_rsapublic_key__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_GetPasswordRSAPublicKey_Request",
  "CAuthenticationGetPasswordRSAPublicKeyRequest",
  "CAuthenticationGetPasswordRSAPublicKeyRequest",
  "",
  sizeof(CAuthenticationGetPasswordRSAPublicKeyRequest),
  1,
  cauthentication__get_password_rsapublic_key__request__field_descriptors,
  cauthentication__get_password_rsapublic_key__request__field_indices_by_name,
  1,  cauthentication__get_password_rsapublic_key__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__get_password_rsapublic_key__response__field_descriptors[3] =
{
  {
    "publickey_mod",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetPasswordRSAPublicKeyResponse, publickey_mod),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "publickey_exp",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetPasswordRSAPublicKeyResponse, publickey_exp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "timestamp",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationGetPasswordRSAPublicKeyResponse, has_timestamp),
    offsetof(CAuthenticationGetPasswordRSAPublicKeyResponse, timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__get_password_rsapublic_key__response__field_indices_by_name[] = {
  1,   /* field[1] = publickey_exp */
  0,   /* field[0] = publickey_mod */
  2,   /* field[2] = timestamp */
};
static const ProtobufCIntRange cauthentication__get_password_rsapublic_key__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cauthentication__get_password_rsapublic_key__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_GetPasswordRSAPublicKey_Response",
  "CAuthenticationGetPasswordRSAPublicKeyResponse",
  "CAuthenticationGetPasswordRSAPublicKeyResponse",
  "",
  sizeof(CAuthenticationGetPasswordRSAPublicKeyResponse),
  3,
  cauthentication__get_password_rsapublic_key__response__field_descriptors,
  cauthentication__get_password_rsapublic_key__response__field_indices_by_name,
  1,  cauthentication__get_password_rsapublic_key__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EAuthTokenPlatformType cauthentication__device_details__platform_type__default_value = EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_Unknown;
static const ProtobufCFieldDescriptor cauthentication__device_details__field_descriptors[6] =
{
  {
    "device_friendly_name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationDeviceDetails, device_friendly_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "platform_type",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationDeviceDetails, has_platform_type),
    offsetof(CAuthenticationDeviceDetails, platform_type),
    &eauth_token_platform_type__descriptor,
    &cauthentication__device_details__platform_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "os_type",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CAuthenticationDeviceDetails, has_os_type),
    offsetof(CAuthenticationDeviceDetails, os_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "gaming_device_type",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CAuthenticationDeviceDetails, has_gaming_device_type),
    offsetof(CAuthenticationDeviceDetails, gaming_device_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_count",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CAuthenticationDeviceDetails, has_client_count),
    offsetof(CAuthenticationDeviceDetails, client_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "machine_id",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CAuthenticationDeviceDetails, has_machine_id),
    offsetof(CAuthenticationDeviceDetails, machine_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__device_details__field_indices_by_name[] = {
  4,   /* field[4] = client_count */
  0,   /* field[0] = device_friendly_name */
  3,   /* field[3] = gaming_device_type */
  5,   /* field[5] = machine_id */
  2,   /* field[2] = os_type */
  1,   /* field[1] = platform_type */
};
static const ProtobufCIntRange cauthentication__device_details__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cauthentication__device_details__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_DeviceDetails",
  "CAuthenticationDeviceDetails",
  "CAuthenticationDeviceDetails",
  "",
  sizeof(CAuthenticationDeviceDetails),
  6,
  cauthentication__device_details__field_descriptors,
  cauthentication__device_details__field_indices_by_name,
  1,  cauthentication__device_details__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
char cauthentication__begin_auth_session_via_qr__request__website_id__default_value[] = "Unknown";
static const EAuthTokenPlatformType cauthentication__begin_auth_session_via_qr__request__platform_type__default_value = EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_Unknown;
static const ProtobufCFieldDescriptor cauthentication__begin_auth_session_via_qr__request__field_descriptors[4] =
{
  {
    "device_friendly_name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaQRRequest, device_friendly_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "platform_type",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationBeginAuthSessionViaQRRequest, has_platform_type),
    offsetof(CAuthenticationBeginAuthSessionViaQRRequest, platform_type),
    &eauth_token_platform_type__descriptor,
    &cauthentication__begin_auth_session_via_qr__request__platform_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "device_details",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaQRRequest, device_details),
    &cauthentication__device_details__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "website_id",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaQRRequest, website_id),
    NULL,
    &cauthentication__begin_auth_session_via_qr__request__website_id__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__begin_auth_session_via_qr__request__field_indices_by_name[] = {
  2,   /* field[2] = device_details */
  0,   /* field[0] = device_friendly_name */
  1,   /* field[1] = platform_type */
  3,   /* field[3] = website_id */
};
static const ProtobufCIntRange cauthentication__begin_auth_session_via_qr__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cauthentication__begin_auth_session_via_qr__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_BeginAuthSessionViaQR_Request",
  "CAuthenticationBeginAuthSessionViaQRRequest",
  "CAuthenticationBeginAuthSessionViaQRRequest",
  "",
  sizeof(CAuthenticationBeginAuthSessionViaQRRequest),
  4,
  cauthentication__begin_auth_session_via_qr__request__field_descriptors,
  cauthentication__begin_auth_session_via_qr__request__field_indices_by_name,
  1,  cauthentication__begin_auth_session_via_qr__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EAuthSessionGuardType cauthentication__allowed_confirmation__confirmation_type__default_value = EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_Unknown;
static const ProtobufCFieldDescriptor cauthentication__allowed_confirmation__field_descriptors[2] =
{
  {
    "confirmation_type",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationAllowedConfirmation, has_confirmation_type),
    offsetof(CAuthenticationAllowedConfirmation, confirmation_type),
    &eauth_session_guard_type__descriptor,
    &cauthentication__allowed_confirmation__confirmation_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "associated_message",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationAllowedConfirmation, associated_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__allowed_confirmation__field_indices_by_name[] = {
  1,   /* field[1] = associated_message */
  0,   /* field[0] = confirmation_type */
};
static const ProtobufCIntRange cauthentication__allowed_confirmation__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cauthentication__allowed_confirmation__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_AllowedConfirmation",
  "CAuthenticationAllowedConfirmation",
  "CAuthenticationAllowedConfirmation",
  "",
  sizeof(CAuthenticationAllowedConfirmation),
  2,
  cauthentication__allowed_confirmation__field_descriptors,
  cauthentication__allowed_confirmation__field_indices_by_name,
  1,  cauthentication__allowed_confirmation__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__begin_auth_session_via_qr__response__field_descriptors[6] =
{
  {
    "client_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, has_client_id),
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, client_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "challenge_url",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, challenge_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "request_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, has_request_id),
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, request_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "interval",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FLOAT,
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, has_interval),
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, interval),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "allowed_confirmations",
    5,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, n_allowed_confirmations),
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, allowed_confirmations),
    &cauthentication__allowed_confirmation__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "version",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, has_version),
    offsetof(CAuthenticationBeginAuthSessionViaQRResponse, version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__begin_auth_session_via_qr__response__field_indices_by_name[] = {
  4,   /* field[4] = allowed_confirmations */
  1,   /* field[1] = challenge_url */
  0,   /* field[0] = client_id */
  3,   /* field[3] = interval */
  2,   /* field[2] = request_id */
  5,   /* field[5] = version */
};
static const ProtobufCIntRange cauthentication__begin_auth_session_via_qr__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cauthentication__begin_auth_session_via_qr__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_BeginAuthSessionViaQR_Response",
  "CAuthenticationBeginAuthSessionViaQRResponse",
  "CAuthenticationBeginAuthSessionViaQRResponse",
  "",
  sizeof(CAuthenticationBeginAuthSessionViaQRResponse),
  6,
  cauthentication__begin_auth_session_via_qr__response__field_descriptors,
  cauthentication__begin_auth_session_via_qr__response__field_indices_by_name,
  1,  cauthentication__begin_auth_session_via_qr__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
char cauthentication__begin_auth_session_via_credentials__request__website_id__default_value[] = "Unknown";
static const EAuthTokenPlatformType cauthentication__begin_auth_session_via_credentials__request__platform_type__default_value = EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_Unknown;
static const ESessionPersistence cauthentication__begin_auth_session_via_credentials__request__persistence__default_value = ESESSION_PERSISTENCE__k_ESessionPersistence_Persistent;
static const int32_t cauthentication__begin_auth_session_via_credentials__request__qos_level__default_value = 2;
static const ProtobufCFieldDescriptor cauthentication__begin_auth_session_via_credentials__request__field_descriptors[12] =
{
  {
    "device_friendly_name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, device_friendly_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "account_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, account_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "encrypted_password",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, encrypted_password),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "encryption_timestamp",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, has_encryption_timestamp),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, encryption_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "remember_login",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, has_remember_login),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, remember_login),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "platform_type",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, has_platform_type),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, platform_type),
    &eauth_token_platform_type__descriptor,
    &cauthentication__begin_auth_session_via_credentials__request__platform_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persistence",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, has_persistence),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, persistence),
    &esession_persistence__descriptor,
    &cauthentication__begin_auth_session_via_credentials__request__persistence__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "website_id",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, website_id),
    NULL,
    &cauthentication__begin_auth_session_via_credentials__request__website_id__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "device_details",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, device_details),
    &cauthentication__device_details__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "guard_data",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, guard_data),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "language",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, has_language),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, language),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "qos_level",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, has_qos_level),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsRequest, qos_level),
    NULL,
    &cauthentication__begin_auth_session_via_credentials__request__qos_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__begin_auth_session_via_credentials__request__field_indices_by_name[] = {
  1,   /* field[1] = account_name */
  8,   /* field[8] = device_details */
  0,   /* field[0] = device_friendly_name */
  2,   /* field[2] = encrypted_password */
  3,   /* field[3] = encryption_timestamp */
  9,   /* field[9] = guard_data */
  10,   /* field[10] = language */
  6,   /* field[6] = persistence */
  5,   /* field[5] = platform_type */
  11,   /* field[11] = qos_level */
  4,   /* field[4] = remember_login */
  7,   /* field[7] = website_id */
};
static const ProtobufCIntRange cauthentication__begin_auth_session_via_credentials__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 12 }
};
const ProtobufCMessageDescriptor cauthentication__begin_auth_session_via_credentials__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_BeginAuthSessionViaCredentials_Request",
  "CAuthenticationBeginAuthSessionViaCredentialsRequest",
  "CAuthenticationBeginAuthSessionViaCredentialsRequest",
  "",
  sizeof(CAuthenticationBeginAuthSessionViaCredentialsRequest),
  12,
  cauthentication__begin_auth_session_via_credentials__request__field_descriptors,
  cauthentication__begin_auth_session_via_credentials__request__field_indices_by_name,
  1,  cauthentication__begin_auth_session_via_credentials__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__begin_auth_session_via_credentials__response__field_descriptors[8] =
{
  {
    "client_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, has_client_id),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, client_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "request_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, has_request_id),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, request_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "interval",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FLOAT,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, has_interval),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, interval),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "allowed_confirmations",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, n_allowed_confirmations),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, allowed_confirmations),
    &cauthentication__allowed_confirmation__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, has_steamid),
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "weak_token",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, weak_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "agreement_session_url",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, agreement_session_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "extended_error_message",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationBeginAuthSessionViaCredentialsResponse, extended_error_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__begin_auth_session_via_credentials__response__field_indices_by_name[] = {
  6,   /* field[6] = agreement_session_url */
  3,   /* field[3] = allowed_confirmations */
  0,   /* field[0] = client_id */
  7,   /* field[7] = extended_error_message */
  2,   /* field[2] = interval */
  1,   /* field[1] = request_id */
  4,   /* field[4] = steamid */
  5,   /* field[5] = weak_token */
};
static const ProtobufCIntRange cauthentication__begin_auth_session_via_credentials__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cauthentication__begin_auth_session_via_credentials__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_BeginAuthSessionViaCredentials_Response",
  "CAuthenticationBeginAuthSessionViaCredentialsResponse",
  "CAuthenticationBeginAuthSessionViaCredentialsResponse",
  "",
  sizeof(CAuthenticationBeginAuthSessionViaCredentialsResponse),
  8,
  cauthentication__begin_auth_session_via_credentials__response__field_descriptors,
  cauthentication__begin_auth_session_via_credentials__response__field_indices_by_name,
  1,  cauthentication__begin_auth_session_via_credentials__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__poll_auth_session_status__request__field_descriptors[3] =
{
  {
    "client_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationPollAuthSessionStatusRequest, has_client_id),
    offsetof(CAuthenticationPollAuthSessionStatusRequest, client_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "request_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CAuthenticationPollAuthSessionStatusRequest, has_request_id),
    offsetof(CAuthenticationPollAuthSessionStatusRequest, request_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "token_to_revoke",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationPollAuthSessionStatusRequest, has_token_to_revoke),
    offsetof(CAuthenticationPollAuthSessionStatusRequest, token_to_revoke),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__poll_auth_session_status__request__field_indices_by_name[] = {
  0,   /* field[0] = client_id */
  1,   /* field[1] = request_id */
  2,   /* field[2] = token_to_revoke */
};
static const ProtobufCIntRange cauthentication__poll_auth_session_status__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cauthentication__poll_auth_session_status__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_PollAuthSessionStatus_Request",
  "CAuthenticationPollAuthSessionStatusRequest",
  "CAuthenticationPollAuthSessionStatusRequest",
  "",
  sizeof(CAuthenticationPollAuthSessionStatusRequest),
  3,
  cauthentication__poll_auth_session_status__request__field_descriptors,
  cauthentication__poll_auth_session_status__request__field_indices_by_name,
  1,  cauthentication__poll_auth_session_status__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__poll_auth_session_status__response__field_descriptors[8] =
{
  {
    "new_client_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationPollAuthSessionStatusResponse, has_new_client_id),
    offsetof(CAuthenticationPollAuthSessionStatusResponse, new_client_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "new_challenge_url",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationPollAuthSessionStatusResponse, new_challenge_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "refresh_token",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationPollAuthSessionStatusResponse, refresh_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "access_token",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationPollAuthSessionStatusResponse, access_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "had_remote_interaction",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CAuthenticationPollAuthSessionStatusResponse, has_had_remote_interaction),
    offsetof(CAuthenticationPollAuthSessionStatusResponse, had_remote_interaction),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "account_name",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationPollAuthSessionStatusResponse, account_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "new_guard_data",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationPollAuthSessionStatusResponse, new_guard_data),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "agreement_session_url",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationPollAuthSessionStatusResponse, agreement_session_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__poll_auth_session_status__response__field_indices_by_name[] = {
  3,   /* field[3] = access_token */
  5,   /* field[5] = account_name */
  7,   /* field[7] = agreement_session_url */
  4,   /* field[4] = had_remote_interaction */
  1,   /* field[1] = new_challenge_url */
  0,   /* field[0] = new_client_id */
  6,   /* field[6] = new_guard_data */
  2,   /* field[2] = refresh_token */
};
static const ProtobufCIntRange cauthentication__poll_auth_session_status__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cauthentication__poll_auth_session_status__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_PollAuthSessionStatus_Response",
  "CAuthenticationPollAuthSessionStatusResponse",
  "CAuthenticationPollAuthSessionStatusResponse",
  "",
  sizeof(CAuthenticationPollAuthSessionStatusResponse),
  8,
  cauthentication__poll_auth_session_status__response__field_descriptors,
  cauthentication__poll_auth_session_status__response__field_indices_by_name,
  1,  cauthentication__poll_auth_session_status__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__get_auth_session_info__request__field_descriptors[1] =
{
  {
    "client_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationGetAuthSessionInfoRequest, has_client_id),
    offsetof(CAuthenticationGetAuthSessionInfoRequest, client_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__get_auth_session_info__request__field_indices_by_name[] = {
  0,   /* field[0] = client_id */
};
static const ProtobufCIntRange cauthentication__get_auth_session_info__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cauthentication__get_auth_session_info__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_GetAuthSessionInfo_Request",
  "CAuthenticationGetAuthSessionInfoRequest",
  "CAuthenticationGetAuthSessionInfoRequest",
  "",
  sizeof(CAuthenticationGetAuthSessionInfoRequest),
  1,
  cauthentication__get_auth_session_info__request__field_descriptors,
  cauthentication__get_auth_session_info__request__field_indices_by_name,
  1,  cauthentication__get_auth_session_info__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EAuthTokenPlatformType cauthentication__get_auth_session_info__response__platform_type__default_value = EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_Unknown;
static const EAuthSessionSecurityHistory cauthentication__get_auth_session_info__response__login_history__default_value = EAUTH_SESSION_SECURITY_HISTORY__k_EAuthSessionSecurityHistory_Invalid;
static const ESessionPersistence cauthentication__get_auth_session_info__response__requested_persistence__default_value = ESESSION_PERSISTENCE__k_ESessionPersistence_Invalid;
static const ProtobufCFieldDescriptor cauthentication__get_auth_session_info__response__field_descriptors[12] =
{
  {
    "ip",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetAuthSessionInfoResponse, ip),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "geoloc",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetAuthSessionInfoResponse, geoloc),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "city",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetAuthSessionInfoResponse, city),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "state",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetAuthSessionInfoResponse, state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "country",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetAuthSessionInfoResponse, country),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "platform_type",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationGetAuthSessionInfoResponse, has_platform_type),
    offsetof(CAuthenticationGetAuthSessionInfoResponse, platform_type),
    &eauth_token_platform_type__descriptor,
    &cauthentication__get_auth_session_info__response__platform_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "device_friendly_name",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationGetAuthSessionInfoResponse, device_friendly_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "version",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CAuthenticationGetAuthSessionInfoResponse, has_version),
    offsetof(CAuthenticationGetAuthSessionInfoResponse, version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "login_history",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationGetAuthSessionInfoResponse, has_login_history),
    offsetof(CAuthenticationGetAuthSessionInfoResponse, login_history),
    &eauth_session_security_history__descriptor,
    &cauthentication__get_auth_session_info__response__login_history__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "requestor_location_mismatch",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CAuthenticationGetAuthSessionInfoResponse, has_requestor_location_mismatch),
    offsetof(CAuthenticationGetAuthSessionInfoResponse, requestor_location_mismatch),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "high_usage_login",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CAuthenticationGetAuthSessionInfoResponse, has_high_usage_login),
    offsetof(CAuthenticationGetAuthSessionInfoResponse, high_usage_login),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "requested_persistence",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationGetAuthSessionInfoResponse, has_requested_persistence),
    offsetof(CAuthenticationGetAuthSessionInfoResponse, requested_persistence),
    &esession_persistence__descriptor,
    &cauthentication__get_auth_session_info__response__requested_persistence__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__get_auth_session_info__response__field_indices_by_name[] = {
  2,   /* field[2] = city */
  4,   /* field[4] = country */
  6,   /* field[6] = device_friendly_name */
  1,   /* field[1] = geoloc */
  10,   /* field[10] = high_usage_login */
  0,   /* field[0] = ip */
  8,   /* field[8] = login_history */
  5,   /* field[5] = platform_type */
  11,   /* field[11] = requested_persistence */
  9,   /* field[9] = requestor_location_mismatch */
  3,   /* field[3] = state */
  7,   /* field[7] = version */
};
static const ProtobufCIntRange cauthentication__get_auth_session_info__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 12 }
};
const ProtobufCMessageDescriptor cauthentication__get_auth_session_info__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_GetAuthSessionInfo_Response",
  "CAuthenticationGetAuthSessionInfoResponse",
  "CAuthenticationGetAuthSessionInfoResponse",
  "",
  sizeof(CAuthenticationGetAuthSessionInfoResponse),
  12,
  cauthentication__get_auth_session_info__response__field_descriptors,
  cauthentication__get_auth_session_info__response__field_indices_by_name,
  1,  cauthentication__get_auth_session_info__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const protobuf_c_boolean cauthentication__update_auth_session_with_mobile_confirmation__request__confirm__default_value = 0;
static const ESessionPersistence cauthentication__update_auth_session_with_mobile_confirmation__request__persistence__default_value = ESESSION_PERSISTENCE__k_ESessionPersistence_Persistent;
static const ProtobufCFieldDescriptor cauthentication__update_auth_session_with_mobile_confirmation__request__field_descriptors[6] =
{
  {
    "version",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, has_version),
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, has_client_id),
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, client_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, has_steamid),
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "signature",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, has_signature),
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, signature),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "confirm",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, has_confirm),
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, confirm),
    NULL,
    &cauthentication__update_auth_session_with_mobile_confirmation__request__confirm__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persistence",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, has_persistence),
    offsetof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest, persistence),
    &esession_persistence__descriptor,
    &cauthentication__update_auth_session_with_mobile_confirmation__request__persistence__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__update_auth_session_with_mobile_confirmation__request__field_indices_by_name[] = {
  1,   /* field[1] = client_id */
  4,   /* field[4] = confirm */
  5,   /* field[5] = persistence */
  3,   /* field[3] = signature */
  2,   /* field[2] = steamid */
  0,   /* field[0] = version */
};
static const ProtobufCIntRange cauthentication__update_auth_session_with_mobile_confirmation__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cauthentication__update_auth_session_with_mobile_confirmation__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request",
  "CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest",
  "CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest",
  "",
  sizeof(CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest),
  6,
  cauthentication__update_auth_session_with_mobile_confirmation__request__field_descriptors,
  cauthentication__update_auth_session_with_mobile_confirmation__request__field_indices_by_name,
  1,  cauthentication__update_auth_session_with_mobile_confirmation__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cauthentication__update_auth_session_with_mobile_confirmation__response__field_descriptors NULL
#define cauthentication__update_auth_session_with_mobile_confirmation__response__field_indices_by_name NULL
#define cauthentication__update_auth_session_with_mobile_confirmation__response__number_ranges NULL
const ProtobufCMessageDescriptor cauthentication__update_auth_session_with_mobile_confirmation__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response",
  "CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse",
  "CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse",
  "",
  sizeof(CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse),
  0,
  cauthentication__update_auth_session_with_mobile_confirmation__response__field_descriptors,
  cauthentication__update_auth_session_with_mobile_confirmation__response__field_indices_by_name,
  0,  cauthentication__update_auth_session_with_mobile_confirmation__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EAuthSessionGuardType cauthentication__update_auth_session_with_steam_guard_code__request__code_type__default_value = EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_Unknown;
static const ProtobufCFieldDescriptor cauthentication__update_auth_session_with_steam_guard_code__request__field_descriptors[4] =
{
  {
    "client_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest, has_client_id),
    offsetof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest, client_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest, has_steamid),
    offsetof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "code",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest, code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "code_type",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest, has_code_type),
    offsetof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest, code_type),
    &eauth_session_guard_type__descriptor,
    &cauthentication__update_auth_session_with_steam_guard_code__request__code_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__update_auth_session_with_steam_guard_code__request__field_indices_by_name[] = {
  0,   /* field[0] = client_id */
  2,   /* field[2] = code */
  3,   /* field[3] = code_type */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cauthentication__update_auth_session_with_steam_guard_code__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cauthentication__update_auth_session_with_steam_guard_code__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request",
  "CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest",
  "CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest",
  "",
  sizeof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest),
  4,
  cauthentication__update_auth_session_with_steam_guard_code__request__field_descriptors,
  cauthentication__update_auth_session_with_steam_guard_code__request__field_indices_by_name,
  1,  cauthentication__update_auth_session_with_steam_guard_code__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__update_auth_session_with_steam_guard_code__response__field_descriptors[1] =
{
  {
    "agreement_session_url",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse, agreement_session_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__update_auth_session_with_steam_guard_code__response__field_indices_by_name[] = {
  0,   /* field[0] = agreement_session_url */
};
static const ProtobufCIntRange cauthentication__update_auth_session_with_steam_guard_code__response__number_ranges[1 + 1] =
{
  { 7, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cauthentication__update_auth_session_with_steam_guard_code__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response",
  "CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse",
  "CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse",
  "",
  sizeof(CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse),
  1,
  cauthentication__update_auth_session_with_steam_guard_code__response__field_descriptors,
  cauthentication__update_auth_session_with_steam_guard_code__response__field_indices_by_name,
  1,  cauthentication__update_auth_session_with_steam_guard_code__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ETokenRenewalType cauthentication__access_token__generate_for_app__request__renewal_type__default_value = ETOKEN_RENEWAL_TYPE__k_ETokenRenewalType_None;
static const ProtobufCFieldDescriptor cauthentication__access_token__generate_for_app__request__field_descriptors[3] =
{
  {
    "refresh_token",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationAccessTokenGenerateForAppRequest, refresh_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationAccessTokenGenerateForAppRequest, has_steamid),
    offsetof(CAuthenticationAccessTokenGenerateForAppRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "renewal_type",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationAccessTokenGenerateForAppRequest, has_renewal_type),
    offsetof(CAuthenticationAccessTokenGenerateForAppRequest, renewal_type),
    &etoken_renewal_type__descriptor,
    &cauthentication__access_token__generate_for_app__request__renewal_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__access_token__generate_for_app__request__field_indices_by_name[] = {
  0,   /* field[0] = refresh_token */
  2,   /* field[2] = renewal_type */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cauthentication__access_token__generate_for_app__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cauthentication__access_token__generate_for_app__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_AccessToken_GenerateForApp_Request",
  "CAuthenticationAccessTokenGenerateForAppRequest",
  "CAuthenticationAccessTokenGenerateForAppRequest",
  "",
  sizeof(CAuthenticationAccessTokenGenerateForAppRequest),
  3,
  cauthentication__access_token__generate_for_app__request__field_descriptors,
  cauthentication__access_token__generate_for_app__request__field_indices_by_name,
  1,  cauthentication__access_token__generate_for_app__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__access_token__generate_for_app__response__field_descriptors[2] =
{
  {
    "access_token",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationAccessTokenGenerateForAppResponse, access_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "refresh_token",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationAccessTokenGenerateForAppResponse, refresh_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__access_token__generate_for_app__response__field_indices_by_name[] = {
  0,   /* field[0] = access_token */
  1,   /* field[1] = refresh_token */
};
static const ProtobufCIntRange cauthentication__access_token__generate_for_app__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cauthentication__access_token__generate_for_app__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_AccessToken_GenerateForApp_Response",
  "CAuthenticationAccessTokenGenerateForAppResponse",
  "CAuthenticationAccessTokenGenerateForAppResponse",
  "",
  sizeof(CAuthenticationAccessTokenGenerateForAppResponse),
  2,
  cauthentication__access_token__generate_for_app__response__field_descriptors,
  cauthentication__access_token__generate_for_app__response__field_indices_by_name,
  1,  cauthentication__access_token__generate_for_app__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cauthentication__refresh_token__enumerate__request__field_descriptors NULL
#define cauthentication__refresh_token__enumerate__request__field_indices_by_name NULL
#define cauthentication__refresh_token__enumerate__request__number_ranges NULL
const ProtobufCMessageDescriptor cauthentication__refresh_token__enumerate__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_RefreshToken_Enumerate_Request",
  "CAuthenticationRefreshTokenEnumerateRequest",
  "CAuthenticationRefreshTokenEnumerateRequest",
  "",
  sizeof(CAuthenticationRefreshTokenEnumerateRequest),
  0,
  cauthentication__refresh_token__enumerate__request__field_descriptors,
  cauthentication__refresh_token__enumerate__request__field_indices_by_name,
  0,  cauthentication__refresh_token__enumerate__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__refresh_token__enumerate__response__token_usage_event__field_descriptors[6] =
{
  {
    "time",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent, has_time),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent, time),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ip",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent, ip),
    &cmsg_ipaddress__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "locale",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent, locale),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "country",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent, country),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "state",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent, state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "city",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent, city),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__refresh_token__enumerate__response__token_usage_event__field_indices_by_name[] = {
  5,   /* field[5] = city */
  3,   /* field[3] = country */
  1,   /* field[1] = ip */
  2,   /* field[2] = locale */
  4,   /* field[4] = state */
  0,   /* field[0] = time */
};
static const ProtobufCIntRange cauthentication__refresh_token__enumerate__response__token_usage_event__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cauthentication__refresh_token__enumerate__response__token_usage_event__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_RefreshToken_Enumerate_Response.TokenUsageEvent",
  "TokenUsageEvent",
  "CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent",
  "",
  sizeof(CAuthenticationRefreshTokenEnumerateResponse__TokenUsageEvent),
  6,
  cauthentication__refresh_token__enumerate__response__token_usage_event__field_descriptors,
  cauthentication__refresh_token__enumerate__response__token_usage_event__field_indices_by_name,
  1,  cauthentication__refresh_token__enumerate__response__token_usage_event__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EAuthTokenPlatformType cauthentication__refresh_token__enumerate__response__refresh_token_description__platform_type__default_value = EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_Unknown;
static const ProtobufCFieldDescriptor cauthentication__refresh_token__enumerate__response__refresh_token_description__field_descriptors[11] =
{
  {
    "token_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, has_token_id),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, token_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "token_description",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, token_description),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_updated",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, has_time_updated),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, time_updated),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "platform_type",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, has_platform_type),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, platform_type),
    &eauth_token_platform_type__descriptor,
    &cauthentication__refresh_token__enumerate__response__refresh_token_description__platform_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "logged_in",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, has_logged_in),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, logged_in),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "os_platform",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, has_os_platform),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, os_platform),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "auth_type",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, has_auth_type),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, auth_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "gaming_device_type",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, has_gaming_device_type),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, gaming_device_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "first_seen",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, first_seen),
    &cauthentication__refresh_token__enumerate__response__token_usage_event__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_seen",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, last_seen),
    &cauthentication__refresh_token__enumerate__response__token_usage_event__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "os_type",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, has_os_type),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription, os_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__refresh_token__enumerate__response__refresh_token_description__field_indices_by_name[] = {
  6,   /* field[6] = auth_type */
  8,   /* field[8] = first_seen */
  7,   /* field[7] = gaming_device_type */
  9,   /* field[9] = last_seen */
  4,   /* field[4] = logged_in */
  5,   /* field[5] = os_platform */
  10,   /* field[10] = os_type */
  3,   /* field[3] = platform_type */
  2,   /* field[2] = time_updated */
  1,   /* field[1] = token_description */
  0,   /* field[0] = token_id */
};
static const ProtobufCIntRange cauthentication__refresh_token__enumerate__response__refresh_token_description__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 11 }
};
const ProtobufCMessageDescriptor cauthentication__refresh_token__enumerate__response__refresh_token_description__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_RefreshToken_Enumerate_Response.RefreshTokenDescription",
  "RefreshTokenDescription",
  "CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription",
  "",
  sizeof(CAuthenticationRefreshTokenEnumerateResponse__RefreshTokenDescription),
  11,
  cauthentication__refresh_token__enumerate__response__refresh_token_description__field_descriptors,
  cauthentication__refresh_token__enumerate__response__refresh_token_description__field_indices_by_name,
  1,  cauthentication__refresh_token__enumerate__response__refresh_token_description__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__refresh_token__enumerate__response__field_descriptors[2] =
{
  {
    "refresh_tokens",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse, n_refresh_tokens),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse, refresh_tokens),
    &cauthentication__refresh_token__enumerate__response__refresh_token_description__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "requesting_token",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationRefreshTokenEnumerateResponse, has_requesting_token),
    offsetof(CAuthenticationRefreshTokenEnumerateResponse, requesting_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__refresh_token__enumerate__response__field_indices_by_name[] = {
  0,   /* field[0] = refresh_tokens */
  1,   /* field[1] = requesting_token */
};
static const ProtobufCIntRange cauthentication__refresh_token__enumerate__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cauthentication__refresh_token__enumerate__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_RefreshToken_Enumerate_Response",
  "CAuthenticationRefreshTokenEnumerateResponse",
  "CAuthenticationRefreshTokenEnumerateResponse",
  "",
  sizeof(CAuthenticationRefreshTokenEnumerateResponse),
  2,
  cauthentication__refresh_token__enumerate__response__field_descriptors,
  cauthentication__refresh_token__enumerate__response__field_indices_by_name,
  1,  cauthentication__refresh_token__enumerate__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cauthentication__get_auth_sessions_for_account__request__field_descriptors NULL
#define cauthentication__get_auth_sessions_for_account__request__field_indices_by_name NULL
#define cauthentication__get_auth_sessions_for_account__request__number_ranges NULL
const ProtobufCMessageDescriptor cauthentication__get_auth_sessions_for_account__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_GetAuthSessionsForAccount_Request",
  "CAuthenticationGetAuthSessionsForAccountRequest",
  "CAuthenticationGetAuthSessionsForAccountRequest",
  "",
  sizeof(CAuthenticationGetAuthSessionsForAccountRequest),
  0,
  cauthentication__get_auth_sessions_for_account__request__field_descriptors,
  cauthentication__get_auth_sessions_for_account__request__field_indices_by_name,
  0,  cauthentication__get_auth_sessions_for_account__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__get_auth_sessions_for_account__response__field_descriptors[1] =
{
  {
    "client_ids",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CAuthenticationGetAuthSessionsForAccountResponse, n_client_ids),
    offsetof(CAuthenticationGetAuthSessionsForAccountResponse, client_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__get_auth_sessions_for_account__response__field_indices_by_name[] = {
  0,   /* field[0] = client_ids */
};
static const ProtobufCIntRange cauthentication__get_auth_sessions_for_account__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cauthentication__get_auth_sessions_for_account__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_GetAuthSessionsForAccount_Response",
  "CAuthenticationGetAuthSessionsForAccountResponse",
  "CAuthenticationGetAuthSessionsForAccountResponse",
  "",
  sizeof(CAuthenticationGetAuthSessionsForAccountResponse),
  1,
  cauthentication__get_auth_sessions_for_account__response__field_descriptors,
  cauthentication__get_auth_sessions_for_account__response__field_indices_by_name,
  1,  cauthentication__get_auth_sessions_for_account__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__migrate_mobile_session__request__field_descriptors[3] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationMigrateMobileSessionRequest, has_steamid),
    offsetof(CAuthenticationMigrateMobileSessionRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "token",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationMigrateMobileSessionRequest, token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "signature",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationMigrateMobileSessionRequest, signature),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__migrate_mobile_session__request__field_indices_by_name[] = {
  2,   /* field[2] = signature */
  0,   /* field[0] = steamid */
  1,   /* field[1] = token */
};
static const ProtobufCIntRange cauthentication__migrate_mobile_session__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cauthentication__migrate_mobile_session__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_MigrateMobileSession_Request",
  "CAuthenticationMigrateMobileSessionRequest",
  "CAuthenticationMigrateMobileSessionRequest",
  "",
  sizeof(CAuthenticationMigrateMobileSessionRequest),
  3,
  cauthentication__migrate_mobile_session__request__field_descriptors,
  cauthentication__migrate_mobile_session__request__field_indices_by_name,
  1,  cauthentication__migrate_mobile_session__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication__migrate_mobile_session__response__field_descriptors[2] =
{
  {
    "refresh_token",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationMigrateMobileSessionResponse, refresh_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "access_token",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationMigrateMobileSessionResponse, access_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__migrate_mobile_session__response__field_indices_by_name[] = {
  1,   /* field[1] = access_token */
  0,   /* field[0] = refresh_token */
};
static const ProtobufCIntRange cauthentication__migrate_mobile_session__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cauthentication__migrate_mobile_session__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_MigrateMobileSession_Response",
  "CAuthenticationMigrateMobileSessionResponse",
  "CAuthenticationMigrateMobileSessionResponse",
  "",
  sizeof(CAuthenticationMigrateMobileSessionResponse),
  2,
  cauthentication__migrate_mobile_session__response__field_descriptors,
  cauthentication__migrate_mobile_session__response__field_indices_by_name,
  1,  cauthentication__migrate_mobile_session__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EAuthTokenRevokeAction cauthentication__token__revoke__request__revoke_action__default_value = EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokePermanent;
static const ProtobufCFieldDescriptor cauthentication__token__revoke__request__field_descriptors[2] =
{
  {
    "token",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CAuthenticationTokenRevokeRequest, token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "revoke_action",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationTokenRevokeRequest, has_revoke_action),
    offsetof(CAuthenticationTokenRevokeRequest, revoke_action),
    &eauth_token_revoke_action__descriptor,
    &cauthentication__token__revoke__request__revoke_action__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__token__revoke__request__field_indices_by_name[] = {
  1,   /* field[1] = revoke_action */
  0,   /* field[0] = token */
};
static const ProtobufCIntRange cauthentication__token__revoke__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cauthentication__token__revoke__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_Token_Revoke_Request",
  "CAuthenticationTokenRevokeRequest",
  "CAuthenticationTokenRevokeRequest",
  "",
  sizeof(CAuthenticationTokenRevokeRequest),
  2,
  cauthentication__token__revoke__request__field_descriptors,
  cauthentication__token__revoke__request__field_indices_by_name,
  1,  cauthentication__token__revoke__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cauthentication__token__revoke__response__field_descriptors NULL
#define cauthentication__token__revoke__response__field_indices_by_name NULL
#define cauthentication__token__revoke__response__number_ranges NULL
const ProtobufCMessageDescriptor cauthentication__token__revoke__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_Token_Revoke_Response",
  "CAuthenticationTokenRevokeResponse",
  "CAuthenticationTokenRevokeResponse",
  "",
  sizeof(CAuthenticationTokenRevokeResponse),
  0,
  cauthentication__token__revoke__response__field_descriptors,
  cauthentication__token__revoke__response__field_indices_by_name,
  0,  cauthentication__token__revoke__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EAuthTokenRevokeAction cauthentication__refresh_token__revoke__request__revoke_action__default_value = EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokePermanent;
static const ProtobufCFieldDescriptor cauthentication__refresh_token__revoke__request__field_descriptors[4] =
{
  {
    "token_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationRefreshTokenRevokeRequest, has_token_id),
    offsetof(CAuthenticationRefreshTokenRevokeRequest, token_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationRefreshTokenRevokeRequest, has_steamid),
    offsetof(CAuthenticationRefreshTokenRevokeRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "revoke_action",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CAuthenticationRefreshTokenRevokeRequest, has_revoke_action),
    offsetof(CAuthenticationRefreshTokenRevokeRequest, revoke_action),
    &eauth_token_revoke_action__descriptor,
    &cauthentication__refresh_token__revoke__request__revoke_action__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "signature",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CAuthenticationRefreshTokenRevokeRequest, has_signature),
    offsetof(CAuthenticationRefreshTokenRevokeRequest, signature),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication__refresh_token__revoke__request__field_indices_by_name[] = {
  2,   /* field[2] = revoke_action */
  3,   /* field[3] = signature */
  1,   /* field[1] = steamid */
  0,   /* field[0] = token_id */
};
static const ProtobufCIntRange cauthentication__refresh_token__revoke__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cauthentication__refresh_token__revoke__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_RefreshToken_Revoke_Request",
  "CAuthenticationRefreshTokenRevokeRequest",
  "CAuthenticationRefreshTokenRevokeRequest",
  "",
  sizeof(CAuthenticationRefreshTokenRevokeRequest),
  4,
  cauthentication__refresh_token__revoke__request__field_descriptors,
  cauthentication__refresh_token__revoke__request__field_indices_by_name,
  1,  cauthentication__refresh_token__revoke__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cauthentication__refresh_token__revoke__response__field_descriptors NULL
#define cauthentication__refresh_token__revoke__response__field_indices_by_name NULL
#define cauthentication__refresh_token__revoke__response__number_ranges NULL
const ProtobufCMessageDescriptor cauthentication__refresh_token__revoke__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthentication_RefreshToken_Revoke_Response",
  "CAuthenticationRefreshTokenRevokeResponse",
  "CAuthenticationRefreshTokenRevokeResponse",
  "",
  sizeof(CAuthenticationRefreshTokenRevokeResponse),
  0,
  cauthentication__refresh_token__revoke__response__field_descriptors,
  cauthentication__refresh_token__revoke__response__field_indices_by_name,
  0,  cauthentication__refresh_token__revoke__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication_support__query_refresh_tokens_by_account__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationSupportQueryRefreshTokensByAccountRequest, has_steamid),
    offsetof(CAuthenticationSupportQueryRefreshTokensByAccountRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "include_revoked_tokens",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CAuthenticationSupportQueryRefreshTokensByAccountRequest, has_include_revoked_tokens),
    offsetof(CAuthenticationSupportQueryRefreshTokensByAccountRequest, include_revoked_tokens),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication_support__query_refresh_tokens_by_account__request__field_indices_by_name[] = {
  1,   /* field[1] = include_revoked_tokens */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cauthentication_support__query_refresh_tokens_by_account__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cauthentication_support__query_refresh_tokens_by_account__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthenticationSupport_QueryRefreshTokensByAccount_Request",
  "CAuthenticationSupportQueryRefreshTokensByAccountRequest",
  "CAuthenticationSupportQueryRefreshTokensByAccountRequest",
  "",
  sizeof(CAuthenticationSupportQueryRefreshTokensByAccountRequest),
  2,
  cauthentication_support__query_refresh_tokens_by_account__request__field_descriptors,
  cauthentication_support__query_refresh_tokens_by_account__request__field_indices_by_name,
  1,  cauthentication_support__query_refresh_tokens_by_account__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor csupport_refresh_token_description__token_usage_event__field_descriptors[5] =
{
  {
    "time",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSupportRefreshTokenDescription__TokenUsageEvent, has_time),
    offsetof(CSupportRefreshTokenDescription__TokenUsageEvent, time),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ip",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CSupportRefreshTokenDescription__TokenUsageEvent, ip),
    &cmsg_ipaddress__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "country",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CSupportRefreshTokenDescription__TokenUsageEvent, country),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "state",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CSupportRefreshTokenDescription__TokenUsageEvent, state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "city",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CSupportRefreshTokenDescription__TokenUsageEvent, city),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned csupport_refresh_token_description__token_usage_event__field_indices_by_name[] = {
  4,   /* field[4] = city */
  2,   /* field[2] = country */
  1,   /* field[1] = ip */
  3,   /* field[3] = state */
  0,   /* field[0] = time */
};
static const ProtobufCIntRange csupport_refresh_token_description__token_usage_event__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor csupport_refresh_token_description__token_usage_event__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CSupportRefreshTokenDescription.TokenUsageEvent",
  "TokenUsageEvent",
  "CSupportRefreshTokenDescription__TokenUsageEvent",
  "",
  sizeof(CSupportRefreshTokenDescription__TokenUsageEvent),
  5,
  csupport_refresh_token_description__token_usage_event__field_descriptors,
  csupport_refresh_token_description__token_usage_event__field_indices_by_name,
  1,  csupport_refresh_token_description__token_usage_event__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EAuthTokenPlatformType csupport_refresh_token_description__platform_type__default_value = EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_Unknown;
static const EAuthTokenState csupport_refresh_token_description__token_state__default_value = EAUTH_TOKEN_STATE__k_EAuthTokenState_Invalid;
static const ProtobufCFieldDescriptor csupport_refresh_token_description__field_descriptors[12] =
{
  {
    "token_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CSupportRefreshTokenDescription, has_token_id),
    offsetof(CSupportRefreshTokenDescription, token_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "token_description",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CSupportRefreshTokenDescription, token_description),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_updated",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSupportRefreshTokenDescription, has_time_updated),
    offsetof(CSupportRefreshTokenDescription, time_updated),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "platform_type",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CSupportRefreshTokenDescription, has_platform_type),
    offsetof(CSupportRefreshTokenDescription, platform_type),
    &eauth_token_platform_type__descriptor,
    &csupport_refresh_token_description__platform_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "token_state",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CSupportRefreshTokenDescription, has_token_state),
    offsetof(CSupportRefreshTokenDescription, token_state),
    &eauth_token_state__descriptor,
    &csupport_refresh_token_description__token_state__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "owner_steamid",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CSupportRefreshTokenDescription, has_owner_steamid),
    offsetof(CSupportRefreshTokenDescription, owner_steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "os_platform",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSupportRefreshTokenDescription, has_os_platform),
    offsetof(CSupportRefreshTokenDescription, os_platform),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "os_type",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CSupportRefreshTokenDescription, has_os_type),
    offsetof(CSupportRefreshTokenDescription, os_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "auth_type",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSupportRefreshTokenDescription, has_auth_type),
    offsetof(CSupportRefreshTokenDescription, auth_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "gaming_device_type",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSupportRefreshTokenDescription, has_gaming_device_type),
    offsetof(CSupportRefreshTokenDescription, gaming_device_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "first_seen",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CSupportRefreshTokenDescription, first_seen),
    &csupport_refresh_token_description__token_usage_event__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_seen",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CSupportRefreshTokenDescription, last_seen),
    &csupport_refresh_token_description__token_usage_event__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned csupport_refresh_token_description__field_indices_by_name[] = {
  8,   /* field[8] = auth_type */
  10,   /* field[10] = first_seen */
  9,   /* field[9] = gaming_device_type */
  11,   /* field[11] = last_seen */
  6,   /* field[6] = os_platform */
  7,   /* field[7] = os_type */
  5,   /* field[5] = owner_steamid */
  3,   /* field[3] = platform_type */
  2,   /* field[2] = time_updated */
  1,   /* field[1] = token_description */
  0,   /* field[0] = token_id */
  4,   /* field[4] = token_state */
};
static const ProtobufCIntRange csupport_refresh_token_description__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 12 }
};
const ProtobufCMessageDescriptor csupport_refresh_token_description__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CSupportRefreshTokenDescription",
  "CSupportRefreshTokenDescription",
  "CSupportRefreshTokenDescription",
  "",
  sizeof(CSupportRefreshTokenDescription),
  12,
  csupport_refresh_token_description__field_descriptors,
  csupport_refresh_token_description__field_indices_by_name,
  1,  csupport_refresh_token_description__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication_support__query_refresh_tokens_by_account__response__field_descriptors[2] =
{
  {
    "refresh_tokens",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CAuthenticationSupportQueryRefreshTokensByAccountResponse, n_refresh_tokens),
    offsetof(CAuthenticationSupportQueryRefreshTokensByAccountResponse, refresh_tokens),
    &csupport_refresh_token_description__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_token_reset",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CAuthenticationSupportQueryRefreshTokensByAccountResponse, has_last_token_reset),
    offsetof(CAuthenticationSupportQueryRefreshTokensByAccountResponse, last_token_reset),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication_support__query_refresh_tokens_by_account__response__field_indices_by_name[] = {
  1,   /* field[1] = last_token_reset */
  0,   /* field[0] = refresh_tokens */
};
static const ProtobufCIntRange cauthentication_support__query_refresh_tokens_by_account__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cauthentication_support__query_refresh_tokens_by_account__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthenticationSupport_QueryRefreshTokensByAccount_Response",
  "CAuthenticationSupportQueryRefreshTokensByAccountResponse",
  "CAuthenticationSupportQueryRefreshTokensByAccountResponse",
  "",
  sizeof(CAuthenticationSupportQueryRefreshTokensByAccountResponse),
  2,
  cauthentication_support__query_refresh_tokens_by_account__response__field_descriptors,
  cauthentication_support__query_refresh_tokens_by_account__response__field_indices_by_name,
  1,  cauthentication_support__query_refresh_tokens_by_account__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication_support__query_refresh_token_by_id__request__field_descriptors[1] =
{
  {
    "token_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationSupportQueryRefreshTokenByIDRequest, has_token_id),
    offsetof(CAuthenticationSupportQueryRefreshTokenByIDRequest, token_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication_support__query_refresh_token_by_id__request__field_indices_by_name[] = {
  0,   /* field[0] = token_id */
};
static const ProtobufCIntRange cauthentication_support__query_refresh_token_by_id__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cauthentication_support__query_refresh_token_by_id__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthenticationSupport_QueryRefreshTokenByID_Request",
  "CAuthenticationSupportQueryRefreshTokenByIDRequest",
  "CAuthenticationSupportQueryRefreshTokenByIDRequest",
  "",
  sizeof(CAuthenticationSupportQueryRefreshTokenByIDRequest),
  1,
  cauthentication_support__query_refresh_token_by_id__request__field_descriptors,
  cauthentication_support__query_refresh_token_by_id__request__field_indices_by_name,
  1,  cauthentication_support__query_refresh_token_by_id__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication_support__query_refresh_token_by_id__response__field_descriptors[1] =
{
  {
    "refresh_tokens",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CAuthenticationSupportQueryRefreshTokenByIDResponse, n_refresh_tokens),
    offsetof(CAuthenticationSupportQueryRefreshTokenByIDResponse, refresh_tokens),
    &csupport_refresh_token_description__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication_support__query_refresh_token_by_id__response__field_indices_by_name[] = {
  0,   /* field[0] = refresh_tokens */
};
static const ProtobufCIntRange cauthentication_support__query_refresh_token_by_id__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cauthentication_support__query_refresh_token_by_id__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthenticationSupport_QueryRefreshTokenByID_Response",
  "CAuthenticationSupportQueryRefreshTokenByIDResponse",
  "CAuthenticationSupportQueryRefreshTokenByIDResponse",
  "",
  sizeof(CAuthenticationSupportQueryRefreshTokenByIDResponse),
  1,
  cauthentication_support__query_refresh_token_by_id__response__field_descriptors,
  cauthentication_support__query_refresh_token_by_id__response__field_indices_by_name,
  1,  cauthentication_support__query_refresh_token_by_id__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication_support__revoke_token__request__field_descriptors[2] =
{
  {
    "token_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationSupportRevokeTokenRequest, has_token_id),
    offsetof(CAuthenticationSupportRevokeTokenRequest, token_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationSupportRevokeTokenRequest, has_steamid),
    offsetof(CAuthenticationSupportRevokeTokenRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication_support__revoke_token__request__field_indices_by_name[] = {
  1,   /* field[1] = steamid */
  0,   /* field[0] = token_id */
};
static const ProtobufCIntRange cauthentication_support__revoke_token__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cauthentication_support__revoke_token__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthenticationSupport_RevokeToken_Request",
  "CAuthenticationSupportRevokeTokenRequest",
  "CAuthenticationSupportRevokeTokenRequest",
  "",
  sizeof(CAuthenticationSupportRevokeTokenRequest),
  2,
  cauthentication_support__revoke_token__request__field_descriptors,
  cauthentication_support__revoke_token__request__field_indices_by_name,
  1,  cauthentication_support__revoke_token__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cauthentication_support__revoke_token__response__field_descriptors NULL
#define cauthentication_support__revoke_token__response__field_indices_by_name NULL
#define cauthentication_support__revoke_token__response__number_ranges NULL
const ProtobufCMessageDescriptor cauthentication_support__revoke_token__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthenticationSupport_RevokeToken_Response",
  "CAuthenticationSupportRevokeTokenResponse",
  "CAuthenticationSupportRevokeTokenResponse",
  "",
  sizeof(CAuthenticationSupportRevokeTokenResponse),
  0,
  cauthentication_support__revoke_token__response__field_descriptors,
  cauthentication_support__revoke_token__response__field_indices_by_name,
  0,  cauthentication_support__revoke_token__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication_support__get_token_history__request__field_descriptors[1] =
{
  {
    "token_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CAuthenticationSupportGetTokenHistoryRequest, has_token_id),
    offsetof(CAuthenticationSupportGetTokenHistoryRequest, token_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication_support__get_token_history__request__field_indices_by_name[] = {
  0,   /* field[0] = token_id */
};
static const ProtobufCIntRange cauthentication_support__get_token_history__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cauthentication_support__get_token_history__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthenticationSupport_GetTokenHistory_Request",
  "CAuthenticationSupportGetTokenHistoryRequest",
  "CAuthenticationSupportGetTokenHistoryRequest",
  "",
  sizeof(CAuthenticationSupportGetTokenHistoryRequest),
  1,
  cauthentication_support__get_token_history__request__field_descriptors,
  cauthentication_support__get_token_history__request__field_indices_by_name,
  1,  cauthentication_support__get_token_history__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor csupport_refresh_token_audit__field_descriptors[4] =
{
  {
    "action",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CSupportRefreshTokenAudit, has_action),
    offsetof(CSupportRefreshTokenAudit, action),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSupportRefreshTokenAudit, has_time),
    offsetof(CSupportRefreshTokenAudit, time),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ip",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CSupportRefreshTokenAudit, ip),
    &cmsg_ipaddress__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "actor",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CSupportRefreshTokenAudit, has_actor),
    offsetof(CSupportRefreshTokenAudit, actor),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned csupport_refresh_token_audit__field_indices_by_name[] = {
  0,   /* field[0] = action */
  3,   /* field[3] = actor */
  2,   /* field[2] = ip */
  1,   /* field[1] = time */
};
static const ProtobufCIntRange csupport_refresh_token_audit__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor csupport_refresh_token_audit__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CSupportRefreshTokenAudit",
  "CSupportRefreshTokenAudit",
  "CSupportRefreshTokenAudit",
  "",
  sizeof(CSupportRefreshTokenAudit),
  4,
  csupport_refresh_token_audit__field_descriptors,
  csupport_refresh_token_audit__field_indices_by_name,
  1,  csupport_refresh_token_audit__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cauthentication_support__get_token_history__response__field_descriptors[1] =
{
  {
    "history",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CAuthenticationSupportGetTokenHistoryResponse, n_history),
    offsetof(CAuthenticationSupportGetTokenHistoryResponse, history),
    &csupport_refresh_token_audit__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cauthentication_support__get_token_history__response__field_indices_by_name[] = {
  0,   /* field[0] = history */
};
static const ProtobufCIntRange cauthentication_support__get_token_history__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cauthentication_support__get_token_history__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CAuthenticationSupport_GetTokenHistory_Response",
  "CAuthenticationSupportGetTokenHistoryResponse",
  "CAuthenticationSupportGetTokenHistoryResponse",
  "",
  sizeof(CAuthenticationSupportGetTokenHistoryResponse),
  1,
  cauthentication_support__get_token_history__response__field_descriptors,
  cauthentication_support__get_token_history__response__field_indices_by_name,
  1,  cauthentication_support__get_token_history__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor ccloud_gaming__create_nonce__request__field_descriptors[2] =
{
  {
    "platform",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CCloudGamingCreateNonceRequest, platform),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CCloudGamingCreateNonceRequest, has_appid),
    offsetof(CCloudGamingCreateNonceRequest, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned ccloud_gaming__create_nonce__request__field_indices_by_name[] = {
  1,   /* field[1] = appid */
  0,   /* field[0] = platform */
};
static const ProtobufCIntRange ccloud_gaming__create_nonce__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor ccloud_gaming__create_nonce__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CCloudGaming_CreateNonce_Request",
  "CCloudGamingCreateNonceRequest",
  "CCloudGamingCreateNonceRequest",
  "",
  sizeof(CCloudGamingCreateNonceRequest),
  2,
  ccloud_gaming__create_nonce__request__field_descriptors,
  ccloud_gaming__create_nonce__request__field_indices_by_name,
  1,  ccloud_gaming__create_nonce__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor ccloud_gaming__create_nonce__response__field_descriptors[2] =
{
  {
    "nonce",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CCloudGamingCreateNonceResponse, nonce),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "expiry",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CCloudGamingCreateNonceResponse, has_expiry),
    offsetof(CCloudGamingCreateNonceResponse, expiry),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned ccloud_gaming__create_nonce__response__field_indices_by_name[] = {
  1,   /* field[1] = expiry */
  0,   /* field[0] = nonce */
};
static const ProtobufCIntRange ccloud_gaming__create_nonce__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor ccloud_gaming__create_nonce__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CCloudGaming_CreateNonce_Response",
  "CCloudGamingCreateNonceResponse",
  "CCloudGamingCreateNonceResponse",
  "",
  sizeof(CCloudGamingCreateNonceResponse),
  2,
  ccloud_gaming__create_nonce__response__field_descriptors,
  ccloud_gaming__create_nonce__response__field_indices_by_name,
  1,  ccloud_gaming__create_nonce__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor ccloud_gaming__get_time_remaining__request__field_descriptors[2] =
{
  {
    "platform",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CCloudGamingGetTimeRemainingRequest, platform),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid_list",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CCloudGamingGetTimeRemainingRequest, n_appid_list),
    offsetof(CCloudGamingGetTimeRemainingRequest, appid_list),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned ccloud_gaming__get_time_remaining__request__field_indices_by_name[] = {
  1,   /* field[1] = appid_list */
  0,   /* field[0] = platform */
};
static const ProtobufCIntRange ccloud_gaming__get_time_remaining__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor ccloud_gaming__get_time_remaining__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CCloudGaming_GetTimeRemaining_Request",
  "CCloudGamingGetTimeRemainingRequest",
  "CCloudGamingGetTimeRemainingRequest",
  "",
  sizeof(CCloudGamingGetTimeRemainingRequest),
  2,
  ccloud_gaming__get_time_remaining__request__field_descriptors,
  ccloud_gaming__get_time_remaining__request__field_indices_by_name,
  1,  ccloud_gaming__get_time_remaining__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor ccloud_gaming__time_remaining__field_descriptors[2] =
{
  {
    "appid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CCloudGamingTimeRemaining, has_appid),
    offsetof(CCloudGamingTimeRemaining, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "minutes_remaining",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CCloudGamingTimeRemaining, has_minutes_remaining),
    offsetof(CCloudGamingTimeRemaining, minutes_remaining),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned ccloud_gaming__time_remaining__field_indices_by_name[] = {
  0,   /* field[0] = appid */
  1,   /* field[1] = minutes_remaining */
};
static const ProtobufCIntRange ccloud_gaming__time_remaining__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor ccloud_gaming__time_remaining__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CCloudGaming_TimeRemaining",
  "CCloudGamingTimeRemaining",
  "CCloudGamingTimeRemaining",
  "",
  sizeof(CCloudGamingTimeRemaining),
  2,
  ccloud_gaming__time_remaining__field_descriptors,
  ccloud_gaming__time_remaining__field_indices_by_name,
  1,  ccloud_gaming__time_remaining__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor ccloud_gaming__get_time_remaining__response__field_descriptors[1] =
{
  {
    "entries",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CCloudGamingGetTimeRemainingResponse, n_entries),
    offsetof(CCloudGamingGetTimeRemainingResponse, entries),
    &ccloud_gaming__time_remaining__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned ccloud_gaming__get_time_remaining__response__field_indices_by_name[] = {
  0,   /* field[0] = entries */
};
static const ProtobufCIntRange ccloud_gaming__get_time_remaining__response__number_ranges[1 + 1] =
{
  { 2, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor ccloud_gaming__get_time_remaining__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CCloudGaming_GetTimeRemaining_Response",
  "CCloudGamingGetTimeRemainingResponse",
  "CCloudGamingGetTimeRemainingResponse",
  "",
  sizeof(CCloudGamingGetTimeRemainingResponse),
  1,
  ccloud_gaming__get_time_remaining__response__field_descriptors,
  ccloud_gaming__get_time_remaining__response__field_indices_by_name,
  1,  ccloud_gaming__get_time_remaining__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCEnumValue eauth_token_platform_type__enum_values_by_number[4] =
{
  { "k_EAuthTokenPlatformType_Unknown", "EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_Unknown", 0 },
  { "k_EAuthTokenPlatformType_SteamClient", "EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_SteamClient", 1 },
  { "k_EAuthTokenPlatformType_WebBrowser", "EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_WebBrowser", 2 },
  { "k_EAuthTokenPlatformType_MobileApp", "EAUTH_TOKEN_PLATFORM_TYPE__k_EAuthTokenPlatformType_MobileApp", 3 },
};
static const ProtobufCIntRange eauth_token_platform_type__value_ranges[] = {
{0, 0},{0, 4}
};
static const ProtobufCEnumValueIndex eauth_token_platform_type__enum_values_by_name[4] =
{
  { "k_EAuthTokenPlatformType_MobileApp", 3 },
  { "k_EAuthTokenPlatformType_SteamClient", 1 },
  { "k_EAuthTokenPlatformType_Unknown", 0 },
  { "k_EAuthTokenPlatformType_WebBrowser", 2 },
};
const ProtobufCEnumDescriptor eauth_token_platform_type__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EAuthTokenPlatformType",
  "EAuthTokenPlatformType",
  "EAuthTokenPlatformType",
  "",
  4,
  eauth_token_platform_type__enum_values_by_number,
  4,
  eauth_token_platform_type__enum_values_by_name,
  1,
  eauth_token_platform_type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue eauth_session_guard_type__enum_values_by_number[8] =
{
  { "k_EAuthSessionGuardType_Unknown", "EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_Unknown", 0 },
  { "k_EAuthSessionGuardType_None", "EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_None", 1 },
  { "k_EAuthSessionGuardType_EmailCode", "EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_EmailCode", 2 },
  { "k_EAuthSessionGuardType_DeviceCode", "EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_DeviceCode", 3 },
  { "k_EAuthSessionGuardType_DeviceConfirmation", "EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_DeviceConfirmation", 4 },
  { "k_EAuthSessionGuardType_EmailConfirmation", "EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_EmailConfirmation", 5 },
  { "k_EAuthSessionGuardType_MachineToken", "EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_MachineToken", 6 },
  { "k_EAuthSessionGuardType_LegacyMachineAuth", "EAUTH_SESSION_GUARD_TYPE__k_EAuthSessionGuardType_LegacyMachineAuth", 7 },
};
static const ProtobufCIntRange eauth_session_guard_type__value_ranges[] = {
{0, 0},{0, 8}
};
static const ProtobufCEnumValueIndex eauth_session_guard_type__enum_values_by_name[8] =
{
  { "k_EAuthSessionGuardType_DeviceCode", 3 },
  { "k_EAuthSessionGuardType_DeviceConfirmation", 4 },
  { "k_EAuthSessionGuardType_EmailCode", 2 },
  { "k_EAuthSessionGuardType_EmailConfirmation", 5 },
  { "k_EAuthSessionGuardType_LegacyMachineAuth", 7 },
  { "k_EAuthSessionGuardType_MachineToken", 6 },
  { "k_EAuthSessionGuardType_None", 1 },
  { "k_EAuthSessionGuardType_Unknown", 0 },
};
const ProtobufCEnumDescriptor eauth_session_guard_type__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EAuthSessionGuardType",
  "EAuthSessionGuardType",
  "EAuthSessionGuardType",
  "",
  8,
  eauth_session_guard_type__enum_values_by_number,
  8,
  eauth_session_guard_type__enum_values_by_name,
  1,
  eauth_session_guard_type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue eauth_session_security_history__enum_values_by_number[3] =
{
  { "k_EAuthSessionSecurityHistory_Invalid", "EAUTH_SESSION_SECURITY_HISTORY__k_EAuthSessionSecurityHistory_Invalid", 0 },
  { "k_EAuthSessionSecurityHistory_UsedPreviously", "EAUTH_SESSION_SECURITY_HISTORY__k_EAuthSessionSecurityHistory_UsedPreviously", 1 },
  { "k_EAuthSessionSecurityHistory_NoPriorHistory", "EAUTH_SESSION_SECURITY_HISTORY__k_EAuthSessionSecurityHistory_NoPriorHistory", 2 },
};
static const ProtobufCIntRange eauth_session_security_history__value_ranges[] = {
{0, 0},{0, 3}
};
static const ProtobufCEnumValueIndex eauth_session_security_history__enum_values_by_name[3] =
{
  { "k_EAuthSessionSecurityHistory_Invalid", 0 },
  { "k_EAuthSessionSecurityHistory_NoPriorHistory", 2 },
  { "k_EAuthSessionSecurityHistory_UsedPreviously", 1 },
};
const ProtobufCEnumDescriptor eauth_session_security_history__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EAuthSessionSecurityHistory",
  "EAuthSessionSecurityHistory",
  "EAuthSessionSecurityHistory",
  "",
  3,
  eauth_session_security_history__enum_values_by_number,
  3,
  eauth_session_security_history__enum_values_by_name,
  1,
  eauth_session_security_history__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue etoken_renewal_type__enum_values_by_number[2] =
{
  { "k_ETokenRenewalType_None", "ETOKEN_RENEWAL_TYPE__k_ETokenRenewalType_None", 0 },
  { "k_ETokenRenewalType_Allow", "ETOKEN_RENEWAL_TYPE__k_ETokenRenewalType_Allow", 1 },
};
static const ProtobufCIntRange etoken_renewal_type__value_ranges[] = {
{0, 0},{0, 2}
};
static const ProtobufCEnumValueIndex etoken_renewal_type__enum_values_by_name[2] =
{
  { "k_ETokenRenewalType_Allow", 1 },
  { "k_ETokenRenewalType_None", 0 },
};
const ProtobufCEnumDescriptor etoken_renewal_type__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "ETokenRenewalType",
  "ETokenRenewalType",
  "ETokenRenewalType",
  "",
  2,
  etoken_renewal_type__enum_values_by_number,
  2,
  etoken_renewal_type__enum_values_by_name,
  1,
  etoken_renewal_type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue eauth_token_revoke_action__enum_values_by_number[8] =
{
  { "k_EAuthTokenRevokeLogout", "EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokeLogout", 0 },
  { "k_EAuthTokenRevokePermanent", "EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokePermanent", 1 },
  { "k_EAuthTokenRevokeReplaced", "EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokeReplaced", 2 },
  { "k_EAuthTokenRevokeSupport", "EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokeSupport", 3 },
  { "k_EAuthTokenRevokeConsume", "EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokeConsume", 4 },
  { "k_EAuthTokenRevokeNonRememberedLogout", "EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokeNonRememberedLogout", 5 },
  { "k_EAuthTokenRevokeNonRememberedPermanent", "EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokeNonRememberedPermanent", 6 },
  { "k_EAuthTokenRevokeAutomatic", "EAUTH_TOKEN_REVOKE_ACTION__k_EAuthTokenRevokeAutomatic", 7 },
};
static const ProtobufCIntRange eauth_token_revoke_action__value_ranges[] = {
{0, 0},{0, 8}
};
static const ProtobufCEnumValueIndex eauth_token_revoke_action__enum_values_by_name[8] =
{
  { "k_EAuthTokenRevokeAutomatic", 7 },
  { "k_EAuthTokenRevokeConsume", 4 },
  { "k_EAuthTokenRevokeLogout", 0 },
  { "k_EAuthTokenRevokeNonRememberedLogout", 5 },
  { "k_EAuthTokenRevokeNonRememberedPermanent", 6 },
  { "k_EAuthTokenRevokePermanent", 1 },
  { "k_EAuthTokenRevokeReplaced", 2 },
  { "k_EAuthTokenRevokeSupport", 3 },
};
const ProtobufCEnumDescriptor eauth_token_revoke_action__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EAuthTokenRevokeAction",
  "EAuthTokenRevokeAction",
  "EAuthTokenRevokeAction",
  "",
  8,
  eauth_token_revoke_action__enum_values_by_number,
  8,
  eauth_token_revoke_action__enum_values_by_name,
  1,
  eauth_token_revoke_action__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue eauth_token_state__enum_values_by_number[8] =
{
  { "k_EAuthTokenState_Invalid", "EAUTH_TOKEN_STATE__k_EAuthTokenState_Invalid", 0 },
  { "k_EAuthTokenState_New", "EAUTH_TOKEN_STATE__k_EAuthTokenState_New", 1 },
  { "k_EAuthTokenState_Confirmed", "EAUTH_TOKEN_STATE__k_EAuthTokenState_Confirmed", 2 },
  { "k_EAuthTokenState_Issued", "EAUTH_TOKEN_STATE__k_EAuthTokenState_Issued", 3 },
  { "k_EAuthTokenState_Denied", "EAUTH_TOKEN_STATE__k_EAuthTokenState_Denied", 4 },
  { "k_EAuthTokenState_LoggedOut", "EAUTH_TOKEN_STATE__k_EAuthTokenState_LoggedOut", 5 },
  { "k_EAuthTokenState_Consumed", "EAUTH_TOKEN_STATE__k_EAuthTokenState_Consumed", 6 },
  { "k_EAuthTokenState_Revoked", "EAUTH_TOKEN_STATE__k_EAuthTokenState_Revoked", 99 },
};
static const ProtobufCIntRange eauth_token_state__value_ranges[] = {
{0, 0},{99, 7},{0, 8}
};
static const ProtobufCEnumValueIndex eauth_token_state__enum_values_by_name[8] =
{
  { "k_EAuthTokenState_Confirmed", 2 },
  { "k_EAuthTokenState_Consumed", 6 },
  { "k_EAuthTokenState_Denied", 4 },
  { "k_EAuthTokenState_Invalid", 0 },
  { "k_EAuthTokenState_Issued", 3 },
  { "k_EAuthTokenState_LoggedOut", 5 },
  { "k_EAuthTokenState_New", 1 },
  { "k_EAuthTokenState_Revoked", 7 },
};
const ProtobufCEnumDescriptor eauth_token_state__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EAuthTokenState",
  "EAuthTokenState",
  "EAuthTokenState",
  "",
  8,
  eauth_token_state__enum_values_by_number,
  8,
  eauth_token_state__enum_values_by_name,
  2,
  eauth_token_state__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCMethodDescriptor authentication__method_descriptors[13] =
{
  { "GetPasswordRSAPublicKey", &cauthentication__get_password_rsapublic_key__request__descriptor, &cauthentication__get_password_rsapublic_key__response__descriptor },
  { "BeginAuthSessionViaQR", &cauthentication__begin_auth_session_via_qr__request__descriptor, &cauthentication__begin_auth_session_via_qr__response__descriptor },
  { "BeginAuthSessionViaCredentials", &cauthentication__begin_auth_session_via_credentials__request__descriptor, &cauthentication__begin_auth_session_via_credentials__response__descriptor },
  { "PollAuthSessionStatus", &cauthentication__poll_auth_session_status__request__descriptor, &cauthentication__poll_auth_session_status__response__descriptor },
  { "GetAuthSessionInfo", &cauthentication__get_auth_session_info__request__descriptor, &cauthentication__get_auth_session_info__response__descriptor },
  { "UpdateAuthSessionWithMobileConfirmation", &cauthentication__update_auth_session_with_mobile_confirmation__request__descriptor, &cauthentication__update_auth_session_with_mobile_confirmation__response__descriptor },
  { "UpdateAuthSessionWithSteamGuardCode", &cauthentication__update_auth_session_with_steam_guard_code__request__descriptor, &cauthentication__update_auth_session_with_steam_guard_code__response__descriptor },
  { "GenerateAccessTokenForApp", &cauthentication__access_token__generate_for_app__request__descriptor, &cauthentication__access_token__generate_for_app__response__descriptor },
  { "EnumerateTokens", &cauthentication__refresh_token__enumerate__request__descriptor, &cauthentication__refresh_token__enumerate__response__descriptor },
  { "GetAuthSessionsForAccount", &cauthentication__get_auth_sessions_for_account__request__descriptor, &cauthentication__get_auth_sessions_for_account__response__descriptor },
  { "MigrateMobileSession", &cauthentication__migrate_mobile_session__request__descriptor, &cauthentication__migrate_mobile_session__response__descriptor },
  { "RevokeToken", &cauthentication__token__revoke__request__descriptor, &cauthentication__token__revoke__response__descriptor },
  { "RevokeRefreshToken", &cauthentication__refresh_token__revoke__request__descriptor, &cauthentication__refresh_token__revoke__response__descriptor },
};
const unsigned authentication__method_indices_by_name[] = {
  2,        /* BeginAuthSessionViaCredentials */
  1,        /* BeginAuthSessionViaQR */
  8,        /* EnumerateTokens */
  7,        /* GenerateAccessTokenForApp */
  4,        /* GetAuthSessionInfo */
  9,        /* GetAuthSessionsForAccount */
  0,        /* GetPasswordRSAPublicKey */
  10,        /* MigrateMobileSession */
  3,        /* PollAuthSessionStatus */
  12,        /* RevokeRefreshToken */
  11,        /* RevokeToken */
  5,        /* UpdateAuthSessionWithMobileConfirmation */
  6         /* UpdateAuthSessionWithSteamGuardCode */
};
const ProtobufCServiceDescriptor authentication__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "Authentication",
  "Authentication",
  "Authentication",
  "",
  13,
  authentication__method_descriptors,
  authentication__method_indices_by_name
};
void authentication__get_password_rsapublic_key(ProtobufCService *service,
                                                const CAuthenticationGetPasswordRSAPublicKeyRequest *input,
                                                CAuthenticationGetPasswordRSAPublicKeyResponse_Closure closure,
                                                void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__begin_auth_session_via_qr(ProtobufCService *service,
                                               const CAuthenticationBeginAuthSessionViaQRRequest *input,
                                               CAuthenticationBeginAuthSessionViaQRResponse_Closure closure,
                                               void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 1, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__begin_auth_session_via_credentials(ProtobufCService *service,
                                                        const CAuthenticationBeginAuthSessionViaCredentialsRequest *input,
                                                        CAuthenticationBeginAuthSessionViaCredentialsResponse_Closure closure,
                                                        void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 2, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__poll_auth_session_status(ProtobufCService *service,
                                              const CAuthenticationPollAuthSessionStatusRequest *input,
                                              CAuthenticationPollAuthSessionStatusResponse_Closure closure,
                                              void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 3, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__get_auth_session_info(ProtobufCService *service,
                                           const CAuthenticationGetAuthSessionInfoRequest *input,
                                           CAuthenticationGetAuthSessionInfoResponse_Closure closure,
                                           void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 4, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__update_auth_session_with_mobile_confirmation(ProtobufCService *service,
                                                                  const CAuthenticationUpdateAuthSessionWithMobileConfirmationRequest *input,
                                                                  CAuthenticationUpdateAuthSessionWithMobileConfirmationResponse_Closure closure,
                                                                  void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 5, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__update_auth_session_with_steam_guard_code(ProtobufCService *service,
                                                               const CAuthenticationUpdateAuthSessionWithSteamGuardCodeRequest *input,
                                                               CAuthenticationUpdateAuthSessionWithSteamGuardCodeResponse_Closure closure,
                                                               void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 6, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__generate_access_token_for_app(ProtobufCService *service,
                                                   const CAuthenticationAccessTokenGenerateForAppRequest *input,
                                                   CAuthenticationAccessTokenGenerateForAppResponse_Closure closure,
                                                   void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 7, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__enumerate_tokens(ProtobufCService *service,
                                      const CAuthenticationRefreshTokenEnumerateRequest *input,
                                      CAuthenticationRefreshTokenEnumerateResponse_Closure closure,
                                      void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 8, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__get_auth_sessions_for_account(ProtobufCService *service,
                                                   const CAuthenticationGetAuthSessionsForAccountRequest *input,
                                                   CAuthenticationGetAuthSessionsForAccountResponse_Closure closure,
                                                   void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 9, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__migrate_mobile_session(ProtobufCService *service,
                                            const CAuthenticationMigrateMobileSessionRequest *input,
                                            CAuthenticationMigrateMobileSessionResponse_Closure closure,
                                            void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 10, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__revoke_token(ProtobufCService *service,
                                  const CAuthenticationTokenRevokeRequest *input,
                                  CAuthenticationTokenRevokeResponse_Closure closure,
                                  void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 11, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__revoke_refresh_token(ProtobufCService *service,
                                          const CAuthenticationRefreshTokenRevokeRequest *input,
                                          CAuthenticationRefreshTokenRevokeResponse_Closure closure,
                                          void *closure_data)
{
  assert(service->descriptor == &authentication__descriptor);
  service->invoke(service, 12, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication__init (Authentication_Service *service,
                           Authentication_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &authentication__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
static const ProtobufCMethodDescriptor authentication_support__method_descriptors[4] =
{
  { "QueryRefreshTokensByAccount", &cauthentication_support__query_refresh_tokens_by_account__request__descriptor, &cauthentication_support__query_refresh_tokens_by_account__response__descriptor },
  { "QueryRefreshTokenByID", &cauthentication_support__query_refresh_token_by_id__request__descriptor, &cauthentication_support__query_refresh_token_by_id__response__descriptor },
  { "RevokeToken", &cauthentication_support__revoke_token__request__descriptor, &cauthentication_support__revoke_token__response__descriptor },
  { "GetTokenHistory", &cauthentication_support__get_token_history__request__descriptor, &cauthentication_support__get_token_history__response__descriptor },
};
const unsigned authentication_support__method_indices_by_name[] = {
  3,        /* GetTokenHistory */
  1,        /* QueryRefreshTokenByID */
  0,        /* QueryRefreshTokensByAccount */
  2         /* RevokeToken */
};
const ProtobufCServiceDescriptor authentication_support__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "AuthenticationSupport",
  "AuthenticationSupport",
  "AuthenticationSupport",
  "",
  4,
  authentication_support__method_descriptors,
  authentication_support__method_indices_by_name
};
void authentication_support__query_refresh_tokens_by_account(ProtobufCService *service,
                                                             const CAuthenticationSupportQueryRefreshTokensByAccountRequest *input,
                                                             CAuthenticationSupportQueryRefreshTokensByAccountResponse_Closure closure,
                                                             void *closure_data)
{
  assert(service->descriptor == &authentication_support__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication_support__query_refresh_token_by_id(ProtobufCService *service,
                                                       const CAuthenticationSupportQueryRefreshTokenByIDRequest *input,
                                                       CAuthenticationSupportQueryRefreshTokenByIDResponse_Closure closure,
                                                       void *closure_data)
{
  assert(service->descriptor == &authentication_support__descriptor);
  service->invoke(service, 1, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication_support__revoke_token(ProtobufCService *service,
                                          const CAuthenticationSupportRevokeTokenRequest *input,
                                          CAuthenticationSupportRevokeTokenResponse_Closure closure,
                                          void *closure_data)
{
  assert(service->descriptor == &authentication_support__descriptor);
  service->invoke(service, 2, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication_support__get_token_history(ProtobufCService *service,
                                               const CAuthenticationSupportGetTokenHistoryRequest *input,
                                               CAuthenticationSupportGetTokenHistoryResponse_Closure closure,
                                               void *closure_data)
{
  assert(service->descriptor == &authentication_support__descriptor);
  service->invoke(service, 3, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void authentication_support__init (AuthenticationSupport_Service *service,
                                   AuthenticationSupport_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &authentication_support__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
static const ProtobufCMethodDescriptor cloud_gaming__method_descriptors[2] =
{
  { "CreateNonce", &ccloud_gaming__create_nonce__request__descriptor, &ccloud_gaming__create_nonce__response__descriptor },
  { "GetTimeRemaining", &ccloud_gaming__get_time_remaining__request__descriptor, &ccloud_gaming__get_time_remaining__response__descriptor },
};
const unsigned cloud_gaming__method_indices_by_name[] = {
  0,        /* CreateNonce */
  1         /* GetTimeRemaining */
};
const ProtobufCServiceDescriptor cloud_gaming__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "CloudGaming",
  "CloudGaming",
  "CloudGaming",
  "",
  2,
  cloud_gaming__method_descriptors,
  cloud_gaming__method_indices_by_name
};
void cloud_gaming__create_nonce(ProtobufCService *service,
                                const CCloudGamingCreateNonceRequest *input,
                                CCloudGamingCreateNonceResponse_Closure closure,
                                void *closure_data)
{
  assert(service->descriptor == &cloud_gaming__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void cloud_gaming__get_time_remaining(ProtobufCService *service,
                                      const CCloudGamingGetTimeRemainingRequest *input,
                                      CCloudGamingGetTimeRemainingResponse_Closure closure,
                                      void *closure_data)
{
  assert(service->descriptor == &cloud_gaming__descriptor);
  service->invoke(service, 1, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void cloud_gaming__init (CloudGaming_Service *service,
                         CloudGaming_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &cloud_gaming__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
