/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_clientserver.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "steammessages_clientserver.pb-c.h"
size_t cmsg_client_register_auth_ticket_with_cm__get_packed_size
                     (const CMsgClientRegisterAuthTicketWithCM *message)
{
  assert(message->descriptor == &cmsg_client_register_auth_ticket_with_cm__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_register_auth_ticket_with_cm__pack
                     (const CMsgClientRegisterAuthTicketWithCM *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_register_auth_ticket_with_cm__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_register_auth_ticket_with_cm__pack_to_buffer
                     (const CMsgClientRegisterAuthTicketWithCM *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_register_auth_ticket_with_cm__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRegisterAuthTicketWithCM *
       cmsg_client_register_auth_ticket_with_cm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRegisterAuthTicketWithCM *)
     protobuf_c_message_unpack (&cmsg_client_register_auth_ticket_with_cm__descriptor,
                                allocator, len, data);
}
void   cmsg_client_register_auth_ticket_with_cm__free_unpacked
                     (CMsgClientRegisterAuthTicketWithCM *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_register_auth_ticket_with_cm__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_ticket_auth_complete__get_packed_size
                     (const CMsgClientTicketAuthComplete *message)
{
  assert(message->descriptor == &cmsg_client_ticket_auth_complete__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_ticket_auth_complete__pack
                     (const CMsgClientTicketAuthComplete *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_ticket_auth_complete__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_ticket_auth_complete__pack_to_buffer
                     (const CMsgClientTicketAuthComplete *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_ticket_auth_complete__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientTicketAuthComplete *
       cmsg_client_ticket_auth_complete__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientTicketAuthComplete *)
     protobuf_c_message_unpack (&cmsg_client_ticket_auth_complete__descriptor,
                                allocator, len, data);
}
void   cmsg_client_ticket_auth_complete__free_unpacked
                     (CMsgClientTicketAuthComplete *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_ticket_auth_complete__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_cmlist__get_packed_size
                     (const CMsgClientCMList *message)
{
  assert(message->descriptor == &cmsg_client_cmlist__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_cmlist__pack
                     (const CMsgClientCMList *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_cmlist__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_cmlist__pack_to_buffer
                     (const CMsgClientCMList *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_cmlist__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientCMList *
       cmsg_client_cmlist__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientCMList *)
     protobuf_c_message_unpack (&cmsg_client_cmlist__descriptor,
                                allocator, len, data);
}
void   cmsg_client_cmlist__free_unpacked
                     (CMsgClientCMList *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_cmlist__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_p2_pconnection_info__get_packed_size
                     (const CMsgClientP2PConnectionInfo *message)
{
  assert(message->descriptor == &cmsg_client_p2_pconnection_info__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_p2_pconnection_info__pack
                     (const CMsgClientP2PConnectionInfo *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_p2_pconnection_info__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_p2_pconnection_info__pack_to_buffer
                     (const CMsgClientP2PConnectionInfo *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_p2_pconnection_info__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientP2PConnectionInfo *
       cmsg_client_p2_pconnection_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientP2PConnectionInfo *)
     protobuf_c_message_unpack (&cmsg_client_p2_pconnection_info__descriptor,
                                allocator, len, data);
}
void   cmsg_client_p2_pconnection_info__free_unpacked
                     (CMsgClientP2PConnectionInfo *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_p2_pconnection_info__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_p2_pconnection_fail_info__get_packed_size
                     (const CMsgClientP2PConnectionFailInfo *message)
{
  assert(message->descriptor == &cmsg_client_p2_pconnection_fail_info__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_p2_pconnection_fail_info__pack
                     (const CMsgClientP2PConnectionFailInfo *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_p2_pconnection_fail_info__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_p2_pconnection_fail_info__pack_to_buffer
                     (const CMsgClientP2PConnectionFailInfo *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_p2_pconnection_fail_info__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientP2PConnectionFailInfo *
       cmsg_client_p2_pconnection_fail_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientP2PConnectionFailInfo *)
     protobuf_c_message_unpack (&cmsg_client_p2_pconnection_fail_info__descriptor,
                                allocator, len, data);
}
void   cmsg_client_p2_pconnection_fail_info__free_unpacked
                     (CMsgClientP2PConnectionFailInfo *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_p2_pconnection_fail_info__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_networking_cert_request__get_packed_size
                     (const CMsgClientNetworkingCertRequest *message)
{
  assert(message->descriptor == &cmsg_client_networking_cert_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_networking_cert_request__pack
                     (const CMsgClientNetworkingCertRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_networking_cert_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_networking_cert_request__pack_to_buffer
                     (const CMsgClientNetworkingCertRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_networking_cert_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientNetworkingCertRequest *
       cmsg_client_networking_cert_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientNetworkingCertRequest *)
     protobuf_c_message_unpack (&cmsg_client_networking_cert_request__descriptor,
                                allocator, len, data);
}
void   cmsg_client_networking_cert_request__free_unpacked
                     (CMsgClientNetworkingCertRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_networking_cert_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_networking_cert_reply__get_packed_size
                     (const CMsgClientNetworkingCertReply *message)
{
  assert(message->descriptor == &cmsg_client_networking_cert_reply__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_networking_cert_reply__pack
                     (const CMsgClientNetworkingCertReply *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_networking_cert_reply__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_networking_cert_reply__pack_to_buffer
                     (const CMsgClientNetworkingCertReply *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_networking_cert_reply__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientNetworkingCertReply *
       cmsg_client_networking_cert_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientNetworkingCertReply *)
     protobuf_c_message_unpack (&cmsg_client_networking_cert_reply__descriptor,
                                allocator, len, data);
}
void   cmsg_client_networking_cert_reply__free_unpacked
                     (CMsgClientNetworkingCertReply *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_networking_cert_reply__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_networking_mobile_cert_request__get_packed_size
                     (const CMsgClientNetworkingMobileCertRequest *message)
{
  assert(message->descriptor == &cmsg_client_networking_mobile_cert_request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_networking_mobile_cert_request__pack
                     (const CMsgClientNetworkingMobileCertRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_networking_mobile_cert_request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_networking_mobile_cert_request__pack_to_buffer
                     (const CMsgClientNetworkingMobileCertRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_networking_mobile_cert_request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientNetworkingMobileCertRequest *
       cmsg_client_networking_mobile_cert_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientNetworkingMobileCertRequest *)
     protobuf_c_message_unpack (&cmsg_client_networking_mobile_cert_request__descriptor,
                                allocator, len, data);
}
void   cmsg_client_networking_mobile_cert_request__free_unpacked
                     (CMsgClientNetworkingMobileCertRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_networking_mobile_cert_request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_networking_mobile_cert_reply__get_packed_size
                     (const CMsgClientNetworkingMobileCertReply *message)
{
  assert(message->descriptor == &cmsg_client_networking_mobile_cert_reply__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_networking_mobile_cert_reply__pack
                     (const CMsgClientNetworkingMobileCertReply *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_networking_mobile_cert_reply__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_networking_mobile_cert_reply__pack_to_buffer
                     (const CMsgClientNetworkingMobileCertReply *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_networking_mobile_cert_reply__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientNetworkingMobileCertReply *
       cmsg_client_networking_mobile_cert_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientNetworkingMobileCertReply *)
     protobuf_c_message_unpack (&cmsg_client_networking_mobile_cert_reply__descriptor,
                                allocator, len, data);
}
void   cmsg_client_networking_mobile_cert_reply__free_unpacked
                     (CMsgClientNetworkingMobileCertReply *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_networking_mobile_cert_reply__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_get_app_ownership_ticket__get_packed_size
                     (const CMsgClientGetAppOwnershipTicket *message)
{
  assert(message->descriptor == &cmsg_client_get_app_ownership_ticket__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_get_app_ownership_ticket__pack
                     (const CMsgClientGetAppOwnershipTicket *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_get_app_ownership_ticket__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_get_app_ownership_ticket__pack_to_buffer
                     (const CMsgClientGetAppOwnershipTicket *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_get_app_ownership_ticket__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientGetAppOwnershipTicket *
       cmsg_client_get_app_ownership_ticket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientGetAppOwnershipTicket *)
     protobuf_c_message_unpack (&cmsg_client_get_app_ownership_ticket__descriptor,
                                allocator, len, data);
}
void   cmsg_client_get_app_ownership_ticket__free_unpacked
                     (CMsgClientGetAppOwnershipTicket *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_get_app_ownership_ticket__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_get_app_ownership_ticket_response__get_packed_size
                     (const CMsgClientGetAppOwnershipTicketResponse *message)
{
  assert(message->descriptor == &cmsg_client_get_app_ownership_ticket_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_get_app_ownership_ticket_response__pack
                     (const CMsgClientGetAppOwnershipTicketResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_get_app_ownership_ticket_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_get_app_ownership_ticket_response__pack_to_buffer
                     (const CMsgClientGetAppOwnershipTicketResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_get_app_ownership_ticket_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientGetAppOwnershipTicketResponse *
       cmsg_client_get_app_ownership_ticket_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientGetAppOwnershipTicketResponse *)
     protobuf_c_message_unpack (&cmsg_client_get_app_ownership_ticket_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_get_app_ownership_ticket_response__free_unpacked
                     (CMsgClientGetAppOwnershipTicketResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_get_app_ownership_ticket_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_session_token__get_packed_size
                     (const CMsgClientSessionToken *message)
{
  assert(message->descriptor == &cmsg_client_session_token__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_session_token__pack
                     (const CMsgClientSessionToken *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_session_token__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_session_token__pack_to_buffer
                     (const CMsgClientSessionToken *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_session_token__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientSessionToken *
       cmsg_client_session_token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientSessionToken *)
     protobuf_c_message_unpack (&cmsg_client_session_token__descriptor,
                                allocator, len, data);
}
void   cmsg_client_session_token__free_unpacked
                     (CMsgClientSessionToken *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_session_token__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_game_connect_tokens__get_packed_size
                     (const CMsgClientGameConnectTokens *message)
{
  assert(message->descriptor == &cmsg_client_game_connect_tokens__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_game_connect_tokens__pack
                     (const CMsgClientGameConnectTokens *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_game_connect_tokens__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_game_connect_tokens__pack_to_buffer
                     (const CMsgClientGameConnectTokens *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_game_connect_tokens__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientGameConnectTokens *
       cmsg_client_game_connect_tokens__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientGameConnectTokens *)
     protobuf_c_message_unpack (&cmsg_client_game_connect_tokens__descriptor,
                                allocator, len, data);
}
void   cmsg_client_game_connect_tokens__free_unpacked
                     (CMsgClientGameConnectTokens *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_game_connect_tokens__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_games_played__get_packed_size
                     (const CMsgClientGamesPlayed *message)
{
  assert(message->descriptor == &cmsg_client_games_played__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_games_played__pack
                     (const CMsgClientGamesPlayed *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_games_played__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_games_played__pack_to_buffer
                     (const CMsgClientGamesPlayed *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_games_played__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientGamesPlayed *
       cmsg_client_games_played__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientGamesPlayed *)
     protobuf_c_message_unpack (&cmsg_client_games_played__descriptor,
                                allocator, len, data);
}
void   cmsg_client_games_played__free_unpacked
                     (CMsgClientGamesPlayed *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_games_played__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_gsapprove__get_packed_size
                     (const CMsgGSApprove *message)
{
  assert(message->descriptor == &cmsg_gsapprove__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_gsapprove__pack
                     (const CMsgGSApprove *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_gsapprove__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_gsapprove__pack_to_buffer
                     (const CMsgGSApprove *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_gsapprove__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgGSApprove *
       cmsg_gsapprove__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgGSApprove *)
     protobuf_c_message_unpack (&cmsg_gsapprove__descriptor,
                                allocator, len, data);
}
void   cmsg_gsapprove__free_unpacked
                     (CMsgGSApprove *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_gsapprove__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_gsdeny__get_packed_size
                     (const CMsgGSDeny *message)
{
  assert(message->descriptor == &cmsg_gsdeny__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_gsdeny__pack
                     (const CMsgGSDeny *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_gsdeny__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_gsdeny__pack_to_buffer
                     (const CMsgGSDeny *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_gsdeny__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgGSDeny *
       cmsg_gsdeny__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgGSDeny *)
     protobuf_c_message_unpack (&cmsg_gsdeny__descriptor,
                                allocator, len, data);
}
void   cmsg_gsdeny__free_unpacked
                     (CMsgGSDeny *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_gsdeny__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_gskick__get_packed_size
                     (const CMsgGSKick *message)
{
  assert(message->descriptor == &cmsg_gskick__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_gskick__pack
                     (const CMsgGSKick *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_gskick__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_gskick__pack_to_buffer
                     (const CMsgGSKick *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_gskick__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgGSKick *
       cmsg_gskick__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgGSKick *)
     protobuf_c_message_unpack (&cmsg_gskick__descriptor,
                                allocator, len, data);
}
void   cmsg_gskick__free_unpacked
                     (CMsgGSKick *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_gskick__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_auth_list__get_packed_size
                     (const CMsgClientAuthList *message)
{
  assert(message->descriptor == &cmsg_client_auth_list__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_auth_list__pack
                     (const CMsgClientAuthList *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_auth_list__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_auth_list__pack_to_buffer
                     (const CMsgClientAuthList *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_auth_list__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAuthList *
       cmsg_client_auth_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAuthList *)
     protobuf_c_message_unpack (&cmsg_client_auth_list__descriptor,
                                allocator, len, data);
}
void   cmsg_client_auth_list__free_unpacked
                     (CMsgClientAuthList *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_auth_list__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_auth_list_ack__get_packed_size
                     (const CMsgClientAuthListAck *message)
{
  assert(message->descriptor == &cmsg_client_auth_list_ack__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_auth_list_ack__pack
                     (const CMsgClientAuthListAck *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_auth_list_ack__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_auth_list_ack__pack_to_buffer
                     (const CMsgClientAuthListAck *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_auth_list_ack__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAuthListAck *
       cmsg_client_auth_list_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAuthListAck *)
     protobuf_c_message_unpack (&cmsg_client_auth_list_ack__descriptor,
                                allocator, len, data);
}
void   cmsg_client_auth_list_ack__free_unpacked
                     (CMsgClientAuthListAck *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_auth_list_ack__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_license_list__get_packed_size
                     (const CMsgClientLicenseList *message)
{
  assert(message->descriptor == &cmsg_client_license_list__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_license_list__pack
                     (const CMsgClientLicenseList *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_license_list__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_license_list__pack_to_buffer
                     (const CMsgClientLicenseList *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_license_list__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientLicenseList *
       cmsg_client_license_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientLicenseList *)
     protobuf_c_message_unpack (&cmsg_client_license_list__descriptor,
                                allocator, len, data);
}
void   cmsg_client_license_list__free_unpacked
                     (CMsgClientLicenseList *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_license_list__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_is_limited_account__get_packed_size
                     (const CMsgClientIsLimitedAccount *message)
{
  assert(message->descriptor == &cmsg_client_is_limited_account__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_is_limited_account__pack
                     (const CMsgClientIsLimitedAccount *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_is_limited_account__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_is_limited_account__pack_to_buffer
                     (const CMsgClientIsLimitedAccount *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_is_limited_account__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientIsLimitedAccount *
       cmsg_client_is_limited_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientIsLimitedAccount *)
     protobuf_c_message_unpack (&cmsg_client_is_limited_account__descriptor,
                                allocator, len, data);
}
void   cmsg_client_is_limited_account__free_unpacked
                     (CMsgClientIsLimitedAccount *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_is_limited_account__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_requested_client_stats__get_packed_size
                     (const CMsgClientRequestedClientStats *message)
{
  assert(message->descriptor == &cmsg_client_requested_client_stats__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_requested_client_stats__pack
                     (const CMsgClientRequestedClientStats *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_requested_client_stats__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_requested_client_stats__pack_to_buffer
                     (const CMsgClientRequestedClientStats *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_requested_client_stats__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRequestedClientStats *
       cmsg_client_requested_client_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRequestedClientStats *)
     protobuf_c_message_unpack (&cmsg_client_requested_client_stats__descriptor,
                                allocator, len, data);
}
void   cmsg_client_requested_client_stats__free_unpacked
                     (CMsgClientRequestedClientStats *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_requested_client_stats__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_stat2__get_packed_size
                     (const CMsgClientStat2 *message)
{
  assert(message->descriptor == &cmsg_client_stat2__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_stat2__pack
                     (const CMsgClientStat2 *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_stat2__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_stat2__pack_to_buffer
                     (const CMsgClientStat2 *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_stat2__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientStat2 *
       cmsg_client_stat2__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientStat2 *)
     protobuf_c_message_unpack (&cmsg_client_stat2__descriptor,
                                allocator, len, data);
}
void   cmsg_client_stat2__free_unpacked
                     (CMsgClientStat2 *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_stat2__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_invite_to_game__get_packed_size
                     (const CMsgClientInviteToGame *message)
{
  assert(message->descriptor == &cmsg_client_invite_to_game__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_invite_to_game__pack
                     (const CMsgClientInviteToGame *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_invite_to_game__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_invite_to_game__pack_to_buffer
                     (const CMsgClientInviteToGame *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_invite_to_game__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientInviteToGame *
       cmsg_client_invite_to_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientInviteToGame *)
     protobuf_c_message_unpack (&cmsg_client_invite_to_game__descriptor,
                                allocator, len, data);
}
void   cmsg_client_invite_to_game__free_unpacked
                     (CMsgClientInviteToGame *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_invite_to_game__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_chat_invite__get_packed_size
                     (const CMsgClientChatInvite *message)
{
  assert(message->descriptor == &cmsg_client_chat_invite__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_chat_invite__pack
                     (const CMsgClientChatInvite *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_chat_invite__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_chat_invite__pack_to_buffer
                     (const CMsgClientChatInvite *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_chat_invite__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientChatInvite *
       cmsg_client_chat_invite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientChatInvite *)
     protobuf_c_message_unpack (&cmsg_client_chat_invite__descriptor,
                                allocator, len, data);
}
void   cmsg_client_chat_invite__free_unpacked
                     (CMsgClientChatInvite *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_chat_invite__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_connection_stats__get_packed_size
                     (const CMsgClientConnectionStats *message)
{
  assert(message->descriptor == &cmsg_client_connection_stats__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_connection_stats__pack
                     (const CMsgClientConnectionStats *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_connection_stats__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_connection_stats__pack_to_buffer
                     (const CMsgClientConnectionStats *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_connection_stats__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientConnectionStats *
       cmsg_client_connection_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientConnectionStats *)
     protobuf_c_message_unpack (&cmsg_client_connection_stats__descriptor,
                                allocator, len, data);
}
void   cmsg_client_connection_stats__free_unpacked
                     (CMsgClientConnectionStats *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_connection_stats__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_servers_available__get_packed_size
                     (const CMsgClientServersAvailable *message)
{
  assert(message->descriptor == &cmsg_client_servers_available__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_servers_available__pack
                     (const CMsgClientServersAvailable *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_servers_available__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_servers_available__pack_to_buffer
                     (const CMsgClientServersAvailable *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_servers_available__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientServersAvailable *
       cmsg_client_servers_available__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientServersAvailable *)
     protobuf_c_message_unpack (&cmsg_client_servers_available__descriptor,
                                allocator, len, data);
}
void   cmsg_client_servers_available__free_unpacked
                     (CMsgClientServersAvailable *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_servers_available__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_report_overlay_detour_failure__get_packed_size
                     (const CMsgClientReportOverlayDetourFailure *message)
{
  assert(message->descriptor == &cmsg_client_report_overlay_detour_failure__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_report_overlay_detour_failure__pack
                     (const CMsgClientReportOverlayDetourFailure *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_report_overlay_detour_failure__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_report_overlay_detour_failure__pack_to_buffer
                     (const CMsgClientReportOverlayDetourFailure *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_report_overlay_detour_failure__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientReportOverlayDetourFailure *
       cmsg_client_report_overlay_detour_failure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientReportOverlayDetourFailure *)
     protobuf_c_message_unpack (&cmsg_client_report_overlay_detour_failure__descriptor,
                                allocator, len, data);
}
void   cmsg_client_report_overlay_detour_failure__free_unpacked
                     (CMsgClientReportOverlayDetourFailure *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_report_overlay_detour_failure__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_request_encrypted_app_ticket__get_packed_size
                     (const CMsgClientRequestEncryptedAppTicket *message)
{
  assert(message->descriptor == &cmsg_client_request_encrypted_app_ticket__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_request_encrypted_app_ticket__pack
                     (const CMsgClientRequestEncryptedAppTicket *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_request_encrypted_app_ticket__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_request_encrypted_app_ticket__pack_to_buffer
                     (const CMsgClientRequestEncryptedAppTicket *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_request_encrypted_app_ticket__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRequestEncryptedAppTicket *
       cmsg_client_request_encrypted_app_ticket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRequestEncryptedAppTicket *)
     protobuf_c_message_unpack (&cmsg_client_request_encrypted_app_ticket__descriptor,
                                allocator, len, data);
}
void   cmsg_client_request_encrypted_app_ticket__free_unpacked
                     (CMsgClientRequestEncryptedAppTicket *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_request_encrypted_app_ticket__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_request_encrypted_app_ticket_response__get_packed_size
                     (const CMsgClientRequestEncryptedAppTicketResponse *message)
{
  assert(message->descriptor == &cmsg_client_request_encrypted_app_ticket_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_request_encrypted_app_ticket_response__pack
                     (const CMsgClientRequestEncryptedAppTicketResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_request_encrypted_app_ticket_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_request_encrypted_app_ticket_response__pack_to_buffer
                     (const CMsgClientRequestEncryptedAppTicketResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_request_encrypted_app_ticket_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRequestEncryptedAppTicketResponse *
       cmsg_client_request_encrypted_app_ticket_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRequestEncryptedAppTicketResponse *)
     protobuf_c_message_unpack (&cmsg_client_request_encrypted_app_ticket_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_request_encrypted_app_ticket_response__free_unpacked
                     (CMsgClientRequestEncryptedAppTicketResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_request_encrypted_app_ticket_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_wallet_info_update__get_packed_size
                     (const CMsgClientWalletInfoUpdate *message)
{
  assert(message->descriptor == &cmsg_client_wallet_info_update__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_wallet_info_update__pack
                     (const CMsgClientWalletInfoUpdate *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_wallet_info_update__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_wallet_info_update__pack_to_buffer
                     (const CMsgClientWalletInfoUpdate *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_wallet_info_update__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientWalletInfoUpdate *
       cmsg_client_wallet_info_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientWalletInfoUpdate *)
     protobuf_c_message_unpack (&cmsg_client_wallet_info_update__descriptor,
                                allocator, len, data);
}
void   cmsg_client_wallet_info_update__free_unpacked
                     (CMsgClientWalletInfoUpdate *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_wallet_info_update__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_amget_clan_officers__get_packed_size
                     (const CMsgClientAMGetClanOfficers *message)
{
  assert(message->descriptor == &cmsg_client_amget_clan_officers__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_amget_clan_officers__pack
                     (const CMsgClientAMGetClanOfficers *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_amget_clan_officers__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_amget_clan_officers__pack_to_buffer
                     (const CMsgClientAMGetClanOfficers *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_amget_clan_officers__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAMGetClanOfficers *
       cmsg_client_amget_clan_officers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAMGetClanOfficers *)
     protobuf_c_message_unpack (&cmsg_client_amget_clan_officers__descriptor,
                                allocator, len, data);
}
void   cmsg_client_amget_clan_officers__free_unpacked
                     (CMsgClientAMGetClanOfficers *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_amget_clan_officers__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_amget_clan_officers_response__get_packed_size
                     (const CMsgClientAMGetClanOfficersResponse *message)
{
  assert(message->descriptor == &cmsg_client_amget_clan_officers_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_amget_clan_officers_response__pack
                     (const CMsgClientAMGetClanOfficersResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_amget_clan_officers_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_amget_clan_officers_response__pack_to_buffer
                     (const CMsgClientAMGetClanOfficersResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_amget_clan_officers_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAMGetClanOfficersResponse *
       cmsg_client_amget_clan_officers_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAMGetClanOfficersResponse *)
     protobuf_c_message_unpack (&cmsg_client_amget_clan_officers_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_amget_clan_officers_response__free_unpacked
                     (CMsgClientAMGetClanOfficersResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_amget_clan_officers_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_amget_persona_name_history__get_packed_size
                     (const CMsgClientAMGetPersonaNameHistory *message)
{
  assert(message->descriptor == &cmsg_client_amget_persona_name_history__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_amget_persona_name_history__pack
                     (const CMsgClientAMGetPersonaNameHistory *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_amget_persona_name_history__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_amget_persona_name_history__pack_to_buffer
                     (const CMsgClientAMGetPersonaNameHistory *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_amget_persona_name_history__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAMGetPersonaNameHistory *
       cmsg_client_amget_persona_name_history__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAMGetPersonaNameHistory *)
     protobuf_c_message_unpack (&cmsg_client_amget_persona_name_history__descriptor,
                                allocator, len, data);
}
void   cmsg_client_amget_persona_name_history__free_unpacked
                     (CMsgClientAMGetPersonaNameHistory *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_amget_persona_name_history__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_amget_persona_name_history_response__get_packed_size
                     (const CMsgClientAMGetPersonaNameHistoryResponse *message)
{
  assert(message->descriptor == &cmsg_client_amget_persona_name_history_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_amget_persona_name_history_response__pack
                     (const CMsgClientAMGetPersonaNameHistoryResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_amget_persona_name_history_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_amget_persona_name_history_response__pack_to_buffer
                     (const CMsgClientAMGetPersonaNameHistoryResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_amget_persona_name_history_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAMGetPersonaNameHistoryResponse *
       cmsg_client_amget_persona_name_history_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAMGetPersonaNameHistoryResponse *)
     protobuf_c_message_unpack (&cmsg_client_amget_persona_name_history_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_amget_persona_name_history_response__free_unpacked
                     (CMsgClientAMGetPersonaNameHistoryResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_amget_persona_name_history_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_deregister_with_server__get_packed_size
                     (const CMsgClientDeregisterWithServer *message)
{
  assert(message->descriptor == &cmsg_client_deregister_with_server__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_deregister_with_server__pack
                     (const CMsgClientDeregisterWithServer *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_deregister_with_server__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_deregister_with_server__pack_to_buffer
                     (const CMsgClientDeregisterWithServer *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_deregister_with_server__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientDeregisterWithServer *
       cmsg_client_deregister_with_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientDeregisterWithServer *)
     protobuf_c_message_unpack (&cmsg_client_deregister_with_server__descriptor,
                                allocator, len, data);
}
void   cmsg_client_deregister_with_server__free_unpacked
                     (CMsgClientDeregisterWithServer *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_deregister_with_server__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_clan_state__get_packed_size
                     (const CMsgClientClanState *message)
{
  assert(message->descriptor == &cmsg_client_clan_state__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_clan_state__pack
                     (const CMsgClientClanState *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_clan_state__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_clan_state__pack_to_buffer
                     (const CMsgClientClanState *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_clan_state__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientClanState *
       cmsg_client_clan_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientClanState *)
     protobuf_c_message_unpack (&cmsg_client_clan_state__descriptor,
                                allocator, len, data);
}
void   cmsg_client_clan_state__free_unpacked
                     (CMsgClientClanState *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_clan_state__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

static const ProtobufCFieldDescriptor cmsg_client_register_auth_ticket_with_cm__field_descriptors[3] =
{
  {
    "protocol_version",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientRegisterAuthTicketWithCM, has_protocol_version),
    offsetof(CMsgClientRegisterAuthTicketWithCM, protocol_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ticket",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientRegisterAuthTicketWithCM, has_ticket),
    offsetof(CMsgClientRegisterAuthTicketWithCM, ticket),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_instance_id",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientRegisterAuthTicketWithCM, has_client_instance_id),
    offsetof(CMsgClientRegisterAuthTicketWithCM, client_instance_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_register_auth_ticket_with_cm__field_indices_by_name[] = {
  2,   /* field[2] = client_instance_id */
  0,   /* field[0] = protocol_version */
  1,   /* field[1] = ticket */
};
static const ProtobufCIntRange cmsg_client_register_auth_ticket_with_cm__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_register_auth_ticket_with_cm__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRegisterAuthTicketWithCM",
  "CMsgClientRegisterAuthTicketWithCM",
  "CMsgClientRegisterAuthTicketWithCM",
  "",
  sizeof(CMsgClientRegisterAuthTicketWithCM),
  3,
  cmsg_client_register_auth_ticket_with_cm__field_descriptors,
  cmsg_client_register_auth_ticket_with_cm__field_indices_by_name,
  2,  cmsg_client_register_auth_ticket_with_cm__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_ticket_auth_complete__field_descriptors[8] =
{
  {
    "steam_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientTicketAuthComplete, has_steam_id),
    offsetof(CMsgClientTicketAuthComplete, steam_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientTicketAuthComplete, has_game_id),
    offsetof(CMsgClientTicketAuthComplete, game_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "estate",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientTicketAuthComplete, has_estate),
    offsetof(CMsgClientTicketAuthComplete, estate),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "eauth_session_response",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientTicketAuthComplete, has_eauth_session_response),
    offsetof(CMsgClientTicketAuthComplete, eauth_session_response),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "DEPRECATED_ticket",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientTicketAuthComplete, has_deprecated_ticket),
    offsetof(CMsgClientTicketAuthComplete, deprecated_ticket),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ticket_crc",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientTicketAuthComplete, has_ticket_crc),
    offsetof(CMsgClientTicketAuthComplete, ticket_crc),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ticket_sequence",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientTicketAuthComplete, has_ticket_sequence),
    offsetof(CMsgClientTicketAuthComplete, ticket_sequence),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "owner_steam_id",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientTicketAuthComplete, has_owner_steam_id),
    offsetof(CMsgClientTicketAuthComplete, owner_steam_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_ticket_auth_complete__field_indices_by_name[] = {
  4,   /* field[4] = DEPRECATED_ticket */
  3,   /* field[3] = eauth_session_response */
  2,   /* field[2] = estate */
  1,   /* field[1] = game_id */
  7,   /* field[7] = owner_steam_id */
  0,   /* field[0] = steam_id */
  5,   /* field[5] = ticket_crc */
  6,   /* field[6] = ticket_sequence */
};
static const ProtobufCIntRange cmsg_client_ticket_auth_complete__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cmsg_client_ticket_auth_complete__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientTicketAuthComplete",
  "CMsgClientTicketAuthComplete",
  "CMsgClientTicketAuthComplete",
  "",
  sizeof(CMsgClientTicketAuthComplete),
  8,
  cmsg_client_ticket_auth_complete__field_descriptors,
  cmsg_client_ticket_auth_complete__field_indices_by_name,
  1,  cmsg_client_ticket_auth_complete__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_cmlist__field_descriptors[4] =
{
  {
    "cm_addresses",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientCMList, n_cm_addresses),
    offsetof(CMsgClientCMList, cm_addresses),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "cm_ports",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientCMList, n_cm_ports),
    offsetof(CMsgClientCMList, cm_ports),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "cm_websocket_addresses",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_STRING,
    offsetof(CMsgClientCMList, n_cm_websocket_addresses),
    offsetof(CMsgClientCMList, cm_websocket_addresses),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "percent_default_to_websocket",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientCMList, has_percent_default_to_websocket),
    offsetof(CMsgClientCMList, percent_default_to_websocket),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_cmlist__field_indices_by_name[] = {
  0,   /* field[0] = cm_addresses */
  1,   /* field[1] = cm_ports */
  2,   /* field[2] = cm_websocket_addresses */
  3,   /* field[3] = percent_default_to_websocket */
};
static const ProtobufCIntRange cmsg_client_cmlist__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cmsg_client_cmlist__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientCMList",
  "CMsgClientCMList",
  "CMsgClientCMList",
  "",
  sizeof(CMsgClientCMList),
  4,
  cmsg_client_cmlist__field_descriptors,
  cmsg_client_cmlist__field_indices_by_name,
  1,  cmsg_client_cmlist__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_p2_pconnection_info__field_descriptors[6] =
{
  {
    "steam_id_dest",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientP2PConnectionInfo, has_steam_id_dest),
    offsetof(CMsgClientP2PConnectionInfo, steam_id_dest),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam_id_src",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientP2PConnectionInfo, has_steam_id_src),
    offsetof(CMsgClientP2PConnectionInfo, steam_id_src),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "app_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientP2PConnectionInfo, has_app_id),
    offsetof(CMsgClientP2PConnectionInfo, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "candidate",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientP2PConnectionInfo, has_candidate),
    offsetof(CMsgClientP2PConnectionInfo, candidate),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "legacy_connection_id_src",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientP2PConnectionInfo, has_legacy_connection_id_src),
    offsetof(CMsgClientP2PConnectionInfo, legacy_connection_id_src),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "rendezvous",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientP2PConnectionInfo, has_rendezvous),
    offsetof(CMsgClientP2PConnectionInfo, rendezvous),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_p2_pconnection_info__field_indices_by_name[] = {
  2,   /* field[2] = app_id */
  3,   /* field[3] = candidate */
  4,   /* field[4] = legacy_connection_id_src */
  5,   /* field[5] = rendezvous */
  0,   /* field[0] = steam_id_dest */
  1,   /* field[1] = steam_id_src */
};
static const ProtobufCIntRange cmsg_client_p2_pconnection_info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cmsg_client_p2_pconnection_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientP2PConnectionInfo",
  "CMsgClientP2PConnectionInfo",
  "CMsgClientP2PConnectionInfo",
  "",
  sizeof(CMsgClientP2PConnectionInfo),
  6,
  cmsg_client_p2_pconnection_info__field_descriptors,
  cmsg_client_p2_pconnection_info__field_indices_by_name,
  1,  cmsg_client_p2_pconnection_info__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_p2_pconnection_fail_info__field_descriptors[7] =
{
  {
    "steam_id_dest",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientP2PConnectionFailInfo, has_steam_id_dest),
    offsetof(CMsgClientP2PConnectionFailInfo, steam_id_dest),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam_id_src",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientP2PConnectionFailInfo, has_steam_id_src),
    offsetof(CMsgClientP2PConnectionFailInfo, steam_id_src),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "app_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientP2PConnectionFailInfo, has_app_id),
    offsetof(CMsgClientP2PConnectionFailInfo, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ep2p_session_error",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientP2PConnectionFailInfo, has_ep2p_session_error),
    offsetof(CMsgClientP2PConnectionFailInfo, ep2p_session_error),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "connection_id_dest",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientP2PConnectionFailInfo, has_connection_id_dest),
    offsetof(CMsgClientP2PConnectionFailInfo, connection_id_dest),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "close_reason",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientP2PConnectionFailInfo, has_close_reason),
    offsetof(CMsgClientP2PConnectionFailInfo, close_reason),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "close_message",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientP2PConnectionFailInfo, close_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_p2_pconnection_fail_info__field_indices_by_name[] = {
  2,   /* field[2] = app_id */
  6,   /* field[6] = close_message */
  5,   /* field[5] = close_reason */
  4,   /* field[4] = connection_id_dest */
  3,   /* field[3] = ep2p_session_error */
  0,   /* field[0] = steam_id_dest */
  1,   /* field[1] = steam_id_src */
};
static const ProtobufCIntRange cmsg_client_p2_pconnection_fail_info__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 7, 5 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cmsg_client_p2_pconnection_fail_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientP2PConnectionFailInfo",
  "CMsgClientP2PConnectionFailInfo",
  "CMsgClientP2PConnectionFailInfo",
  "",
  sizeof(CMsgClientP2PConnectionFailInfo),
  7,
  cmsg_client_p2_pconnection_fail_info__field_descriptors,
  cmsg_client_p2_pconnection_fail_info__field_indices_by_name,
  2,  cmsg_client_p2_pconnection_fail_info__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_networking_cert_request__field_descriptors[2] =
{
  {
    "key_data",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientNetworkingCertRequest, has_key_data),
    offsetof(CMsgClientNetworkingCertRequest, key_data),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "app_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientNetworkingCertRequest, has_app_id),
    offsetof(CMsgClientNetworkingCertRequest, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_networking_cert_request__field_indices_by_name[] = {
  1,   /* field[1] = app_id */
  0,   /* field[0] = key_data */
};
static const ProtobufCIntRange cmsg_client_networking_cert_request__number_ranges[1 + 1] =
{
  { 2, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_networking_cert_request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientNetworkingCertRequest",
  "CMsgClientNetworkingCertRequest",
  "CMsgClientNetworkingCertRequest",
  "",
  sizeof(CMsgClientNetworkingCertRequest),
  2,
  cmsg_client_networking_cert_request__field_descriptors,
  cmsg_client_networking_cert_request__field_indices_by_name,
  1,  cmsg_client_networking_cert_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_networking_cert_reply__field_descriptors[3] =
{
  {
    "cert",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientNetworkingCertReply, has_cert),
    offsetof(CMsgClientNetworkingCertReply, cert),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ca_key_id",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientNetworkingCertReply, has_ca_key_id),
    offsetof(CMsgClientNetworkingCertReply, ca_key_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ca_signature",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientNetworkingCertReply, has_ca_signature),
    offsetof(CMsgClientNetworkingCertReply, ca_signature),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_networking_cert_reply__field_indices_by_name[] = {
  1,   /* field[1] = ca_key_id */
  2,   /* field[2] = ca_signature */
  0,   /* field[0] = cert */
};
static const ProtobufCIntRange cmsg_client_networking_cert_reply__number_ranges[1 + 1] =
{
  { 4, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_networking_cert_reply__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientNetworkingCertReply",
  "CMsgClientNetworkingCertReply",
  "CMsgClientNetworkingCertReply",
  "",
  sizeof(CMsgClientNetworkingCertReply),
  3,
  cmsg_client_networking_cert_reply__field_descriptors,
  cmsg_client_networking_cert_reply__field_indices_by_name,
  1,  cmsg_client_networking_cert_reply__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_networking_mobile_cert_request__field_descriptors[1] =
{
  {
    "app_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientNetworkingMobileCertRequest, has_app_id),
    offsetof(CMsgClientNetworkingMobileCertRequest, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_networking_mobile_cert_request__field_indices_by_name[] = {
  0,   /* field[0] = app_id */
};
static const ProtobufCIntRange cmsg_client_networking_mobile_cert_request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_networking_mobile_cert_request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientNetworkingMobileCertRequest",
  "CMsgClientNetworkingMobileCertRequest",
  "CMsgClientNetworkingMobileCertRequest",
  "",
  sizeof(CMsgClientNetworkingMobileCertRequest),
  1,
  cmsg_client_networking_mobile_cert_request__field_descriptors,
  cmsg_client_networking_mobile_cert_request__field_indices_by_name,
  1,  cmsg_client_networking_mobile_cert_request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_networking_mobile_cert_reply__field_descriptors[1] =
{
  {
    "encoded_cert",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientNetworkingMobileCertReply, encoded_cert),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_networking_mobile_cert_reply__field_indices_by_name[] = {
  0,   /* field[0] = encoded_cert */
};
static const ProtobufCIntRange cmsg_client_networking_mobile_cert_reply__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_networking_mobile_cert_reply__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientNetworkingMobileCertReply",
  "CMsgClientNetworkingMobileCertReply",
  "CMsgClientNetworkingMobileCertReply",
  "",
  sizeof(CMsgClientNetworkingMobileCertReply),
  1,
  cmsg_client_networking_mobile_cert_reply__field_descriptors,
  cmsg_client_networking_mobile_cert_reply__field_indices_by_name,
  1,  cmsg_client_networking_mobile_cert_reply__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_get_app_ownership_ticket__field_descriptors[1] =
{
  {
    "app_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGetAppOwnershipTicket, has_app_id),
    offsetof(CMsgClientGetAppOwnershipTicket, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_get_app_ownership_ticket__field_indices_by_name[] = {
  0,   /* field[0] = app_id */
};
static const ProtobufCIntRange cmsg_client_get_app_ownership_ticket__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_get_app_ownership_ticket__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientGetAppOwnershipTicket",
  "CMsgClientGetAppOwnershipTicket",
  "CMsgClientGetAppOwnershipTicket",
  "",
  sizeof(CMsgClientGetAppOwnershipTicket),
  1,
  cmsg_client_get_app_ownership_ticket__field_descriptors,
  cmsg_client_get_app_ownership_ticket__field_indices_by_name,
  1,  cmsg_client_get_app_ownership_ticket__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const uint32_t cmsg_client_get_app_ownership_ticket_response__eresult__default_value = 2u;
static const ProtobufCFieldDescriptor cmsg_client_get_app_ownership_ticket_response__field_descriptors[3] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGetAppOwnershipTicketResponse, has_eresult),
    offsetof(CMsgClientGetAppOwnershipTicketResponse, eresult),
    NULL,
    &cmsg_client_get_app_ownership_ticket_response__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "app_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGetAppOwnershipTicketResponse, has_app_id),
    offsetof(CMsgClientGetAppOwnershipTicketResponse, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ticket",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientGetAppOwnershipTicketResponse, has_ticket),
    offsetof(CMsgClientGetAppOwnershipTicketResponse, ticket),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_get_app_ownership_ticket_response__field_indices_by_name[] = {
  1,   /* field[1] = app_id */
  0,   /* field[0] = eresult */
  2,   /* field[2] = ticket */
};
static const ProtobufCIntRange cmsg_client_get_app_ownership_ticket_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_get_app_ownership_ticket_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientGetAppOwnershipTicketResponse",
  "CMsgClientGetAppOwnershipTicketResponse",
  "CMsgClientGetAppOwnershipTicketResponse",
  "",
  sizeof(CMsgClientGetAppOwnershipTicketResponse),
  3,
  cmsg_client_get_app_ownership_ticket_response__field_descriptors,
  cmsg_client_get_app_ownership_ticket_response__field_indices_by_name,
  1,  cmsg_client_get_app_ownership_ticket_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_session_token__field_descriptors[1] =
{
  {
    "token",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientSessionToken, has_token),
    offsetof(CMsgClientSessionToken, token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_session_token__field_indices_by_name[] = {
  0,   /* field[0] = token */
};
static const ProtobufCIntRange cmsg_client_session_token__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_session_token__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientSessionToken",
  "CMsgClientSessionToken",
  "CMsgClientSessionToken",
  "",
  sizeof(CMsgClientSessionToken),
  1,
  cmsg_client_session_token__field_descriptors,
  cmsg_client_session_token__field_indices_by_name,
  1,  cmsg_client_session_token__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const uint32_t cmsg_client_game_connect_tokens__max_tokens_to_keep__default_value = 10u;
static const ProtobufCFieldDescriptor cmsg_client_game_connect_tokens__field_descriptors[2] =
{
  {
    "max_tokens_to_keep",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGameConnectTokens, has_max_tokens_to_keep),
    offsetof(CMsgClientGameConnectTokens, max_tokens_to_keep),
    NULL,
    &cmsg_client_game_connect_tokens__max_tokens_to_keep__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "tokens",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientGameConnectTokens, n_tokens),
    offsetof(CMsgClientGameConnectTokens, tokens),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_game_connect_tokens__field_indices_by_name[] = {
  0,   /* field[0] = max_tokens_to_keep */
  1,   /* field[1] = tokens */
};
static const ProtobufCIntRange cmsg_client_game_connect_tokens__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_game_connect_tokens__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientGameConnectTokens",
  "CMsgClientGameConnectTokens",
  "CMsgClientGameConnectTokens",
  "",
  sizeof(CMsgClientGameConnectTokens),
  2,
  cmsg_client_game_connect_tokens__field_descriptors,
  cmsg_client_game_connect_tokens__field_indices_by_name,
  1,  cmsg_client_game_connect_tokens__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_games_played__process_info__field_descriptors[3] =
{
  {
    "process_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__ProcessInfo, has_process_id),
    offsetof(CMsgClientGamesPlayed__ProcessInfo, process_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "process_id_parent",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__ProcessInfo, has_process_id_parent),
    offsetof(CMsgClientGamesPlayed__ProcessInfo, process_id_parent),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "parent_is_steam",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientGamesPlayed__ProcessInfo, has_parent_is_steam),
    offsetof(CMsgClientGamesPlayed__ProcessInfo, parent_is_steam),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_games_played__process_info__field_indices_by_name[] = {
  2,   /* field[2] = parent_is_steam */
  0,   /* field[0] = process_id */
  1,   /* field[1] = process_id_parent */
};
static const ProtobufCIntRange cmsg_client_games_played__process_info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_games_played__process_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientGamesPlayed.ProcessInfo",
  "ProcessInfo",
  "CMsgClientGamesPlayed__ProcessInfo",
  "",
  sizeof(CMsgClientGamesPlayed__ProcessInfo),
  3,
  cmsg_client_games_played__process_info__field_descriptors,
  cmsg_client_games_played__process_info__field_indices_by_name,
  1,  cmsg_client_games_played__process_info__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const uint32_t cmsg_client_games_played__game_played__launch_option_type__default_value = 0u;
static const int32_t cmsg_client_games_played__game_played__primary_controller_type__default_value = -1;
static const uint32_t cmsg_client_games_played__game_played__total_steam_controller_count__default_value = 0u;
static const uint32_t cmsg_client_games_played__game_played__total_non_steam_controller_count__default_value = 0u;
static const uint64_t cmsg_client_games_played__game_played__controller_workshop_file_id__default_value = 0ull;
static const uint32_t cmsg_client_games_played__game_played__launch_source__default_value = 0u;
static const uint32_t cmsg_client_games_played__game_played__controller_connection_type__default_value = 0u;
static const uint32_t cmsg_client_games_played__game_played__compat_tool_id__default_value = 0u;
static const ProtobufCFieldDescriptor cmsg_client_games_played__game_played__field_descriptors[32] =
{
  {
    "steam_id_gs",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_steam_id_gs),
    offsetof(CMsgClientGamesPlayed__GamePlayed, steam_id_gs),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_game_id),
    offsetof(CMsgClientGamesPlayed__GamePlayed, game_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deprecated_game_ip_address",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_deprecated_game_ip_address),
    offsetof(CMsgClientGamesPlayed__GamePlayed, deprecated_game_ip_address),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_port",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_game_port),
    offsetof(CMsgClientGamesPlayed__GamePlayed, game_port),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_secure",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_is_secure),
    offsetof(CMsgClientGamesPlayed__GamePlayed, is_secure),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "token",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_token),
    offsetof(CMsgClientGamesPlayed__GamePlayed, token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_extra_info",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientGamesPlayed__GamePlayed, game_extra_info),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_data_blob",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_game_data_blob),
    offsetof(CMsgClientGamesPlayed__GamePlayed, game_data_blob),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "process_id",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_process_id),
    offsetof(CMsgClientGamesPlayed__GamePlayed, process_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "streaming_provider_id",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_streaming_provider_id),
    offsetof(CMsgClientGamesPlayed__GamePlayed, streaming_provider_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_flags",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_game_flags),
    offsetof(CMsgClientGamesPlayed__GamePlayed, game_flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "owner_id",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_owner_id),
    offsetof(CMsgClientGamesPlayed__GamePlayed, owner_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "vr_hmd_vendor",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientGamesPlayed__GamePlayed, vr_hmd_vendor),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "vr_hmd_model",
    14,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientGamesPlayed__GamePlayed, vr_hmd_model),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "launch_option_type",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_launch_option_type),
    offsetof(CMsgClientGamesPlayed__GamePlayed, launch_option_type),
    NULL,
    &cmsg_client_games_played__game_played__launch_option_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "primary_controller_type",
    16,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_primary_controller_type),
    offsetof(CMsgClientGamesPlayed__GamePlayed, primary_controller_type),
    NULL,
    &cmsg_client_games_played__game_played__primary_controller_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "primary_steam_controller_serial",
    17,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientGamesPlayed__GamePlayed, primary_steam_controller_serial),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "total_steam_controller_count",
    18,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_total_steam_controller_count),
    offsetof(CMsgClientGamesPlayed__GamePlayed, total_steam_controller_count),
    NULL,
    &cmsg_client_games_played__game_played__total_steam_controller_count__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "total_non_steam_controller_count",
    19,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_total_non_steam_controller_count),
    offsetof(CMsgClientGamesPlayed__GamePlayed, total_non_steam_controller_count),
    NULL,
    &cmsg_client_games_played__game_played__total_non_steam_controller_count__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "controller_workshop_file_id",
    20,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_controller_workshop_file_id),
    offsetof(CMsgClientGamesPlayed__GamePlayed, controller_workshop_file_id),
    NULL,
    &cmsg_client_games_played__game_played__controller_workshop_file_id__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "launch_source",
    21,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_launch_source),
    offsetof(CMsgClientGamesPlayed__GamePlayed, launch_source),
    NULL,
    &cmsg_client_games_played__game_played__launch_source__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "vr_hmd_runtime",
    22,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_vr_hmd_runtime),
    offsetof(CMsgClientGamesPlayed__GamePlayed, vr_hmd_runtime),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_ip_address",
    23,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientGamesPlayed__GamePlayed, game_ip_address),
    &cmsg_ipaddress__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "controller_connection_type",
    24,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_controller_connection_type),
    offsetof(CMsgClientGamesPlayed__GamePlayed, controller_connection_type),
    NULL,
    &cmsg_client_games_played__game_played__controller_connection_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_os_platform",
    25,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_game_os_platform),
    offsetof(CMsgClientGamesPlayed__GamePlayed, game_os_platform),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_build_id",
    26,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_game_build_id),
    offsetof(CMsgClientGamesPlayed__GamePlayed, game_build_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "compat_tool_id",
    27,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_compat_tool_id),
    offsetof(CMsgClientGamesPlayed__GamePlayed, compat_tool_id),
    NULL,
    &cmsg_client_games_played__game_played__compat_tool_id__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "compat_tool_cmd",
    28,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientGamesPlayed__GamePlayed, compat_tool_cmd),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "compat_tool_build_id",
    29,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_compat_tool_build_id),
    offsetof(CMsgClientGamesPlayed__GamePlayed, compat_tool_build_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "beta_name",
    30,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientGamesPlayed__GamePlayed, beta_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "dlc_context",
    31,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed__GamePlayed, has_dlc_context),
    offsetof(CMsgClientGamesPlayed__GamePlayed, dlc_context),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "process_id_list",
    32,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientGamesPlayed__GamePlayed, n_process_id_list),
    offsetof(CMsgClientGamesPlayed__GamePlayed, process_id_list),
    &cmsg_client_games_played__process_info__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_games_played__game_played__field_indices_by_name[] = {
  29,   /* field[29] = beta_name */
  28,   /* field[28] = compat_tool_build_id */
  27,   /* field[27] = compat_tool_cmd */
  26,   /* field[26] = compat_tool_id */
  23,   /* field[23] = controller_connection_type */
  19,   /* field[19] = controller_workshop_file_id */
  2,   /* field[2] = deprecated_game_ip_address */
  30,   /* field[30] = dlc_context */
  25,   /* field[25] = game_build_id */
  7,   /* field[7] = game_data_blob */
  6,   /* field[6] = game_extra_info */
  10,   /* field[10] = game_flags */
  1,   /* field[1] = game_id */
  22,   /* field[22] = game_ip_address */
  24,   /* field[24] = game_os_platform */
  3,   /* field[3] = game_port */
  4,   /* field[4] = is_secure */
  14,   /* field[14] = launch_option_type */
  20,   /* field[20] = launch_source */
  11,   /* field[11] = owner_id */
  15,   /* field[15] = primary_controller_type */
  16,   /* field[16] = primary_steam_controller_serial */
  8,   /* field[8] = process_id */
  31,   /* field[31] = process_id_list */
  0,   /* field[0] = steam_id_gs */
  9,   /* field[9] = streaming_provider_id */
  5,   /* field[5] = token */
  18,   /* field[18] = total_non_steam_controller_count */
  17,   /* field[17] = total_steam_controller_count */
  13,   /* field[13] = vr_hmd_model */
  21,   /* field[21] = vr_hmd_runtime */
  12,   /* field[12] = vr_hmd_vendor */
};
static const ProtobufCIntRange cmsg_client_games_played__game_played__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 32 }
};
const ProtobufCMessageDescriptor cmsg_client_games_played__game_played__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientGamesPlayed.GamePlayed",
  "GamePlayed",
  "CMsgClientGamesPlayed__GamePlayed",
  "",
  sizeof(CMsgClientGamesPlayed__GamePlayed),
  32,
  cmsg_client_games_played__game_played__field_descriptors,
  cmsg_client_games_played__game_played__field_indices_by_name,
  1,  cmsg_client_games_played__game_played__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_games_played__field_descriptors[4] =
{
  {
    "games_played",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientGamesPlayed, n_games_played),
    offsetof(CMsgClientGamesPlayed, games_played),
    &cmsg_client_games_played__game_played__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_os_type",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed, has_client_os_type),
    offsetof(CMsgClientGamesPlayed, client_os_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "cloud_gaming_platform",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientGamesPlayed, has_cloud_gaming_platform),
    offsetof(CMsgClientGamesPlayed, cloud_gaming_platform),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "recent_reauthentication",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientGamesPlayed, has_recent_reauthentication),
    offsetof(CMsgClientGamesPlayed, recent_reauthentication),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_games_played__field_indices_by_name[] = {
  1,   /* field[1] = client_os_type */
  2,   /* field[2] = cloud_gaming_platform */
  0,   /* field[0] = games_played */
  3,   /* field[3] = recent_reauthentication */
};
static const ProtobufCIntRange cmsg_client_games_played__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cmsg_client_games_played__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientGamesPlayed",
  "CMsgClientGamesPlayed",
  "CMsgClientGamesPlayed",
  "",
  sizeof(CMsgClientGamesPlayed),
  4,
  cmsg_client_games_played__field_descriptors,
  cmsg_client_games_played__field_indices_by_name,
  1,  cmsg_client_games_played__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_gsapprove__field_descriptors[2] =
{
  {
    "steam_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgGSApprove, has_steam_id),
    offsetof(CMsgGSApprove, steam_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "owner_steam_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgGSApprove, has_owner_steam_id),
    offsetof(CMsgGSApprove, owner_steam_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_gsapprove__field_indices_by_name[] = {
  1,   /* field[1] = owner_steam_id */
  0,   /* field[0] = steam_id */
};
static const ProtobufCIntRange cmsg_gsapprove__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_gsapprove__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgGSApprove",
  "CMsgGSApprove",
  "CMsgGSApprove",
  "",
  sizeof(CMsgGSApprove),
  2,
  cmsg_gsapprove__field_descriptors,
  cmsg_gsapprove__field_indices_by_name,
  1,  cmsg_gsapprove__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_gsdeny__field_descriptors[3] =
{
  {
    "steam_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgGSDeny, has_steam_id),
    offsetof(CMsgGSDeny, steam_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "edeny_reason",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgGSDeny, has_edeny_reason),
    offsetof(CMsgGSDeny, edeny_reason),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deny_string",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgGSDeny, deny_string),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_gsdeny__field_indices_by_name[] = {
  2,   /* field[2] = deny_string */
  1,   /* field[1] = edeny_reason */
  0,   /* field[0] = steam_id */
};
static const ProtobufCIntRange cmsg_gsdeny__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_gsdeny__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgGSDeny",
  "CMsgGSDeny",
  "CMsgGSDeny",
  "",
  sizeof(CMsgGSDeny),
  3,
  cmsg_gsdeny__field_descriptors,
  cmsg_gsdeny__field_indices_by_name,
  1,  cmsg_gsdeny__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_gskick__field_descriptors[2] =
{
  {
    "steam_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgGSKick, has_steam_id),
    offsetof(CMsgGSKick, steam_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "edeny_reason",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgGSKick, has_edeny_reason),
    offsetof(CMsgGSKick, edeny_reason),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_gskick__field_indices_by_name[] = {
  1,   /* field[1] = edeny_reason */
  0,   /* field[0] = steam_id */
};
static const ProtobufCIntRange cmsg_gskick__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_gskick__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgGSKick",
  "CMsgGSKick",
  "CMsgGSKick",
  "",
  sizeof(CMsgGSKick),
  2,
  cmsg_gskick__field_descriptors,
  cmsg_gskick__field_indices_by_name,
  1,  cmsg_gskick__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_auth_list__field_descriptors[6] =
{
  {
    "tokens_left",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAuthList, has_tokens_left),
    offsetof(CMsgClientAuthList, tokens_left),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_request_seq",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAuthList, has_last_request_seq),
    offsetof(CMsgClientAuthList, last_request_seq),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_request_seq_from_server",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAuthList, has_last_request_seq_from_server),
    offsetof(CMsgClientAuthList, last_request_seq_from_server),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "tickets",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientAuthList, n_tickets),
    offsetof(CMsgClientAuthList, tickets),
    &cmsg_auth_ticket__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "app_ids",
    5,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAuthList, n_app_ids),
    offsetof(CMsgClientAuthList, app_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message_sequence",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAuthList, has_message_sequence),
    offsetof(CMsgClientAuthList, message_sequence),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_auth_list__field_indices_by_name[] = {
  4,   /* field[4] = app_ids */
  1,   /* field[1] = last_request_seq */
  2,   /* field[2] = last_request_seq_from_server */
  5,   /* field[5] = message_sequence */
  3,   /* field[3] = tickets */
  0,   /* field[0] = tokens_left */
};
static const ProtobufCIntRange cmsg_client_auth_list__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cmsg_client_auth_list__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAuthList",
  "CMsgClientAuthList",
  "CMsgClientAuthList",
  "",
  sizeof(CMsgClientAuthList),
  6,
  cmsg_client_auth_list__field_descriptors,
  cmsg_client_auth_list__field_indices_by_name,
  1,  cmsg_client_auth_list__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_auth_list_ack__field_descriptors[3] =
{
  {
    "ticket_crc",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAuthListAck, n_ticket_crc),
    offsetof(CMsgClientAuthListAck, ticket_crc),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "app_ids",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAuthListAck, n_app_ids),
    offsetof(CMsgClientAuthListAck, app_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message_sequence",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAuthListAck, has_message_sequence),
    offsetof(CMsgClientAuthListAck, message_sequence),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_auth_list_ack__field_indices_by_name[] = {
  1,   /* field[1] = app_ids */
  2,   /* field[2] = message_sequence */
  0,   /* field[0] = ticket_crc */
};
static const ProtobufCIntRange cmsg_client_auth_list_ack__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_auth_list_ack__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAuthListAck",
  "CMsgClientAuthListAck",
  "CMsgClientAuthListAck",
  "",
  sizeof(CMsgClientAuthListAck),
  3,
  cmsg_client_auth_list_ack__field_descriptors,
  cmsg_client_auth_list_ack__field_indices_by_name,
  1,  cmsg_client_auth_list_ack__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_license_list__license__field_descriptors[18] =
{
  {
    "package_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_package_id),
    offsetof(CMsgClientLicenseList__License, package_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_created",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED32,
    offsetof(CMsgClientLicenseList__License, has_time_created),
    offsetof(CMsgClientLicenseList__License, time_created),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_next_process",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED32,
    offsetof(CMsgClientLicenseList__License, has_time_next_process),
    offsetof(CMsgClientLicenseList__License, time_next_process),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "minute_limit",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLicenseList__License, has_minute_limit),
    offsetof(CMsgClientLicenseList__License, minute_limit),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "minutes_used",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLicenseList__License, has_minutes_used),
    offsetof(CMsgClientLicenseList__License, minutes_used),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "payment_method",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_payment_method),
    offsetof(CMsgClientLicenseList__License, payment_method),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "flags",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_flags),
    offsetof(CMsgClientLicenseList__License, flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "purchase_country_code",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientLicenseList__License, purchase_country_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "license_type",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_license_type),
    offsetof(CMsgClientLicenseList__License, license_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "territory_code",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLicenseList__License, has_territory_code),
    offsetof(CMsgClientLicenseList__License, territory_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "change_number",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLicenseList__License, has_change_number),
    offsetof(CMsgClientLicenseList__License, change_number),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "owner_id",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_owner_id),
    offsetof(CMsgClientLicenseList__License, owner_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "initial_period",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_initial_period),
    offsetof(CMsgClientLicenseList__License, initial_period),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "initial_time_unit",
    14,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_initial_time_unit),
    offsetof(CMsgClientLicenseList__License, initial_time_unit),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "renewal_period",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_renewal_period),
    offsetof(CMsgClientLicenseList__License, renewal_period),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "renewal_time_unit",
    16,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_renewal_time_unit),
    offsetof(CMsgClientLicenseList__License, renewal_time_unit),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "access_token",
    17,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientLicenseList__License, has_access_token),
    offsetof(CMsgClientLicenseList__License, access_token),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "master_package_id",
    18,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientLicenseList__License, has_master_package_id),
    offsetof(CMsgClientLicenseList__License, master_package_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_license_list__license__field_indices_by_name[] = {
  16,   /* field[16] = access_token */
  10,   /* field[10] = change_number */
  6,   /* field[6] = flags */
  12,   /* field[12] = initial_period */
  13,   /* field[13] = initial_time_unit */
  8,   /* field[8] = license_type */
  17,   /* field[17] = master_package_id */
  3,   /* field[3] = minute_limit */
  4,   /* field[4] = minutes_used */
  11,   /* field[11] = owner_id */
  0,   /* field[0] = package_id */
  5,   /* field[5] = payment_method */
  7,   /* field[7] = purchase_country_code */
  14,   /* field[14] = renewal_period */
  15,   /* field[15] = renewal_time_unit */
  9,   /* field[9] = territory_code */
  1,   /* field[1] = time_created */
  2,   /* field[2] = time_next_process */
};
static const ProtobufCIntRange cmsg_client_license_list__license__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 18 }
};
const ProtobufCMessageDescriptor cmsg_client_license_list__license__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientLicenseList.License",
  "License",
  "CMsgClientLicenseList__License",
  "",
  sizeof(CMsgClientLicenseList__License),
  18,
  cmsg_client_license_list__license__field_descriptors,
  cmsg_client_license_list__license__field_indices_by_name,
  1,  cmsg_client_license_list__license__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_license_list__eresult__default_value = 2;
static const ProtobufCFieldDescriptor cmsg_client_license_list__field_descriptors[2] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientLicenseList, has_eresult),
    offsetof(CMsgClientLicenseList, eresult),
    NULL,
    &cmsg_client_license_list__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "licenses",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientLicenseList, n_licenses),
    offsetof(CMsgClientLicenseList, licenses),
    &cmsg_client_license_list__license__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_license_list__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
  1,   /* field[1] = licenses */
};
static const ProtobufCIntRange cmsg_client_license_list__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_license_list__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientLicenseList",
  "CMsgClientLicenseList",
  "CMsgClientLicenseList",
  "",
  sizeof(CMsgClientLicenseList),
  2,
  cmsg_client_license_list__field_descriptors,
  cmsg_client_license_list__field_indices_by_name,
  1,  cmsg_client_license_list__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_is_limited_account__field_descriptors[4] =
{
  {
    "bis_limited_account",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientIsLimitedAccount, has_bis_limited_account),
    offsetof(CMsgClientIsLimitedAccount, bis_limited_account),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "bis_community_banned",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientIsLimitedAccount, has_bis_community_banned),
    offsetof(CMsgClientIsLimitedAccount, bis_community_banned),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "bis_locked_account",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientIsLimitedAccount, has_bis_locked_account),
    offsetof(CMsgClientIsLimitedAccount, bis_locked_account),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "bis_limited_account_allowed_to_invite_friends",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientIsLimitedAccount, has_bis_limited_account_allowed_to_invite_friends),
    offsetof(CMsgClientIsLimitedAccount, bis_limited_account_allowed_to_invite_friends),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_is_limited_account__field_indices_by_name[] = {
  1,   /* field[1] = bis_community_banned */
  0,   /* field[0] = bis_limited_account */
  3,   /* field[3] = bis_limited_account_allowed_to_invite_friends */
  2,   /* field[2] = bis_locked_account */
};
static const ProtobufCIntRange cmsg_client_is_limited_account__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cmsg_client_is_limited_account__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientIsLimitedAccount",
  "CMsgClientIsLimitedAccount",
  "CMsgClientIsLimitedAccount",
  "",
  sizeof(CMsgClientIsLimitedAccount),
  4,
  cmsg_client_is_limited_account__field_descriptors,
  cmsg_client_is_limited_account__field_indices_by_name,
  1,  cmsg_client_is_limited_account__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_requested_client_stats__stats_to_send__field_descriptors[2] =
{
  {
    "client_stat",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientRequestedClientStats__StatsToSend, has_client_stat),
    offsetof(CMsgClientRequestedClientStats__StatsToSend, client_stat),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "stat_aggregate_method",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientRequestedClientStats__StatsToSend, has_stat_aggregate_method),
    offsetof(CMsgClientRequestedClientStats__StatsToSend, stat_aggregate_method),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_requested_client_stats__stats_to_send__field_indices_by_name[] = {
  0,   /* field[0] = client_stat */
  1,   /* field[1] = stat_aggregate_method */
};
static const ProtobufCIntRange cmsg_client_requested_client_stats__stats_to_send__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_requested_client_stats__stats_to_send__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRequestedClientStats.StatsToSend",
  "StatsToSend",
  "CMsgClientRequestedClientStats__StatsToSend",
  "",
  sizeof(CMsgClientRequestedClientStats__StatsToSend),
  2,
  cmsg_client_requested_client_stats__stats_to_send__field_descriptors,
  cmsg_client_requested_client_stats__stats_to_send__field_indices_by_name,
  1,  cmsg_client_requested_client_stats__stats_to_send__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_requested_client_stats__field_descriptors[1] =
{
  {
    "stats_to_send",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientRequestedClientStats, n_stats_to_send),
    offsetof(CMsgClientRequestedClientStats, stats_to_send),
    &cmsg_client_requested_client_stats__stats_to_send__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_requested_client_stats__field_indices_by_name[] = {
  0,   /* field[0] = stats_to_send */
};
static const ProtobufCIntRange cmsg_client_requested_client_stats__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_requested_client_stats__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRequestedClientStats",
  "CMsgClientRequestedClientStats",
  "CMsgClientRequestedClientStats",
  "",
  sizeof(CMsgClientRequestedClientStats),
  1,
  cmsg_client_requested_client_stats__field_descriptors,
  cmsg_client_requested_client_stats__field_indices_by_name,
  1,  cmsg_client_requested_client_stats__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_stat2__stat_detail__field_descriptors[6] =
{
  {
    "client_stat",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientStat2__StatDetail, has_client_stat),
    offsetof(CMsgClientStat2__StatDetail, client_stat),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ll_value",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT64,
    offsetof(CMsgClientStat2__StatDetail, has_ll_value),
    offsetof(CMsgClientStat2__StatDetail, ll_value),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_of_day",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientStat2__StatDetail, has_time_of_day),
    offsetof(CMsgClientStat2__StatDetail, time_of_day),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "cell_id",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientStat2__StatDetail, has_cell_id),
    offsetof(CMsgClientStat2__StatDetail, cell_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "depot_id",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientStat2__StatDetail, has_depot_id),
    offsetof(CMsgClientStat2__StatDetail, depot_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "app_id",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientStat2__StatDetail, has_app_id),
    offsetof(CMsgClientStat2__StatDetail, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_stat2__stat_detail__field_indices_by_name[] = {
  5,   /* field[5] = app_id */
  3,   /* field[3] = cell_id */
  0,   /* field[0] = client_stat */
  4,   /* field[4] = depot_id */
  1,   /* field[1] = ll_value */
  2,   /* field[2] = time_of_day */
};
static const ProtobufCIntRange cmsg_client_stat2__stat_detail__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cmsg_client_stat2__stat_detail__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientStat2.StatDetail",
  "StatDetail",
  "CMsgClientStat2__StatDetail",
  "",
  sizeof(CMsgClientStat2__StatDetail),
  6,
  cmsg_client_stat2__stat_detail__field_descriptors,
  cmsg_client_stat2__stat_detail__field_indices_by_name,
  1,  cmsg_client_stat2__stat_detail__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_stat2__field_descriptors[1] =
{
  {
    "stat_detail",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientStat2, n_stat_detail),
    offsetof(CMsgClientStat2, stat_detail),
    &cmsg_client_stat2__stat_detail__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_stat2__field_indices_by_name[] = {
  0,   /* field[0] = stat_detail */
};
static const ProtobufCIntRange cmsg_client_stat2__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_stat2__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientStat2",
  "CMsgClientStat2",
  "CMsgClientStat2",
  "",
  sizeof(CMsgClientStat2),
  1,
  cmsg_client_stat2__field_descriptors,
  cmsg_client_stat2__field_indices_by_name,
  1,  cmsg_client_stat2__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_invite_to_game__field_descriptors[4] =
{
  {
    "steam_id_dest",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientInviteToGame, has_steam_id_dest),
    offsetof(CMsgClientInviteToGame, steam_id_dest),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam_id_src",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientInviteToGame, has_steam_id_src),
    offsetof(CMsgClientInviteToGame, steam_id_src),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "connect_string",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientInviteToGame, connect_string),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "remote_play",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientInviteToGame, remote_play),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_invite_to_game__field_indices_by_name[] = {
  2,   /* field[2] = connect_string */
  3,   /* field[3] = remote_play */
  0,   /* field[0] = steam_id_dest */
  1,   /* field[1] = steam_id_src */
};
static const ProtobufCIntRange cmsg_client_invite_to_game__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cmsg_client_invite_to_game__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientInviteToGame",
  "CMsgClientInviteToGame",
  "CMsgClientInviteToGame",
  "",
  sizeof(CMsgClientInviteToGame),
  4,
  cmsg_client_invite_to_game__field_descriptors,
  cmsg_client_invite_to_game__field_indices_by_name,
  1,  cmsg_client_invite_to_game__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_chat_invite__field_descriptors[7] =
{
  {
    "steam_id_invited",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientChatInvite, has_steam_id_invited),
    offsetof(CMsgClientChatInvite, steam_id_invited),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam_id_chat",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientChatInvite, has_steam_id_chat),
    offsetof(CMsgClientChatInvite, steam_id_chat),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam_id_patron",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientChatInvite, has_steam_id_patron),
    offsetof(CMsgClientChatInvite, steam_id_patron),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chatroom_type",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientChatInvite, has_chatroom_type),
    offsetof(CMsgClientChatInvite, chatroom_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam_id_friend_chat",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientChatInvite, has_steam_id_friend_chat),
    offsetof(CMsgClientChatInvite, steam_id_friend_chat),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_name",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientChatInvite, chat_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_id",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientChatInvite, has_game_id),
    offsetof(CMsgClientChatInvite, game_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_chat_invite__field_indices_by_name[] = {
  5,   /* field[5] = chat_name */
  3,   /* field[3] = chatroom_type */
  6,   /* field[6] = game_id */
  1,   /* field[1] = steam_id_chat */
  4,   /* field[4] = steam_id_friend_chat */
  0,   /* field[0] = steam_id_invited */
  2,   /* field[2] = steam_id_patron */
};
static const ProtobufCIntRange cmsg_client_chat_invite__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cmsg_client_chat_invite__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientChatInvite",
  "CMsgClientChatInvite",
  "CMsgClientChatInvite",
  "",
  sizeof(CMsgClientChatInvite),
  7,
  cmsg_client_chat_invite__field_descriptors,
  cmsg_client_chat_invite__field_indices_by_name,
  1,  cmsg_client_chat_invite__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_connection_stats__stats__logon__field_descriptors[11] =
{
  {
    "connect_attempts",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_connect_attempts),
    offsetof(CMsgClientConnectionStats__StatsLogon, connect_attempts),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "connect_successes",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_connect_successes),
    offsetof(CMsgClientConnectionStats__StatsLogon, connect_successes),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "connect_failures",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_connect_failures),
    offsetof(CMsgClientConnectionStats__StatsLogon, connect_failures),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "connections_dropped",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_connections_dropped),
    offsetof(CMsgClientConnectionStats__StatsLogon, connections_dropped),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "seconds_running",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_seconds_running),
    offsetof(CMsgClientConnectionStats__StatsLogon, seconds_running),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "msec_tologonthistime",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_msec_tologonthistime),
    offsetof(CMsgClientConnectionStats__StatsLogon, msec_tologonthistime),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "count_bad_cms",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_count_bad_cms),
    offsetof(CMsgClientConnectionStats__StatsLogon, count_bad_cms),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "no_udp_connectivity",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_no_udp_connectivity),
    offsetof(CMsgClientConnectionStats__StatsLogon, no_udp_connectivity),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "no_tcp_connectivity",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_no_tcp_connectivity),
    offsetof(CMsgClientConnectionStats__StatsLogon, no_tcp_connectivity),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "no_websocket_443_connectivity",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_no_websocket_443_connectivity),
    offsetof(CMsgClientConnectionStats__StatsLogon, no_websocket_443_connectivity),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "no_websocket_non_443_connectivity",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientConnectionStats__StatsLogon, has_no_websocket_non_443_connectivity),
    offsetof(CMsgClientConnectionStats__StatsLogon, no_websocket_non_443_connectivity),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_connection_stats__stats__logon__field_indices_by_name[] = {
  0,   /* field[0] = connect_attempts */
  2,   /* field[2] = connect_failures */
  1,   /* field[1] = connect_successes */
  3,   /* field[3] = connections_dropped */
  6,   /* field[6] = count_bad_cms */
  5,   /* field[5] = msec_tologonthistime */
  8,   /* field[8] = no_tcp_connectivity */
  7,   /* field[7] = no_udp_connectivity */
  9,   /* field[9] = no_websocket_443_connectivity */
  10,   /* field[10] = no_websocket_non_443_connectivity */
  4,   /* field[4] = seconds_running */
};
static const ProtobufCIntRange cmsg_client_connection_stats__stats__logon__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 11 }
};
const ProtobufCMessageDescriptor cmsg_client_connection_stats__stats__logon__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientConnectionStats.Stats_Logon",
  "StatsLogon",
  "CMsgClientConnectionStats__StatsLogon",
  "",
  sizeof(CMsgClientConnectionStats__StatsLogon),
  11,
  cmsg_client_connection_stats__stats__logon__field_descriptors,
  cmsg_client_connection_stats__stats__logon__field_indices_by_name,
  1,  cmsg_client_connection_stats__stats__logon__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_connection_stats__stats__udp__field_descriptors[5] =
{
  {
    "pkts_sent",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsUDP, has_pkts_sent),
    offsetof(CMsgClientConnectionStats__StatsUDP, pkts_sent),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "bytes_sent",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsUDP, has_bytes_sent),
    offsetof(CMsgClientConnectionStats__StatsUDP, bytes_sent),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "pkts_recv",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsUDP, has_pkts_recv),
    offsetof(CMsgClientConnectionStats__StatsUDP, pkts_recv),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "pkts_processed",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsUDP, has_pkts_processed),
    offsetof(CMsgClientConnectionStats__StatsUDP, pkts_processed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "bytes_recv",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsUDP, has_bytes_recv),
    offsetof(CMsgClientConnectionStats__StatsUDP, bytes_recv),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_connection_stats__stats__udp__field_indices_by_name[] = {
  4,   /* field[4] = bytes_recv */
  1,   /* field[1] = bytes_sent */
  3,   /* field[3] = pkts_processed */
  2,   /* field[2] = pkts_recv */
  0,   /* field[0] = pkts_sent */
};
static const ProtobufCIntRange cmsg_client_connection_stats__stats__udp__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cmsg_client_connection_stats__stats__udp__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientConnectionStats.Stats_UDP",
  "StatsUDP",
  "CMsgClientConnectionStats__StatsUDP",
  "",
  sizeof(CMsgClientConnectionStats__StatsUDP),
  5,
  cmsg_client_connection_stats__stats__udp__field_descriptors,
  cmsg_client_connection_stats__stats__udp__field_indices_by_name,
  1,  cmsg_client_connection_stats__stats__udp__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_connection_stats__stats__vconn__field_descriptors[20] =
{
  {
    "connections_udp",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_connections_udp),
    offsetof(CMsgClientConnectionStats__StatsVConn, connections_udp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "connections_tcp",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_connections_tcp),
    offsetof(CMsgClientConnectionStats__StatsVConn, connections_tcp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "stats_udp",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientConnectionStats__StatsVConn, stats_udp),
    &cmsg_client_connection_stats__stats__udp__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "pkts_abandoned",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_pkts_abandoned),
    offsetof(CMsgClientConnectionStats__StatsVConn, pkts_abandoned),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "conn_req_received",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_conn_req_received),
    offsetof(CMsgClientConnectionStats__StatsVConn, conn_req_received),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "pkts_resent",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_pkts_resent),
    offsetof(CMsgClientConnectionStats__StatsVConn, pkts_resent),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "msgs_sent",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_msgs_sent),
    offsetof(CMsgClientConnectionStats__StatsVConn, msgs_sent),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "msgs_sent_failed",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_msgs_sent_failed),
    offsetof(CMsgClientConnectionStats__StatsVConn, msgs_sent_failed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "msgs_recv",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_msgs_recv),
    offsetof(CMsgClientConnectionStats__StatsVConn, msgs_recv),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "datagrams_sent",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_datagrams_sent),
    offsetof(CMsgClientConnectionStats__StatsVConn, datagrams_sent),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "datagrams_recv",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_datagrams_recv),
    offsetof(CMsgClientConnectionStats__StatsVConn, datagrams_recv),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "bad_pkts_recv",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_bad_pkts_recv),
    offsetof(CMsgClientConnectionStats__StatsVConn, bad_pkts_recv),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "unknown_conn_pkts_recv",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_unknown_conn_pkts_recv),
    offsetof(CMsgClientConnectionStats__StatsVConn, unknown_conn_pkts_recv),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "missed_pkts_recv",
    14,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_missed_pkts_recv),
    offsetof(CMsgClientConnectionStats__StatsVConn, missed_pkts_recv),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "dup_pkts_recv",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_dup_pkts_recv),
    offsetof(CMsgClientConnectionStats__StatsVConn, dup_pkts_recv),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "failed_connect_challenges",
    16,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_failed_connect_challenges),
    offsetof(CMsgClientConnectionStats__StatsVConn, failed_connect_challenges),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "micro_sec_avg_latency",
    17,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_micro_sec_avg_latency),
    offsetof(CMsgClientConnectionStats__StatsVConn, micro_sec_avg_latency),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "micro_sec_min_latency",
    18,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_micro_sec_min_latency),
    offsetof(CMsgClientConnectionStats__StatsVConn, micro_sec_min_latency),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "micro_sec_max_latency",
    19,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_micro_sec_max_latency),
    offsetof(CMsgClientConnectionStats__StatsVConn, micro_sec_max_latency),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "mem_pool_msg_in_use",
    20,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientConnectionStats__StatsVConn, has_mem_pool_msg_in_use),
    offsetof(CMsgClientConnectionStats__StatsVConn, mem_pool_msg_in_use),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_connection_stats__stats__vconn__field_indices_by_name[] = {
  11,   /* field[11] = bad_pkts_recv */
  4,   /* field[4] = conn_req_received */
  1,   /* field[1] = connections_tcp */
  0,   /* field[0] = connections_udp */
  10,   /* field[10] = datagrams_recv */
  9,   /* field[9] = datagrams_sent */
  14,   /* field[14] = dup_pkts_recv */
  15,   /* field[15] = failed_connect_challenges */
  19,   /* field[19] = mem_pool_msg_in_use */
  16,   /* field[16] = micro_sec_avg_latency */
  18,   /* field[18] = micro_sec_max_latency */
  17,   /* field[17] = micro_sec_min_latency */
  13,   /* field[13] = missed_pkts_recv */
  8,   /* field[8] = msgs_recv */
  6,   /* field[6] = msgs_sent */
  7,   /* field[7] = msgs_sent_failed */
  3,   /* field[3] = pkts_abandoned */
  5,   /* field[5] = pkts_resent */
  2,   /* field[2] = stats_udp */
  12,   /* field[12] = unknown_conn_pkts_recv */
};
static const ProtobufCIntRange cmsg_client_connection_stats__stats__vconn__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 20 }
};
const ProtobufCMessageDescriptor cmsg_client_connection_stats__stats__vconn__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientConnectionStats.Stats_VConn",
  "StatsVConn",
  "CMsgClientConnectionStats__StatsVConn",
  "",
  sizeof(CMsgClientConnectionStats__StatsVConn),
  20,
  cmsg_client_connection_stats__stats__vconn__field_descriptors,
  cmsg_client_connection_stats__stats__vconn__field_indices_by_name,
  1,  cmsg_client_connection_stats__stats__vconn__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_connection_stats__field_descriptors[2] =
{
  {
    "stats_logon",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientConnectionStats, stats_logon),
    &cmsg_client_connection_stats__stats__logon__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "stats_vconn",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientConnectionStats, stats_vconn),
    &cmsg_client_connection_stats__stats__vconn__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_connection_stats__field_indices_by_name[] = {
  0,   /* field[0] = stats_logon */
  1,   /* field[1] = stats_vconn */
};
static const ProtobufCIntRange cmsg_client_connection_stats__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_connection_stats__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientConnectionStats",
  "CMsgClientConnectionStats",
  "CMsgClientConnectionStats",
  "",
  sizeof(CMsgClientConnectionStats),
  2,
  cmsg_client_connection_stats__field_descriptors,
  cmsg_client_connection_stats__field_indices_by_name,
  1,  cmsg_client_connection_stats__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_servers_available__server__types__available__field_descriptors[2] =
{
  {
    "server",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientServersAvailable__ServerTypesAvailable, has_server),
    offsetof(CMsgClientServersAvailable__ServerTypesAvailable, server),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "changed",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientServersAvailable__ServerTypesAvailable, has_changed),
    offsetof(CMsgClientServersAvailable__ServerTypesAvailable, changed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_servers_available__server__types__available__field_indices_by_name[] = {
  1,   /* field[1] = changed */
  0,   /* field[0] = server */
};
static const ProtobufCIntRange cmsg_client_servers_available__server__types__available__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_servers_available__server__types__available__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientServersAvailable.Server_Types_Available",
  "ServerTypesAvailable",
  "CMsgClientServersAvailable__ServerTypesAvailable",
  "",
  sizeof(CMsgClientServersAvailable__ServerTypesAvailable),
  2,
  cmsg_client_servers_available__server__types__available__field_descriptors,
  cmsg_client_servers_available__server__types__available__field_indices_by_name,
  1,  cmsg_client_servers_available__server__types__available__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_servers_available__field_descriptors[2] =
{
  {
    "server_types_available",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientServersAvailable, n_server_types_available),
    offsetof(CMsgClientServersAvailable, server_types_available),
    &cmsg_client_servers_available__server__types__available__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_type_for_auth_services",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientServersAvailable, has_server_type_for_auth_services),
    offsetof(CMsgClientServersAvailable, server_type_for_auth_services),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_servers_available__field_indices_by_name[] = {
  1,   /* field[1] = server_type_for_auth_services */
  0,   /* field[0] = server_types_available */
};
static const ProtobufCIntRange cmsg_client_servers_available__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_servers_available__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientServersAvailable",
  "CMsgClientServersAvailable",
  "CMsgClientServersAvailable",
  "",
  sizeof(CMsgClientServersAvailable),
  2,
  cmsg_client_servers_available__field_descriptors,
  cmsg_client_servers_available__field_indices_by_name,
  1,  cmsg_client_servers_available__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_report_overlay_detour_failure__field_descriptors[1] =
{
  {
    "failure_strings",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_STRING,
    offsetof(CMsgClientReportOverlayDetourFailure, n_failure_strings),
    offsetof(CMsgClientReportOverlayDetourFailure, failure_strings),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_report_overlay_detour_failure__field_indices_by_name[] = {
  0,   /* field[0] = failure_strings */
};
static const ProtobufCIntRange cmsg_client_report_overlay_detour_failure__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_report_overlay_detour_failure__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientReportOverlayDetourFailure",
  "CMsgClientReportOverlayDetourFailure",
  "CMsgClientReportOverlayDetourFailure",
  "",
  sizeof(CMsgClientReportOverlayDetourFailure),
  1,
  cmsg_client_report_overlay_detour_failure__field_descriptors,
  cmsg_client_report_overlay_detour_failure__field_indices_by_name,
  1,  cmsg_client_report_overlay_detour_failure__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_request_encrypted_app_ticket__field_descriptors[2] =
{
  {
    "app_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientRequestEncryptedAppTicket, has_app_id),
    offsetof(CMsgClientRequestEncryptedAppTicket, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "userdata",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientRequestEncryptedAppTicket, has_userdata),
    offsetof(CMsgClientRequestEncryptedAppTicket, userdata),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_request_encrypted_app_ticket__field_indices_by_name[] = {
  0,   /* field[0] = app_id */
  1,   /* field[1] = userdata */
};
static const ProtobufCIntRange cmsg_client_request_encrypted_app_ticket__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_request_encrypted_app_ticket__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRequestEncryptedAppTicket",
  "CMsgClientRequestEncryptedAppTicket",
  "CMsgClientRequestEncryptedAppTicket",
  "",
  sizeof(CMsgClientRequestEncryptedAppTicket),
  2,
  cmsg_client_request_encrypted_app_ticket__field_descriptors,
  cmsg_client_request_encrypted_app_ticket__field_indices_by_name,
  1,  cmsg_client_request_encrypted_app_ticket__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_request_encrypted_app_ticket_response__eresult__default_value = 2;
static const ProtobufCFieldDescriptor cmsg_client_request_encrypted_app_ticket_response__field_descriptors[3] =
{
  {
    "app_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientRequestEncryptedAppTicketResponse, has_app_id),
    offsetof(CMsgClientRequestEncryptedAppTicketResponse, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "eresult",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientRequestEncryptedAppTicketResponse, has_eresult),
    offsetof(CMsgClientRequestEncryptedAppTicketResponse, eresult),
    NULL,
    &cmsg_client_request_encrypted_app_ticket_response__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "encrypted_app_ticket",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientRequestEncryptedAppTicketResponse, encrypted_app_ticket),
    &encrypted_app_ticket__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_request_encrypted_app_ticket_response__field_indices_by_name[] = {
  0,   /* field[0] = app_id */
  2,   /* field[2] = encrypted_app_ticket */
  1,   /* field[1] = eresult */
};
static const ProtobufCIntRange cmsg_client_request_encrypted_app_ticket_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_request_encrypted_app_ticket_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRequestEncryptedAppTicketResponse",
  "CMsgClientRequestEncryptedAppTicketResponse",
  "CMsgClientRequestEncryptedAppTicketResponse",
  "",
  sizeof(CMsgClientRequestEncryptedAppTicketResponse),
  3,
  cmsg_client_request_encrypted_app_ticket_response__field_descriptors,
  cmsg_client_request_encrypted_app_ticket_response__field_indices_by_name,
  1,  cmsg_client_request_encrypted_app_ticket_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_wallet_info_update__field_descriptors[7] =
{
  {
    "has_wallet",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientWalletInfoUpdate, has_has_wallet),
    offsetof(CMsgClientWalletInfoUpdate, has_wallet),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "balance",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientWalletInfoUpdate, has_balance),
    offsetof(CMsgClientWalletInfoUpdate, balance),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "currency",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientWalletInfoUpdate, has_currency),
    offsetof(CMsgClientWalletInfoUpdate, currency),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "balance_delayed",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientWalletInfoUpdate, has_balance_delayed),
    offsetof(CMsgClientWalletInfoUpdate, balance_delayed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "balance64",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT64,
    offsetof(CMsgClientWalletInfoUpdate, has_balance64),
    offsetof(CMsgClientWalletInfoUpdate, balance64),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "balance64_delayed",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT64,
    offsetof(CMsgClientWalletInfoUpdate, has_balance64_delayed),
    offsetof(CMsgClientWalletInfoUpdate, balance64_delayed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "realm",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientWalletInfoUpdate, has_realm),
    offsetof(CMsgClientWalletInfoUpdate, realm),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_wallet_info_update__field_indices_by_name[] = {
  1,   /* field[1] = balance */
  4,   /* field[4] = balance64 */
  5,   /* field[5] = balance64_delayed */
  3,   /* field[3] = balance_delayed */
  2,   /* field[2] = currency */
  0,   /* field[0] = has_wallet */
  6,   /* field[6] = realm */
};
static const ProtobufCIntRange cmsg_client_wallet_info_update__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cmsg_client_wallet_info_update__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientWalletInfoUpdate",
  "CMsgClientWalletInfoUpdate",
  "CMsgClientWalletInfoUpdate",
  "",
  sizeof(CMsgClientWalletInfoUpdate),
  7,
  cmsg_client_wallet_info_update__field_descriptors,
  cmsg_client_wallet_info_update__field_indices_by_name,
  1,  cmsg_client_wallet_info_update__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_amget_clan_officers__field_descriptors[1] =
{
  {
    "steamid_clan",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientAMGetClanOfficers, has_steamid_clan),
    offsetof(CMsgClientAMGetClanOfficers, steamid_clan),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_amget_clan_officers__field_indices_by_name[] = {
  0,   /* field[0] = steamid_clan */
};
static const ProtobufCIntRange cmsg_client_amget_clan_officers__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_amget_clan_officers__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAMGetClanOfficers",
  "CMsgClientAMGetClanOfficers",
  "CMsgClientAMGetClanOfficers",
  "",
  sizeof(CMsgClientAMGetClanOfficers),
  1,
  cmsg_client_amget_clan_officers__field_descriptors,
  cmsg_client_amget_clan_officers__field_indices_by_name,
  1,  cmsg_client_amget_clan_officers__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_amget_clan_officers_response__eresult__default_value = 2;
static const ProtobufCFieldDescriptor cmsg_client_amget_clan_officers_response__field_descriptors[3] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientAMGetClanOfficersResponse, has_eresult),
    offsetof(CMsgClientAMGetClanOfficersResponse, eresult),
    NULL,
    &cmsg_client_amget_clan_officers_response__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_clan",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientAMGetClanOfficersResponse, has_steamid_clan),
    offsetof(CMsgClientAMGetClanOfficersResponse, steamid_clan),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "officer_count",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientAMGetClanOfficersResponse, has_officer_count),
    offsetof(CMsgClientAMGetClanOfficersResponse, officer_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_amget_clan_officers_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
  2,   /* field[2] = officer_count */
  1,   /* field[1] = steamid_clan */
};
static const ProtobufCIntRange cmsg_client_amget_clan_officers_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_amget_clan_officers_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAMGetClanOfficersResponse",
  "CMsgClientAMGetClanOfficersResponse",
  "CMsgClientAMGetClanOfficersResponse",
  "",
  sizeof(CMsgClientAMGetClanOfficersResponse),
  3,
  cmsg_client_amget_clan_officers_response__field_descriptors,
  cmsg_client_amget_clan_officers_response__field_indices_by_name,
  1,  cmsg_client_amget_clan_officers_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_amget_persona_name_history__id_instance__field_descriptors[1] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientAMGetPersonaNameHistory__IdInstance, has_steamid),
    offsetof(CMsgClientAMGetPersonaNameHistory__IdInstance, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_amget_persona_name_history__id_instance__field_indices_by_name[] = {
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cmsg_client_amget_persona_name_history__id_instance__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history__id_instance__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAMGetPersonaNameHistory.IdInstance",
  "IdInstance",
  "CMsgClientAMGetPersonaNameHistory__IdInstance",
  "",
  sizeof(CMsgClientAMGetPersonaNameHistory__IdInstance),
  1,
  cmsg_client_amget_persona_name_history__id_instance__field_descriptors,
  cmsg_client_amget_persona_name_history__id_instance__field_indices_by_name,
  1,  cmsg_client_amget_persona_name_history__id_instance__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_amget_persona_name_history__field_descriptors[2] =
{
  {
    "id_count",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientAMGetPersonaNameHistory, has_id_count),
    offsetof(CMsgClientAMGetPersonaNameHistory, id_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "Ids",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientAMGetPersonaNameHistory, n_ids),
    offsetof(CMsgClientAMGetPersonaNameHistory, ids),
    &cmsg_client_amget_persona_name_history__id_instance__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_amget_persona_name_history__field_indices_by_name[] = {
  1,   /* field[1] = Ids */
  0,   /* field[0] = id_count */
};
static const ProtobufCIntRange cmsg_client_amget_persona_name_history__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAMGetPersonaNameHistory",
  "CMsgClientAMGetPersonaNameHistory",
  "CMsgClientAMGetPersonaNameHistory",
  "",
  sizeof(CMsgClientAMGetPersonaNameHistory),
  2,
  cmsg_client_amget_persona_name_history__field_descriptors,
  cmsg_client_amget_persona_name_history__field_indices_by_name,
  1,  cmsg_client_amget_persona_name_history__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__field_descriptors[2] =
{
  {
    "name_since",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED32,
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance, has_name_since),
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance, name_since),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__field_indices_by_name[] = {
  1,   /* field[1] = name */
  0,   /* field[0] = name_since */
};
static const ProtobufCIntRange cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance.NameInstance",
  "NameInstance",
  "CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance",
  "",
  sizeof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance),
  2,
  cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__field_descriptors,
  cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__field_indices_by_name,
  1,  cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_amget_persona_name_history_response__name_table_instance__eresult__default_value = 2;
static const ProtobufCFieldDescriptor cmsg_client_amget_persona_name_history_response__name_table_instance__field_descriptors[3] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance, has_eresult),
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance, eresult),
    NULL,
    &cmsg_client_amget_persona_name_history_response__name_table_instance__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance, has_steamid),
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "names",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance, n_names),
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance, names),
    &cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_amget_persona_name_history_response__name_table_instance__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
  2,   /* field[2] = names */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cmsg_client_amget_persona_name_history_response__name_table_instance__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history_response__name_table_instance__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAMGetPersonaNameHistoryResponse.NameTableInstance",
  "NameTableInstance",
  "CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance",
  "",
  sizeof(CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance),
  3,
  cmsg_client_amget_persona_name_history_response__name_table_instance__field_descriptors,
  cmsg_client_amget_persona_name_history_response__name_table_instance__field_indices_by_name,
  1,  cmsg_client_amget_persona_name_history_response__name_table_instance__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_amget_persona_name_history_response__field_descriptors[1] =
{
  {
    "responses",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse, n_responses),
    offsetof(CMsgClientAMGetPersonaNameHistoryResponse, responses),
    &cmsg_client_amget_persona_name_history_response__name_table_instance__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_amget_persona_name_history_response__field_indices_by_name[] = {
  0,   /* field[0] = responses */
};
static const ProtobufCIntRange cmsg_client_amget_persona_name_history_response__number_ranges[1 + 1] =
{
  { 2, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAMGetPersonaNameHistoryResponse",
  "CMsgClientAMGetPersonaNameHistoryResponse",
  "CMsgClientAMGetPersonaNameHistoryResponse",
  "",
  sizeof(CMsgClientAMGetPersonaNameHistoryResponse),
  1,
  cmsg_client_amget_persona_name_history_response__field_descriptors,
  cmsg_client_amget_persona_name_history_response__field_indices_by_name,
  1,  cmsg_client_amget_persona_name_history_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_deregister_with_server__field_descriptors[2] =
{
  {
    "eservertype",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientDeregisterWithServer, has_eservertype),
    offsetof(CMsgClientDeregisterWithServer, eservertype),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "app_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientDeregisterWithServer, has_app_id),
    offsetof(CMsgClientDeregisterWithServer, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_deregister_with_server__field_indices_by_name[] = {
  1,   /* field[1] = app_id */
  0,   /* field[0] = eservertype */
};
static const ProtobufCIntRange cmsg_client_deregister_with_server__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_deregister_with_server__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientDeregisterWithServer",
  "CMsgClientDeregisterWithServer",
  "CMsgClientDeregisterWithServer",
  "",
  sizeof(CMsgClientDeregisterWithServer),
  2,
  cmsg_client_deregister_with_server__field_descriptors,
  cmsg_client_deregister_with_server__field_indices_by_name,
  1,  cmsg_client_deregister_with_server__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_clan_state__name_info__field_descriptors[2] =
{
  {
    "clan_name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientClanState__NameInfo, clan_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sha_avatar",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientClanState__NameInfo, has_sha_avatar),
    offsetof(CMsgClientClanState__NameInfo, sha_avatar),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_clan_state__name_info__field_indices_by_name[] = {
  0,   /* field[0] = clan_name */
  1,   /* field[1] = sha_avatar */
};
static const ProtobufCIntRange cmsg_client_clan_state__name_info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_clan_state__name_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientClanState.NameInfo",
  "NameInfo",
  "CMsgClientClanState__NameInfo",
  "",
  sizeof(CMsgClientClanState__NameInfo),
  2,
  cmsg_client_clan_state__name_info__field_descriptors,
  cmsg_client_clan_state__name_info__field_indices_by_name,
  1,  cmsg_client_clan_state__name_info__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_clan_state__user_counts__field_descriptors[5] =
{
  {
    "members",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientClanState__UserCounts, has_members),
    offsetof(CMsgClientClanState__UserCounts, members),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "online",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientClanState__UserCounts, has_online),
    offsetof(CMsgClientClanState__UserCounts, online),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chatting",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientClanState__UserCounts, has_chatting),
    offsetof(CMsgClientClanState__UserCounts, chatting),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "in_game",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientClanState__UserCounts, has_in_game),
    offsetof(CMsgClientClanState__UserCounts, in_game),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_room_members",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientClanState__UserCounts, has_chat_room_members),
    offsetof(CMsgClientClanState__UserCounts, chat_room_members),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_clan_state__user_counts__field_indices_by_name[] = {
  4,   /* field[4] = chat_room_members */
  2,   /* field[2] = chatting */
  3,   /* field[3] = in_game */
  0,   /* field[0] = members */
  1,   /* field[1] = online */
};
static const ProtobufCIntRange cmsg_client_clan_state__user_counts__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cmsg_client_clan_state__user_counts__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientClanState.UserCounts",
  "UserCounts",
  "CMsgClientClanState__UserCounts",
  "",
  sizeof(CMsgClientClanState__UserCounts),
  5,
  cmsg_client_clan_state__user_counts__field_descriptors,
  cmsg_client_clan_state__user_counts__field_indices_by_name,
  1,  cmsg_client_clan_state__user_counts__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_clan_state__event__field_descriptors[5] =
{
  {
    "gid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientClanState__Event, has_gid),
    offsetof(CMsgClientClanState__Event, gid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "event_time",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientClanState__Event, has_event_time),
    offsetof(CMsgClientClanState__Event, event_time),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "headline",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientClanState__Event, headline),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_id",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientClanState__Event, has_game_id),
    offsetof(CMsgClientClanState__Event, game_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "just_posted",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientClanState__Event, has_just_posted),
    offsetof(CMsgClientClanState__Event, just_posted),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_clan_state__event__field_indices_by_name[] = {
  1,   /* field[1] = event_time */
  3,   /* field[3] = game_id */
  0,   /* field[0] = gid */
  2,   /* field[2] = headline */
  4,   /* field[4] = just_posted */
};
static const ProtobufCIntRange cmsg_client_clan_state__event__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cmsg_client_clan_state__event__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientClanState.Event",
  "Event",
  "CMsgClientClanState__Event",
  "",
  sizeof(CMsgClientClanState__Event),
  5,
  cmsg_client_clan_state__event__field_descriptors,
  cmsg_client_clan_state__event__field_indices_by_name,
  1,  cmsg_client_clan_state__event__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_clan_state__field_descriptors[7] =
{
  {
    "steamid_clan",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientClanState, has_steamid_clan),
    offsetof(CMsgClientClanState, steamid_clan),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "clan_account_flags",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientClanState, has_clan_account_flags),
    offsetof(CMsgClientClanState, clan_account_flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name_info",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientClanState, name_info),
    &cmsg_client_clan_state__name_info__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "user_counts",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientClanState, user_counts),
    &cmsg_client_clan_state__user_counts__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "events",
    6,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientClanState, n_events),
    offsetof(CMsgClientClanState, events),
    &cmsg_client_clan_state__event__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "announcements",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientClanState, n_announcements),
    offsetof(CMsgClientClanState, announcements),
    &cmsg_client_clan_state__event__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_room_private",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientClanState, has_chat_room_private),
    offsetof(CMsgClientClanState, chat_room_private),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_clan_state__field_indices_by_name[] = {
  5,   /* field[5] = announcements */
  6,   /* field[6] = chat_room_private */
  1,   /* field[1] = clan_account_flags */
  4,   /* field[4] = events */
  2,   /* field[2] = name_info */
  0,   /* field[0] = steamid_clan */
  3,   /* field[3] = user_counts */
};
static const ProtobufCIntRange cmsg_client_clan_state__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cmsg_client_clan_state__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientClanState",
  "CMsgClientClanState",
  "CMsgClientClanState",
  "",
  sizeof(CMsgClientClanState),
  7,
  cmsg_client_clan_state__field_descriptors,
  cmsg_client_clan_state__field_indices_by_name,
  2,  cmsg_client_clan_state__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
