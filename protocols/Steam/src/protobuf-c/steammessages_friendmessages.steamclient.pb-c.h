/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_friendmessages.steamclient.proto */

#ifndef PROTOBUF_C_steammessages_5ffriendmessages_2esteamclient_2eproto__INCLUDED
#define PROTOBUF_C_steammessages_5ffriendmessages_2esteamclient_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "steammessages_base.pb-c.h"
#include "steammessages_unified_base.steamclient.pb-c.h"

struct CFriendMessagesGetRecentMessagesRequest;
struct CFriendMessagesGetRecentMessagesResponse;
struct CFriendMessagesGetRecentMessagesResponse__FriendMessage;
struct CFriendMessagesGetRecentMessagesResponse__FriendMessage__MessageReaction;
struct CFriendsMessagesGetActiveMessageSessionsRequest;
struct CFriendsMessagesGetActiveMessageSessionsResponse;
struct CFriendsMessagesGetActiveMessageSessionsResponse__FriendMessageSession;
struct CFriendMessagesSendMessageRequest;
struct CFriendMessagesSendMessageResponse;
struct CFriendMessagesAckMessageNotification;
struct CFriendMessagesIsInFriendsUIBetaRequest;
struct CFriendMessagesIsInFriendsUIBetaResponse;
struct CFriendMessagesUpdateMessageReactionRequest;
struct CFriendMessagesUpdateMessageReactionResponse;
struct CFriendMessagesIncomingMessageNotification;
struct CFriendMessagesMessageReactionNotification;


/* --- enums --- */

typedef enum _EMessageReactionType {
  EMESSAGE_REACTION_TYPE__k_EMessageReactionType_Invalid = 0,
  EMESSAGE_REACTION_TYPE__k_EMessageReactionType_Emoticon = 1,
  EMESSAGE_REACTION_TYPE__k_EMessageReactionType_Sticker = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EMESSAGE_REACTION_TYPE)
} EMessageReactionType;

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    emessage_reaction_type__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__get_recent_messages__request__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__get_recent_messages__response__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__get_recent_messages__response__friend_message__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__get_recent_messages__response__friend_message__message_reaction__descriptor;
extern const ProtobufCMessageDescriptor cfriends_messages__get_active_message_sessions__request__descriptor;
extern const ProtobufCMessageDescriptor cfriends_messages__get_active_message_sessions__response__descriptor;
extern const ProtobufCMessageDescriptor cfriends_messages__get_active_message_sessions__response__friend_message_session__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__send_message__request__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__send_message__response__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__ack_message__notification__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__is_in_friends_uibeta__request__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__is_in_friends_uibeta__response__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__update_message_reaction__request__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__update_message_reaction__response__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__incoming_message__notification__descriptor;
extern const ProtobufCMessageDescriptor cfriend_messages__message_reaction__notification__descriptor;
extern const ProtobufCServiceDescriptor friend_messages__descriptor;
extern const ProtobufCServiceDescriptor friend_messages_client__descriptor;

/* --- messages --- */

extern "C" void message_init_generic(const ProtobufCMessageDescriptor * desc, ProtobufCMessage * message);

struct CFriendMessagesGetRecentMessagesRequest : public ProtobufCppMessage
{
  CFriendMessagesGetRecentMessagesRequest() :
     ProtobufCppMessage(cfriend_messages__get_recent_messages__request__descriptor)
  {}

  protobuf_c_boolean has_steamid1;
  uint64_t steamid1;
  protobuf_c_boolean has_steamid2;
  uint64_t steamid2;
  protobuf_c_boolean has_count;
  uint32_t count;
  protobuf_c_boolean has_most_recent_conversation;
  protobuf_c_boolean most_recent_conversation;
  protobuf_c_boolean has_rtime32_start_time;
  uint32_t rtime32_start_time;
  protobuf_c_boolean has_bbcode_format;
  protobuf_c_boolean bbcode_format;
  protobuf_c_boolean has_start_ordinal;
  uint32_t start_ordinal;
  protobuf_c_boolean has_time_last;
  uint32_t time_last;
  protobuf_c_boolean has_ordinal_last;
  uint32_t ordinal_last;
};

struct CFriendMessagesGetRecentMessagesResponse__FriendMessage__MessageReaction : public ProtobufCppMessage
{
  CFriendMessagesGetRecentMessagesResponse__FriendMessage__MessageReaction() :
     ProtobufCppMessage(cfriend_messages__get_recent_messages__response__friend_message__message_reaction__descriptor)
  {}

  protobuf_c_boolean has_reaction_type;
  EMessageReactionType reaction_type;
  char *reaction;
  size_t n_reactors;
  uint32_t *reactors;
};

struct CFriendMessagesGetRecentMessagesResponse__FriendMessage : public ProtobufCppMessage
{
  CFriendMessagesGetRecentMessagesResponse__FriendMessage() :
     ProtobufCppMessage(cfriend_messages__get_recent_messages__response__friend_message__descriptor)
  {}

  protobuf_c_boolean has_accountid;
  uint32_t accountid;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  char *message;
  protobuf_c_boolean has_ordinal;
  uint32_t ordinal;
  size_t n_reactions;
  CFriendMessagesGetRecentMessagesResponse__FriendMessage__MessageReaction **reactions;
};

struct CFriendMessagesGetRecentMessagesResponse : public ProtobufCppMessage
{
  CFriendMessagesGetRecentMessagesResponse() :
     ProtobufCppMessage(cfriend_messages__get_recent_messages__response__descriptor)
  {}

  size_t n_messages;
  CFriendMessagesGetRecentMessagesResponse__FriendMessage **messages;
  protobuf_c_boolean has_more_available;
  protobuf_c_boolean more_available;
};

struct CFriendsMessagesGetActiveMessageSessionsRequest : public ProtobufCppMessage
{
  CFriendsMessagesGetActiveMessageSessionsRequest() :
     ProtobufCppMessage(cfriends_messages__get_active_message_sessions__request__descriptor)
  {}

  protobuf_c_boolean has_lastmessage_since;
  uint32_t lastmessage_since;
  protobuf_c_boolean has_only_sessions_with_messages;
  protobuf_c_boolean only_sessions_with_messages;
};

struct CFriendsMessagesGetActiveMessageSessionsResponse__FriendMessageSession : public ProtobufCppMessage
{
  CFriendsMessagesGetActiveMessageSessionsResponse__FriendMessageSession() :
     ProtobufCppMessage(cfriends_messages__get_active_message_sessions__response__friend_message_session__descriptor)
  {}

  protobuf_c_boolean has_accountid_friend;
  uint32_t accountid_friend;
  protobuf_c_boolean has_last_message;
  uint32_t last_message;
  protobuf_c_boolean has_last_view;
  uint32_t last_view;
  protobuf_c_boolean has_unread_message_count;
  uint32_t unread_message_count;
};

struct CFriendsMessagesGetActiveMessageSessionsResponse : public ProtobufCppMessage
{
  CFriendsMessagesGetActiveMessageSessionsResponse() :
     ProtobufCppMessage(cfriends_messages__get_active_message_sessions__response__descriptor)
  {}

  size_t n_message_sessions;
  CFriendsMessagesGetActiveMessageSessionsResponse__FriendMessageSession **message_sessions;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
};

struct CFriendMessagesSendMessageRequest : public ProtobufCppMessage
{
  CFriendMessagesSendMessageRequest() :
     ProtobufCppMessage(cfriend_messages__send_message__request__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  protobuf_c_boolean has_chat_entry_type;
  int32_t chat_entry_type;
  char *message;
  protobuf_c_boolean has_contains_bbcode;
  protobuf_c_boolean contains_bbcode;
  protobuf_c_boolean has_echo_to_sender;
  protobuf_c_boolean echo_to_sender;
  protobuf_c_boolean has_low_priority;
  protobuf_c_boolean low_priority;
  char *client_message_id;
};

struct CFriendMessagesSendMessageResponse : public ProtobufCppMessage
{
  CFriendMessagesSendMessageResponse() :
     ProtobufCppMessage(cfriend_messages__send_message__response__descriptor)
  {}

  char *modified_message;
  protobuf_c_boolean has_server_timestamp;
  uint32_t server_timestamp;
  protobuf_c_boolean has_ordinal;
  uint32_t ordinal;
  char *message_without_bb_code;
};

struct CFriendMessagesAckMessageNotification : public ProtobufCppMessage
{
  CFriendMessagesAckMessageNotification() :
     ProtobufCppMessage(cfriend_messages__ack_message__notification__descriptor)
  {}

  protobuf_c_boolean has_steamid_partner;
  uint64_t steamid_partner;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
};

struct CFriendMessagesIsInFriendsUIBetaRequest : public ProtobufCppMessage
{
  CFriendMessagesIsInFriendsUIBetaRequest() :
     ProtobufCppMessage(cfriend_messages__is_in_friends_uibeta__request__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
};

struct CFriendMessagesIsInFriendsUIBetaResponse : public ProtobufCppMessage
{
  CFriendMessagesIsInFriendsUIBetaResponse() :
     ProtobufCppMessage(cfriend_messages__is_in_friends_uibeta__response__descriptor)
  {}

  protobuf_c_boolean has_online_in_friendsui;
  protobuf_c_boolean online_in_friendsui;
  protobuf_c_boolean has_has_used_friendsui;
  protobuf_c_boolean has_used_friendsui;
};

struct CFriendMessagesUpdateMessageReactionRequest : public ProtobufCppMessage
{
  CFriendMessagesUpdateMessageReactionRequest() :
     ProtobufCppMessage(cfriend_messages__update_message_reaction__request__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  protobuf_c_boolean has_server_timestamp;
  uint32_t server_timestamp;
  protobuf_c_boolean has_ordinal;
  uint32_t ordinal;
  protobuf_c_boolean has_reaction_type;
  EMessageReactionType reaction_type;
  char *reaction;
  protobuf_c_boolean has_is_add;
  protobuf_c_boolean is_add;
};

struct CFriendMessagesUpdateMessageReactionResponse : public ProtobufCppMessage
{
  CFriendMessagesUpdateMessageReactionResponse() :
     ProtobufCppMessage(cfriend_messages__update_message_reaction__response__descriptor)
  {}

  size_t n_reactors;
  uint32_t *reactors;
};

struct CFriendMessagesIncomingMessageNotification : public ProtobufCppMessage
{
  CFriendMessagesIncomingMessageNotification() :
     ProtobufCppMessage(cfriend_messages__incoming_message__notification__descriptor)
  {}

  protobuf_c_boolean has_steamid_friend;
  uint64_t steamid_friend;
  protobuf_c_boolean has_chat_entry_type;
  int32_t chat_entry_type;
  protobuf_c_boolean has_from_limited_account;
  protobuf_c_boolean from_limited_account;
  char *message;
  protobuf_c_boolean has_rtime32_server_timestamp;
  uint32_t rtime32_server_timestamp;
  protobuf_c_boolean has_ordinal;
  uint32_t ordinal;
  protobuf_c_boolean has_local_echo;
  protobuf_c_boolean local_echo;
  char *message_no_bbcode;
  protobuf_c_boolean has_low_priority;
  protobuf_c_boolean low_priority;
};

struct CFriendMessagesMessageReactionNotification : public ProtobufCppMessage
{
  CFriendMessagesMessageReactionNotification() :
     ProtobufCppMessage(cfriend_messages__message_reaction__notification__descriptor)
  {}

  protobuf_c_boolean has_steamid_friend;
  uint64_t steamid_friend;
  protobuf_c_boolean has_server_timestamp;
  uint32_t server_timestamp;
  protobuf_c_boolean has_ordinal;
  uint32_t ordinal;
  protobuf_c_boolean has_reactor;
  uint64_t reactor;
  protobuf_c_boolean has_reaction_type;
  EMessageReactionType reaction_type;
  char *reaction;
  protobuf_c_boolean has_is_add;
  protobuf_c_boolean is_add;
};

size_t cfriend_messages__get_recent_messages__request__get_packed_size
                     (const CFriendMessagesGetRecentMessagesRequest   *message);
size_t cfriend_messages__get_recent_messages__request__pack
                     (const CFriendMessagesGetRecentMessagesRequest   *message,
                      uint8_t             *out);
size_t cfriend_messages__get_recent_messages__request__pack_to_buffer
                     (const CFriendMessagesGetRecentMessagesRequest   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesGetRecentMessagesRequest *
       cfriend_messages__get_recent_messages__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__get_recent_messages__request__free_unpacked
                     (CFriendMessagesGetRecentMessagesRequest *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__get_recent_messages__response__get_packed_size
                     (const CFriendMessagesGetRecentMessagesResponse   *message);
size_t cfriend_messages__get_recent_messages__response__pack
                     (const CFriendMessagesGetRecentMessagesResponse   *message,
                      uint8_t             *out);
size_t cfriend_messages__get_recent_messages__response__pack_to_buffer
                     (const CFriendMessagesGetRecentMessagesResponse   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesGetRecentMessagesResponse *
       cfriend_messages__get_recent_messages__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__get_recent_messages__response__free_unpacked
                     (CFriendMessagesGetRecentMessagesResponse *message,
                      ProtobufCAllocator *allocator);
size_t cfriends_messages__get_active_message_sessions__request__get_packed_size
                     (const CFriendsMessagesGetActiveMessageSessionsRequest   *message);
size_t cfriends_messages__get_active_message_sessions__request__pack
                     (const CFriendsMessagesGetActiveMessageSessionsRequest   *message,
                      uint8_t             *out);
size_t cfriends_messages__get_active_message_sessions__request__pack_to_buffer
                     (const CFriendsMessagesGetActiveMessageSessionsRequest   *message,
                      ProtobufCBuffer     *buffer);
CFriendsMessagesGetActiveMessageSessionsRequest *
       cfriends_messages__get_active_message_sessions__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriends_messages__get_active_message_sessions__request__free_unpacked
                     (CFriendsMessagesGetActiveMessageSessionsRequest *message,
                      ProtobufCAllocator *allocator);
size_t cfriends_messages__get_active_message_sessions__response__get_packed_size
                     (const CFriendsMessagesGetActiveMessageSessionsResponse   *message);
size_t cfriends_messages__get_active_message_sessions__response__pack
                     (const CFriendsMessagesGetActiveMessageSessionsResponse   *message,
                      uint8_t             *out);
size_t cfriends_messages__get_active_message_sessions__response__pack_to_buffer
                     (const CFriendsMessagesGetActiveMessageSessionsResponse   *message,
                      ProtobufCBuffer     *buffer);
CFriendsMessagesGetActiveMessageSessionsResponse *
       cfriends_messages__get_active_message_sessions__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriends_messages__get_active_message_sessions__response__free_unpacked
                     (CFriendsMessagesGetActiveMessageSessionsResponse *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__send_message__request__get_packed_size
                     (const CFriendMessagesSendMessageRequest   *message);
size_t cfriend_messages__send_message__request__pack
                     (const CFriendMessagesSendMessageRequest   *message,
                      uint8_t             *out);
size_t cfriend_messages__send_message__request__pack_to_buffer
                     (const CFriendMessagesSendMessageRequest   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesSendMessageRequest *
       cfriend_messages__send_message__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__send_message__request__free_unpacked
                     (CFriendMessagesSendMessageRequest *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__send_message__response__get_packed_size
                     (const CFriendMessagesSendMessageResponse   *message);
size_t cfriend_messages__send_message__response__pack
                     (const CFriendMessagesSendMessageResponse   *message,
                      uint8_t             *out);
size_t cfriend_messages__send_message__response__pack_to_buffer
                     (const CFriendMessagesSendMessageResponse   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesSendMessageResponse *
       cfriend_messages__send_message__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__send_message__response__free_unpacked
                     (CFriendMessagesSendMessageResponse *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__ack_message__notification__get_packed_size
                     (const CFriendMessagesAckMessageNotification   *message);
size_t cfriend_messages__ack_message__notification__pack
                     (const CFriendMessagesAckMessageNotification   *message,
                      uint8_t             *out);
size_t cfriend_messages__ack_message__notification__pack_to_buffer
                     (const CFriendMessagesAckMessageNotification   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesAckMessageNotification *
       cfriend_messages__ack_message__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__ack_message__notification__free_unpacked
                     (CFriendMessagesAckMessageNotification *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__is_in_friends_uibeta__request__get_packed_size
                     (const CFriendMessagesIsInFriendsUIBetaRequest   *message);
size_t cfriend_messages__is_in_friends_uibeta__request__pack
                     (const CFriendMessagesIsInFriendsUIBetaRequest   *message,
                      uint8_t             *out);
size_t cfriend_messages__is_in_friends_uibeta__request__pack_to_buffer
                     (const CFriendMessagesIsInFriendsUIBetaRequest   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesIsInFriendsUIBetaRequest *
       cfriend_messages__is_in_friends_uibeta__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__is_in_friends_uibeta__request__free_unpacked
                     (CFriendMessagesIsInFriendsUIBetaRequest *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__is_in_friends_uibeta__response__get_packed_size
                     (const CFriendMessagesIsInFriendsUIBetaResponse   *message);
size_t cfriend_messages__is_in_friends_uibeta__response__pack
                     (const CFriendMessagesIsInFriendsUIBetaResponse   *message,
                      uint8_t             *out);
size_t cfriend_messages__is_in_friends_uibeta__response__pack_to_buffer
                     (const CFriendMessagesIsInFriendsUIBetaResponse   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesIsInFriendsUIBetaResponse *
       cfriend_messages__is_in_friends_uibeta__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__is_in_friends_uibeta__response__free_unpacked
                     (CFriendMessagesIsInFriendsUIBetaResponse *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__update_message_reaction__request__get_packed_size
                     (const CFriendMessagesUpdateMessageReactionRequest   *message);
size_t cfriend_messages__update_message_reaction__request__pack
                     (const CFriendMessagesUpdateMessageReactionRequest   *message,
                      uint8_t             *out);
size_t cfriend_messages__update_message_reaction__request__pack_to_buffer
                     (const CFriendMessagesUpdateMessageReactionRequest   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesUpdateMessageReactionRequest *
       cfriend_messages__update_message_reaction__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__update_message_reaction__request__free_unpacked
                     (CFriendMessagesUpdateMessageReactionRequest *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__update_message_reaction__response__get_packed_size
                     (const CFriendMessagesUpdateMessageReactionResponse   *message);
size_t cfriend_messages__update_message_reaction__response__pack
                     (const CFriendMessagesUpdateMessageReactionResponse   *message,
                      uint8_t             *out);
size_t cfriend_messages__update_message_reaction__response__pack_to_buffer
                     (const CFriendMessagesUpdateMessageReactionResponse   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesUpdateMessageReactionResponse *
       cfriend_messages__update_message_reaction__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__update_message_reaction__response__free_unpacked
                     (CFriendMessagesUpdateMessageReactionResponse *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__incoming_message__notification__get_packed_size
                     (const CFriendMessagesIncomingMessageNotification   *message);
size_t cfriend_messages__incoming_message__notification__pack
                     (const CFriendMessagesIncomingMessageNotification   *message,
                      uint8_t             *out);
size_t cfriend_messages__incoming_message__notification__pack_to_buffer
                     (const CFriendMessagesIncomingMessageNotification   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesIncomingMessageNotification *
       cfriend_messages__incoming_message__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__incoming_message__notification__free_unpacked
                     (CFriendMessagesIncomingMessageNotification *message,
                      ProtobufCAllocator *allocator);
size_t cfriend_messages__message_reaction__notification__get_packed_size
                     (const CFriendMessagesMessageReactionNotification   *message);
size_t cfriend_messages__message_reaction__notification__pack
                     (const CFriendMessagesMessageReactionNotification   *message,
                      uint8_t             *out);
size_t cfriend_messages__message_reaction__notification__pack_to_buffer
                     (const CFriendMessagesMessageReactionNotification   *message,
                      ProtobufCBuffer     *buffer);
CFriendMessagesMessageReactionNotification *
       cfriend_messages__message_reaction__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cfriend_messages__message_reaction__notification__free_unpacked
                     (CFriendMessagesMessageReactionNotification *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CFriendMessagesGetRecentMessagesRequest_Closure)
                 (const CFriendMessagesGetRecentMessagesRequest *message,
                  void *closure_data);
typedef void (*CFriendMessagesGetRecentMessagesResponse__FriendMessage__MessageReaction_Closure)
                 (const CFriendMessagesGetRecentMessagesResponse__FriendMessage__MessageReaction *message,
                  void *closure_data);
typedef void (*CFriendMessagesGetRecentMessagesResponse__FriendMessage_Closure)
                 (const CFriendMessagesGetRecentMessagesResponse__FriendMessage *message,
                  void *closure_data);
typedef void (*CFriendMessagesGetRecentMessagesResponse_Closure)
                 (const CFriendMessagesGetRecentMessagesResponse *message,
                  void *closure_data);
typedef void (*CFriendsMessagesGetActiveMessageSessionsRequest_Closure)
                 (const CFriendsMessagesGetActiveMessageSessionsRequest *message,
                  void *closure_data);
typedef void (*CFriendsMessagesGetActiveMessageSessionsResponse__FriendMessageSession_Closure)
                 (const CFriendsMessagesGetActiveMessageSessionsResponse__FriendMessageSession *message,
                  void *closure_data);
typedef void (*CFriendsMessagesGetActiveMessageSessionsResponse_Closure)
                 (const CFriendsMessagesGetActiveMessageSessionsResponse *message,
                  void *closure_data);
typedef void (*CFriendMessagesSendMessageRequest_Closure)
                 (const CFriendMessagesSendMessageRequest *message,
                  void *closure_data);
typedef void (*CFriendMessagesSendMessageResponse_Closure)
                 (const CFriendMessagesSendMessageResponse *message,
                  void *closure_data);
typedef void (*CFriendMessagesAckMessageNotification_Closure)
                 (const CFriendMessagesAckMessageNotification *message,
                  void *closure_data);
typedef void (*CFriendMessagesIsInFriendsUIBetaRequest_Closure)
                 (const CFriendMessagesIsInFriendsUIBetaRequest *message,
                  void *closure_data);
typedef void (*CFriendMessagesIsInFriendsUIBetaResponse_Closure)
                 (const CFriendMessagesIsInFriendsUIBetaResponse *message,
                  void *closure_data);
typedef void (*CFriendMessagesUpdateMessageReactionRequest_Closure)
                 (const CFriendMessagesUpdateMessageReactionRequest *message,
                  void *closure_data);
typedef void (*CFriendMessagesUpdateMessageReactionResponse_Closure)
                 (const CFriendMessagesUpdateMessageReactionResponse *message,
                  void *closure_data);
typedef void (*CFriendMessagesIncomingMessageNotification_Closure)
                 (const CFriendMessagesIncomingMessageNotification *message,
                  void *closure_data);
typedef void (*CFriendMessagesMessageReactionNotification_Closure)
                 (const CFriendMessagesMessageReactionNotification *message,
                  void *closure_data);

/* --- services --- */

typedef struct FriendMessages_Service FriendMessages_Service;
struct FriendMessages_Service
{
  ProtobufCService base;
  void (*get_recent_messages)(FriendMessages_Service *service,
                              const CFriendMessagesGetRecentMessagesRequest *input,
                              CFriendMessagesGetRecentMessagesResponse_Closure closure,
                              void *closure_data);
  void (*get_active_message_sessions)(FriendMessages_Service *service,
                                      const CFriendsMessagesGetActiveMessageSessionsRequest *input,
                                      CFriendsMessagesGetActiveMessageSessionsResponse_Closure closure,
                                      void *closure_data);
  void (*send_message)(FriendMessages_Service *service,
                       const CFriendMessagesSendMessageRequest *input,
                       CFriendMessagesSendMessageResponse_Closure closure,
                       void *closure_data);
  void (*ack_message)(FriendMessages_Service *service,
                      const CFriendMessagesAckMessageNotification *input,
                      NoResponse_Closure closure,
                      void *closure_data);
  void (*is_in_friends_uibeta)(FriendMessages_Service *service,
                               const CFriendMessagesIsInFriendsUIBetaRequest *input,
                               CFriendMessagesIsInFriendsUIBetaResponse_Closure closure,
                               void *closure_data);
  void (*update_message_reaction)(FriendMessages_Service *service,
                                  const CFriendMessagesUpdateMessageReactionRequest *input,
                                  CFriendMessagesUpdateMessageReactionResponse_Closure closure,
                                  void *closure_data);
};
typedef void (*FriendMessages_ServiceDestroy)(FriendMessages_Service *);
void friend_messages__init (FriendMessages_Service *service,
                            FriendMessages_ServiceDestroy destroy);
#define FRIEND_MESSAGES__BASE_INIT \
    { &friend_messages__descriptor, protobuf_c_service_invoke_internal, NULL }
#define FRIEND_MESSAGES__INIT(function_prefix__) \
    { FRIEND_MESSAGES__BASE_INIT,\
      function_prefix__ ## get_recent_messages,\
      function_prefix__ ## get_active_message_sessions,\
      function_prefix__ ## send_message,\
      function_prefix__ ## ack_message,\
      function_prefix__ ## is_in_friends_uibeta,\
      function_prefix__ ## update_message_reaction  }
void friend_messages__get_recent_messages(ProtobufCService *service,
                                          const CFriendMessagesGetRecentMessagesRequest *input,
                                          CFriendMessagesGetRecentMessagesResponse_Closure closure,
                                          void *closure_data);
void friend_messages__get_active_message_sessions(ProtobufCService *service,
                                                  const CFriendsMessagesGetActiveMessageSessionsRequest *input,
                                                  CFriendsMessagesGetActiveMessageSessionsResponse_Closure closure,
                                                  void *closure_data);
void friend_messages__send_message(ProtobufCService *service,
                                   const CFriendMessagesSendMessageRequest *input,
                                   CFriendMessagesSendMessageResponse_Closure closure,
                                   void *closure_data);
void friend_messages__ack_message(ProtobufCService *service,
                                  const CFriendMessagesAckMessageNotification *input,
                                  NoResponse_Closure closure,
                                  void *closure_data);
void friend_messages__is_in_friends_uibeta(ProtobufCService *service,
                                           const CFriendMessagesIsInFriendsUIBetaRequest *input,
                                           CFriendMessagesIsInFriendsUIBetaResponse_Closure closure,
                                           void *closure_data);
void friend_messages__update_message_reaction(ProtobufCService *service,
                                              const CFriendMessagesUpdateMessageReactionRequest *input,
                                              CFriendMessagesUpdateMessageReactionResponse_Closure closure,
                                              void *closure_data);
typedef struct FriendMessagesClient_Service FriendMessagesClient_Service;
struct FriendMessagesClient_Service
{
  ProtobufCService base;
  void (*incoming_message)(FriendMessagesClient_Service *service,
                           const CFriendMessagesIncomingMessageNotification *input,
                           NoResponse_Closure closure,
                           void *closure_data);
  void (*notify_ack_message_echo)(FriendMessagesClient_Service *service,
                                  const CFriendMessagesAckMessageNotification *input,
                                  NoResponse_Closure closure,
                                  void *closure_data);
  void (*message_reaction)(FriendMessagesClient_Service *service,
                           const CFriendMessagesMessageReactionNotification *input,
                           NoResponse_Closure closure,
                           void *closure_data);
};
typedef void (*FriendMessagesClient_ServiceDestroy)(FriendMessagesClient_Service *);
void friend_messages_client__init (FriendMessagesClient_Service *service,
                                   FriendMessagesClient_ServiceDestroy destroy);
#define FRIEND_MESSAGES_CLIENT__BASE_INIT \
    { &friend_messages_client__descriptor, protobuf_c_service_invoke_internal, NULL }
#define FRIEND_MESSAGES_CLIENT__INIT(function_prefix__) \
    { FRIEND_MESSAGES_CLIENT__BASE_INIT,\
      function_prefix__ ## incoming_message,\
      function_prefix__ ## notify_ack_message_echo,\
      function_prefix__ ## message_reaction  }
void friend_messages_client__incoming_message(ProtobufCService *service,
                                              const CFriendMessagesIncomingMessageNotification *input,
                                              NoResponse_Closure closure,
                                              void *closure_data);
void friend_messages_client__notify_ack_message_echo(ProtobufCService *service,
                                                     const CFriendMessagesAckMessageNotification *input,
                                                     NoResponse_Closure closure,
                                                     void *closure_data);
void friend_messages_client__message_reaction(ProtobufCService *service,
                                              const CFriendMessagesMessageReactionNotification *input,
                                              NoResponse_Closure closure,
                                              void *closure_data);

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_steammessages_5ffriendmessages_2esteamclient_2eproto__INCLUDED */
