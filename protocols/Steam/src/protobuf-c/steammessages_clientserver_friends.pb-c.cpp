/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_clientserver_friends.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "steammessages_clientserver_friends.pb-c.h"
size_t cmsg_client_friend_msg__get_packed_size
                     (const CMsgClientFriendMsg *message)
{
  assert(message->descriptor == &cmsg_client_friend_msg__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_friend_msg__pack
                     (const CMsgClientFriendMsg *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_friend_msg__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_friend_msg__pack_to_buffer
                     (const CMsgClientFriendMsg *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_friend_msg__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientFriendMsg *
       cmsg_client_friend_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientFriendMsg *)
     protobuf_c_message_unpack (&cmsg_client_friend_msg__descriptor,
                                allocator, len, data);
}
void   cmsg_client_friend_msg__free_unpacked
                     (CMsgClientFriendMsg *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_friend_msg__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_friend_msg_incoming__get_packed_size
                     (const CMsgClientFriendMsgIncoming *message)
{
  assert(message->descriptor == &cmsg_client_friend_msg_incoming__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_friend_msg_incoming__pack
                     (const CMsgClientFriendMsgIncoming *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_friend_msg_incoming__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_friend_msg_incoming__pack_to_buffer
                     (const CMsgClientFriendMsgIncoming *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_friend_msg_incoming__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientFriendMsgIncoming *
       cmsg_client_friend_msg_incoming__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientFriendMsgIncoming *)
     protobuf_c_message_unpack (&cmsg_client_friend_msg_incoming__descriptor,
                                allocator, len, data);
}
void   cmsg_client_friend_msg_incoming__free_unpacked
                     (CMsgClientFriendMsgIncoming *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_friend_msg_incoming__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_add_friend__get_packed_size
                     (const CMsgClientAddFriend *message)
{
  assert(message->descriptor == &cmsg_client_add_friend__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_add_friend__pack
                     (const CMsgClientAddFriend *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_add_friend__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_add_friend__pack_to_buffer
                     (const CMsgClientAddFriend *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_add_friend__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAddFriend *
       cmsg_client_add_friend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAddFriend *)
     protobuf_c_message_unpack (&cmsg_client_add_friend__descriptor,
                                allocator, len, data);
}
void   cmsg_client_add_friend__free_unpacked
                     (CMsgClientAddFriend *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_add_friend__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_add_friend_response__get_packed_size
                     (const CMsgClientAddFriendResponse *message)
{
  assert(message->descriptor == &cmsg_client_add_friend_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_add_friend_response__pack
                     (const CMsgClientAddFriendResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_add_friend_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_add_friend_response__pack_to_buffer
                     (const CMsgClientAddFriendResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_add_friend_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAddFriendResponse *
       cmsg_client_add_friend_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAddFriendResponse *)
     protobuf_c_message_unpack (&cmsg_client_add_friend_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_add_friend_response__free_unpacked
                     (CMsgClientAddFriendResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_add_friend_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_remove_friend__get_packed_size
                     (const CMsgClientRemoveFriend *message)
{
  assert(message->descriptor == &cmsg_client_remove_friend__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_remove_friend__pack
                     (const CMsgClientRemoveFriend *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_remove_friend__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_remove_friend__pack_to_buffer
                     (const CMsgClientRemoveFriend *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_remove_friend__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRemoveFriend *
       cmsg_client_remove_friend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRemoveFriend *)
     protobuf_c_message_unpack (&cmsg_client_remove_friend__descriptor,
                                allocator, len, data);
}
void   cmsg_client_remove_friend__free_unpacked
                     (CMsgClientRemoveFriend *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_remove_friend__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_hide_friend__get_packed_size
                     (const CMsgClientHideFriend *message)
{
  assert(message->descriptor == &cmsg_client_hide_friend__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_hide_friend__pack
                     (const CMsgClientHideFriend *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_hide_friend__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_hide_friend__pack_to_buffer
                     (const CMsgClientHideFriend *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_hide_friend__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientHideFriend *
       cmsg_client_hide_friend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientHideFriend *)
     protobuf_c_message_unpack (&cmsg_client_hide_friend__descriptor,
                                allocator, len, data);
}
void   cmsg_client_hide_friend__free_unpacked
                     (CMsgClientHideFriend *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_hide_friend__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_friends_list__get_packed_size
                     (const CMsgClientFriendsList *message)
{
  assert(message->descriptor == &cmsg_client_friends_list__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_friends_list__pack
                     (const CMsgClientFriendsList *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_friends_list__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_friends_list__pack_to_buffer
                     (const CMsgClientFriendsList *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_friends_list__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientFriendsList *
       cmsg_client_friends_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientFriendsList *)
     protobuf_c_message_unpack (&cmsg_client_friends_list__descriptor,
                                allocator, len, data);
}
void   cmsg_client_friends_list__free_unpacked
                     (CMsgClientFriendsList *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_friends_list__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_friends_groups_list__get_packed_size
                     (const CMsgClientFriendsGroupsList *message)
{
  assert(message->descriptor == &cmsg_client_friends_groups_list__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_friends_groups_list__pack
                     (const CMsgClientFriendsGroupsList *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_friends_groups_list__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_friends_groups_list__pack_to_buffer
                     (const CMsgClientFriendsGroupsList *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_friends_groups_list__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientFriendsGroupsList *
       cmsg_client_friends_groups_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientFriendsGroupsList *)
     protobuf_c_message_unpack (&cmsg_client_friends_groups_list__descriptor,
                                allocator, len, data);
}
void   cmsg_client_friends_groups_list__free_unpacked
                     (CMsgClientFriendsGroupsList *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_friends_groups_list__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_player_nickname_list__get_packed_size
                     (const CMsgClientPlayerNicknameList *message)
{
  assert(message->descriptor == &cmsg_client_player_nickname_list__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_player_nickname_list__pack
                     (const CMsgClientPlayerNicknameList *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_player_nickname_list__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_player_nickname_list__pack_to_buffer
                     (const CMsgClientPlayerNicknameList *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_player_nickname_list__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientPlayerNicknameList *
       cmsg_client_player_nickname_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientPlayerNicknameList *)
     protobuf_c_message_unpack (&cmsg_client_player_nickname_list__descriptor,
                                allocator, len, data);
}
void   cmsg_client_player_nickname_list__free_unpacked
                     (CMsgClientPlayerNicknameList *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_player_nickname_list__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_set_player_nickname__get_packed_size
                     (const CMsgClientSetPlayerNickname *message)
{
  assert(message->descriptor == &cmsg_client_set_player_nickname__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_set_player_nickname__pack
                     (const CMsgClientSetPlayerNickname *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_set_player_nickname__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_set_player_nickname__pack_to_buffer
                     (const CMsgClientSetPlayerNickname *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_set_player_nickname__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientSetPlayerNickname *
       cmsg_client_set_player_nickname__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientSetPlayerNickname *)
     protobuf_c_message_unpack (&cmsg_client_set_player_nickname__descriptor,
                                allocator, len, data);
}
void   cmsg_client_set_player_nickname__free_unpacked
                     (CMsgClientSetPlayerNickname *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_set_player_nickname__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_set_player_nickname_response__get_packed_size
                     (const CMsgClientSetPlayerNicknameResponse *message)
{
  assert(message->descriptor == &cmsg_client_set_player_nickname_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_set_player_nickname_response__pack
                     (const CMsgClientSetPlayerNicknameResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_set_player_nickname_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_set_player_nickname_response__pack_to_buffer
                     (const CMsgClientSetPlayerNicknameResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_set_player_nickname_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientSetPlayerNicknameResponse *
       cmsg_client_set_player_nickname_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientSetPlayerNicknameResponse *)
     protobuf_c_message_unpack (&cmsg_client_set_player_nickname_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_set_player_nickname_response__free_unpacked
                     (CMsgClientSetPlayerNicknameResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_set_player_nickname_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_request_friend_data__get_packed_size
                     (const CMsgClientRequestFriendData *message)
{
  assert(message->descriptor == &cmsg_client_request_friend_data__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_request_friend_data__pack
                     (const CMsgClientRequestFriendData *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_request_friend_data__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_request_friend_data__pack_to_buffer
                     (const CMsgClientRequestFriendData *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_request_friend_data__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRequestFriendData *
       cmsg_client_request_friend_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRequestFriendData *)
     protobuf_c_message_unpack (&cmsg_client_request_friend_data__descriptor,
                                allocator, len, data);
}
void   cmsg_client_request_friend_data__free_unpacked
                     (CMsgClientRequestFriendData *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_request_friend_data__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_change_status__get_packed_size
                     (const CMsgClientChangeStatus *message)
{
  assert(message->descriptor == &cmsg_client_change_status__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_change_status__pack
                     (const CMsgClientChangeStatus *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_change_status__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_change_status__pack_to_buffer
                     (const CMsgClientChangeStatus *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_change_status__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientChangeStatus *
       cmsg_client_change_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientChangeStatus *)
     protobuf_c_message_unpack (&cmsg_client_change_status__descriptor,
                                allocator, len, data);
}
void   cmsg_client_change_status__free_unpacked
                     (CMsgClientChangeStatus *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_change_status__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_persona_change_response__get_packed_size
                     (const CMsgPersonaChangeResponse *message)
{
  assert(message->descriptor == &cmsg_persona_change_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_persona_change_response__pack
                     (const CMsgPersonaChangeResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_persona_change_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_persona_change_response__pack_to_buffer
                     (const CMsgPersonaChangeResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_persona_change_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgPersonaChangeResponse *
       cmsg_persona_change_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgPersonaChangeResponse *)
     protobuf_c_message_unpack (&cmsg_persona_change_response__descriptor,
                                allocator, len, data);
}
void   cmsg_persona_change_response__free_unpacked
                     (CMsgPersonaChangeResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_persona_change_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_persona_state__get_packed_size
                     (const CMsgClientPersonaState *message)
{
  assert(message->descriptor == &cmsg_client_persona_state__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_persona_state__pack
                     (const CMsgClientPersonaState *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_persona_state__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_persona_state__pack_to_buffer
                     (const CMsgClientPersonaState *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_persona_state__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientPersonaState *
       cmsg_client_persona_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientPersonaState *)
     protobuf_c_message_unpack (&cmsg_client_persona_state__descriptor,
                                allocator, len, data);
}
void   cmsg_client_persona_state__free_unpacked
                     (CMsgClientPersonaState *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_persona_state__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_friend_profile_info__get_packed_size
                     (const CMsgClientFriendProfileInfo *message)
{
  assert(message->descriptor == &cmsg_client_friend_profile_info__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_friend_profile_info__pack
                     (const CMsgClientFriendProfileInfo *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_friend_profile_info__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_friend_profile_info__pack_to_buffer
                     (const CMsgClientFriendProfileInfo *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_friend_profile_info__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientFriendProfileInfo *
       cmsg_client_friend_profile_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientFriendProfileInfo *)
     protobuf_c_message_unpack (&cmsg_client_friend_profile_info__descriptor,
                                allocator, len, data);
}
void   cmsg_client_friend_profile_info__free_unpacked
                     (CMsgClientFriendProfileInfo *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_friend_profile_info__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_friend_profile_info_response__get_packed_size
                     (const CMsgClientFriendProfileInfoResponse *message)
{
  assert(message->descriptor == &cmsg_client_friend_profile_info_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_friend_profile_info_response__pack
                     (const CMsgClientFriendProfileInfoResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_friend_profile_info_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_friend_profile_info_response__pack_to_buffer
                     (const CMsgClientFriendProfileInfoResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_friend_profile_info_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientFriendProfileInfoResponse *
       cmsg_client_friend_profile_info_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientFriendProfileInfoResponse *)
     protobuf_c_message_unpack (&cmsg_client_friend_profile_info_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_friend_profile_info_response__free_unpacked
                     (CMsgClientFriendProfileInfoResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_friend_profile_info_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_create_friends_group__get_packed_size
                     (const CMsgClientCreateFriendsGroup *message)
{
  assert(message->descriptor == &cmsg_client_create_friends_group__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_create_friends_group__pack
                     (const CMsgClientCreateFriendsGroup *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_create_friends_group__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_create_friends_group__pack_to_buffer
                     (const CMsgClientCreateFriendsGroup *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_create_friends_group__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientCreateFriendsGroup *
       cmsg_client_create_friends_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientCreateFriendsGroup *)
     protobuf_c_message_unpack (&cmsg_client_create_friends_group__descriptor,
                                allocator, len, data);
}
void   cmsg_client_create_friends_group__free_unpacked
                     (CMsgClientCreateFriendsGroup *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_create_friends_group__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_create_friends_group_response__get_packed_size
                     (const CMsgClientCreateFriendsGroupResponse *message)
{
  assert(message->descriptor == &cmsg_client_create_friends_group_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_create_friends_group_response__pack
                     (const CMsgClientCreateFriendsGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_create_friends_group_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_create_friends_group_response__pack_to_buffer
                     (const CMsgClientCreateFriendsGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_create_friends_group_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientCreateFriendsGroupResponse *
       cmsg_client_create_friends_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientCreateFriendsGroupResponse *)
     protobuf_c_message_unpack (&cmsg_client_create_friends_group_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_create_friends_group_response__free_unpacked
                     (CMsgClientCreateFriendsGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_create_friends_group_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_delete_friends_group__get_packed_size
                     (const CMsgClientDeleteFriendsGroup *message)
{
  assert(message->descriptor == &cmsg_client_delete_friends_group__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_delete_friends_group__pack
                     (const CMsgClientDeleteFriendsGroup *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_delete_friends_group__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_delete_friends_group__pack_to_buffer
                     (const CMsgClientDeleteFriendsGroup *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_delete_friends_group__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientDeleteFriendsGroup *
       cmsg_client_delete_friends_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientDeleteFriendsGroup *)
     protobuf_c_message_unpack (&cmsg_client_delete_friends_group__descriptor,
                                allocator, len, data);
}
void   cmsg_client_delete_friends_group__free_unpacked
                     (CMsgClientDeleteFriendsGroup *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_delete_friends_group__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_delete_friends_group_response__get_packed_size
                     (const CMsgClientDeleteFriendsGroupResponse *message)
{
  assert(message->descriptor == &cmsg_client_delete_friends_group_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_delete_friends_group_response__pack
                     (const CMsgClientDeleteFriendsGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_delete_friends_group_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_delete_friends_group_response__pack_to_buffer
                     (const CMsgClientDeleteFriendsGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_delete_friends_group_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientDeleteFriendsGroupResponse *
       cmsg_client_delete_friends_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientDeleteFriendsGroupResponse *)
     protobuf_c_message_unpack (&cmsg_client_delete_friends_group_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_delete_friends_group_response__free_unpacked
                     (CMsgClientDeleteFriendsGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_delete_friends_group_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_manage_friends_group__get_packed_size
                     (const CMsgClientManageFriendsGroup *message)
{
  assert(message->descriptor == &cmsg_client_manage_friends_group__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_manage_friends_group__pack
                     (const CMsgClientManageFriendsGroup *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_manage_friends_group__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_manage_friends_group__pack_to_buffer
                     (const CMsgClientManageFriendsGroup *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_manage_friends_group__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientManageFriendsGroup *
       cmsg_client_manage_friends_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientManageFriendsGroup *)
     protobuf_c_message_unpack (&cmsg_client_manage_friends_group__descriptor,
                                allocator, len, data);
}
void   cmsg_client_manage_friends_group__free_unpacked
                     (CMsgClientManageFriendsGroup *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_manage_friends_group__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_manage_friends_group_response__get_packed_size
                     (const CMsgClientManageFriendsGroupResponse *message)
{
  assert(message->descriptor == &cmsg_client_manage_friends_group_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_manage_friends_group_response__pack
                     (const CMsgClientManageFriendsGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_manage_friends_group_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_manage_friends_group_response__pack_to_buffer
                     (const CMsgClientManageFriendsGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_manage_friends_group_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientManageFriendsGroupResponse *
       cmsg_client_manage_friends_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientManageFriendsGroupResponse *)
     protobuf_c_message_unpack (&cmsg_client_manage_friends_group_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_manage_friends_group_response__free_unpacked
                     (CMsgClientManageFriendsGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_manage_friends_group_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_add_friend_to_group__get_packed_size
                     (const CMsgClientAddFriendToGroup *message)
{
  assert(message->descriptor == &cmsg_client_add_friend_to_group__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_add_friend_to_group__pack
                     (const CMsgClientAddFriendToGroup *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_add_friend_to_group__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_add_friend_to_group__pack_to_buffer
                     (const CMsgClientAddFriendToGroup *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_add_friend_to_group__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAddFriendToGroup *
       cmsg_client_add_friend_to_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAddFriendToGroup *)
     protobuf_c_message_unpack (&cmsg_client_add_friend_to_group__descriptor,
                                allocator, len, data);
}
void   cmsg_client_add_friend_to_group__free_unpacked
                     (CMsgClientAddFriendToGroup *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_add_friend_to_group__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_add_friend_to_group_response__get_packed_size
                     (const CMsgClientAddFriendToGroupResponse *message)
{
  assert(message->descriptor == &cmsg_client_add_friend_to_group_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_add_friend_to_group_response__pack
                     (const CMsgClientAddFriendToGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_add_friend_to_group_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_add_friend_to_group_response__pack_to_buffer
                     (const CMsgClientAddFriendToGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_add_friend_to_group_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientAddFriendToGroupResponse *
       cmsg_client_add_friend_to_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientAddFriendToGroupResponse *)
     protobuf_c_message_unpack (&cmsg_client_add_friend_to_group_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_add_friend_to_group_response__free_unpacked
                     (CMsgClientAddFriendToGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_add_friend_to_group_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_remove_friend_from_group__get_packed_size
                     (const CMsgClientRemoveFriendFromGroup *message)
{
  assert(message->descriptor == &cmsg_client_remove_friend_from_group__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_remove_friend_from_group__pack
                     (const CMsgClientRemoveFriendFromGroup *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_remove_friend_from_group__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_remove_friend_from_group__pack_to_buffer
                     (const CMsgClientRemoveFriendFromGroup *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_remove_friend_from_group__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRemoveFriendFromGroup *
       cmsg_client_remove_friend_from_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRemoveFriendFromGroup *)
     protobuf_c_message_unpack (&cmsg_client_remove_friend_from_group__descriptor,
                                allocator, len, data);
}
void   cmsg_client_remove_friend_from_group__free_unpacked
                     (CMsgClientRemoveFriendFromGroup *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_remove_friend_from_group__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_remove_friend_from_group_response__get_packed_size
                     (const CMsgClientRemoveFriendFromGroupResponse *message)
{
  assert(message->descriptor == &cmsg_client_remove_friend_from_group_response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_remove_friend_from_group_response__pack
                     (const CMsgClientRemoveFriendFromGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_remove_friend_from_group_response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_remove_friend_from_group_response__pack_to_buffer
                     (const CMsgClientRemoveFriendFromGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_remove_friend_from_group_response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientRemoveFriendFromGroupResponse *
       cmsg_client_remove_friend_from_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientRemoveFriendFromGroupResponse *)
     protobuf_c_message_unpack (&cmsg_client_remove_friend_from_group_response__descriptor,
                                allocator, len, data);
}
void   cmsg_client_remove_friend_from_group_response__free_unpacked
                     (CMsgClientRemoveFriendFromGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_remove_friend_from_group_response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_get_emoticon_list__get_packed_size
                     (const CMsgClientGetEmoticonList *message)
{
  assert(message->descriptor == &cmsg_client_get_emoticon_list__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_get_emoticon_list__pack
                     (const CMsgClientGetEmoticonList *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_get_emoticon_list__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_get_emoticon_list__pack_to_buffer
                     (const CMsgClientGetEmoticonList *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_get_emoticon_list__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientGetEmoticonList *
       cmsg_client_get_emoticon_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientGetEmoticonList *)
     protobuf_c_message_unpack (&cmsg_client_get_emoticon_list__descriptor,
                                allocator, len, data);
}
void   cmsg_client_get_emoticon_list__free_unpacked
                     (CMsgClientGetEmoticonList *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_get_emoticon_list__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cmsg_client_emoticon_list__get_packed_size
                     (const CMsgClientEmoticonList *message)
{
  assert(message->descriptor == &cmsg_client_emoticon_list__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cmsg_client_emoticon_list__pack
                     (const CMsgClientEmoticonList *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cmsg_client_emoticon_list__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cmsg_client_emoticon_list__pack_to_buffer
                     (const CMsgClientEmoticonList *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cmsg_client_emoticon_list__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CMsgClientEmoticonList *
       cmsg_client_emoticon_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CMsgClientEmoticonList *)
     protobuf_c_message_unpack (&cmsg_client_emoticon_list__descriptor,
                                allocator, len, data);
}
void   cmsg_client_emoticon_list__free_unpacked
                     (CMsgClientEmoticonList *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cmsg_client_emoticon_list__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

static const ProtobufCFieldDescriptor cmsg_client_friend_msg__field_descriptors[5] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientFriendMsg, has_steamid),
    offsetof(CMsgClientFriendMsg, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_entry_type",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientFriendMsg, has_chat_entry_type),
    offsetof(CMsgClientFriendMsg, chat_entry_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientFriendMsg, has_message),
    offsetof(CMsgClientFriendMsg, message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "rtime32_server_timestamp",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED32,
    offsetof(CMsgClientFriendMsg, has_rtime32_server_timestamp),
    offsetof(CMsgClientFriendMsg, rtime32_server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "echo_to_sender",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientFriendMsg, has_echo_to_sender),
    offsetof(CMsgClientFriendMsg, echo_to_sender),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friend_msg__field_indices_by_name[] = {
  1,   /* field[1] = chat_entry_type */
  4,   /* field[4] = echo_to_sender */
  2,   /* field[2] = message */
  3,   /* field[3] = rtime32_server_timestamp */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cmsg_client_friend_msg__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cmsg_client_friend_msg__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendMsg",
  "CMsgClientFriendMsg",
  "CMsgClientFriendMsg",
  "",
  sizeof(CMsgClientFriendMsg),
  5,
  cmsg_client_friend_msg__field_descriptors,
  cmsg_client_friend_msg__field_indices_by_name,
  1,  cmsg_client_friend_msg__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_friend_msg_incoming__field_descriptors[5] =
{
  {
    "steamid_from",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientFriendMsgIncoming, has_steamid_from),
    offsetof(CMsgClientFriendMsgIncoming, steamid_from),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_entry_type",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientFriendMsgIncoming, has_chat_entry_type),
    offsetof(CMsgClientFriendMsgIncoming, chat_entry_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "from_limited_account",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientFriendMsgIncoming, has_from_limited_account),
    offsetof(CMsgClientFriendMsgIncoming, from_limited_account),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientFriendMsgIncoming, has_message),
    offsetof(CMsgClientFriendMsgIncoming, message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "rtime32_server_timestamp",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED32,
    offsetof(CMsgClientFriendMsgIncoming, has_rtime32_server_timestamp),
    offsetof(CMsgClientFriendMsgIncoming, rtime32_server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friend_msg_incoming__field_indices_by_name[] = {
  1,   /* field[1] = chat_entry_type */
  2,   /* field[2] = from_limited_account */
  3,   /* field[3] = message */
  4,   /* field[4] = rtime32_server_timestamp */
  0,   /* field[0] = steamid_from */
};
static const ProtobufCIntRange cmsg_client_friend_msg_incoming__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cmsg_client_friend_msg_incoming__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendMsgIncoming",
  "CMsgClientFriendMsgIncoming",
  "CMsgClientFriendMsgIncoming",
  "",
  sizeof(CMsgClientFriendMsgIncoming),
  5,
  cmsg_client_friend_msg_incoming__field_descriptors,
  cmsg_client_friend_msg_incoming__field_indices_by_name,
  1,  cmsg_client_friend_msg_incoming__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_add_friend__field_descriptors[2] =
{
  {
    "steamid_to_add",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientAddFriend, has_steamid_to_add),
    offsetof(CMsgClientAddFriend, steamid_to_add),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accountname_or_email_to_add",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientAddFriend, accountname_or_email_to_add),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_add_friend__field_indices_by_name[] = {
  1,   /* field[1] = accountname_or_email_to_add */
  0,   /* field[0] = steamid_to_add */
};
static const ProtobufCIntRange cmsg_client_add_friend__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_add_friend__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAddFriend",
  "CMsgClientAddFriend",
  "CMsgClientAddFriend",
  "",
  sizeof(CMsgClientAddFriend),
  2,
  cmsg_client_add_friend__field_descriptors,
  cmsg_client_add_friend__field_indices_by_name,
  1,  cmsg_client_add_friend__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_add_friend_response__eresult__default_value = 2;
static const ProtobufCFieldDescriptor cmsg_client_add_friend_response__field_descriptors[3] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientAddFriendResponse, has_eresult),
    offsetof(CMsgClientAddFriendResponse, eresult),
    NULL,
    &cmsg_client_add_friend_response__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steam_id_added",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientAddFriendResponse, has_steam_id_added),
    offsetof(CMsgClientAddFriendResponse, steam_id_added),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona_name_added",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientAddFriendResponse, persona_name_added),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_add_friend_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
  2,   /* field[2] = persona_name_added */
  1,   /* field[1] = steam_id_added */
};
static const ProtobufCIntRange cmsg_client_add_friend_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_add_friend_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAddFriendResponse",
  "CMsgClientAddFriendResponse",
  "CMsgClientAddFriendResponse",
  "",
  sizeof(CMsgClientAddFriendResponse),
  3,
  cmsg_client_add_friend_response__field_descriptors,
  cmsg_client_add_friend_response__field_indices_by_name,
  1,  cmsg_client_add_friend_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_remove_friend__field_descriptors[1] =
{
  {
    "friendid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientRemoveFriend, has_friendid),
    offsetof(CMsgClientRemoveFriend, friendid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_remove_friend__field_indices_by_name[] = {
  0,   /* field[0] = friendid */
};
static const ProtobufCIntRange cmsg_client_remove_friend__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_remove_friend__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRemoveFriend",
  "CMsgClientRemoveFriend",
  "CMsgClientRemoveFriend",
  "",
  sizeof(CMsgClientRemoveFriend),
  1,
  cmsg_client_remove_friend__field_descriptors,
  cmsg_client_remove_friend__field_indices_by_name,
  1,  cmsg_client_remove_friend__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_hide_friend__field_descriptors[2] =
{
  {
    "friendid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientHideFriend, has_friendid),
    offsetof(CMsgClientHideFriend, friendid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "hide",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientHideFriend, has_hide),
    offsetof(CMsgClientHideFriend, hide),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_hide_friend__field_indices_by_name[] = {
  0,   /* field[0] = friendid */
  1,   /* field[1] = hide */
};
static const ProtobufCIntRange cmsg_client_hide_friend__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_hide_friend__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientHideFriend",
  "CMsgClientHideFriend",
  "CMsgClientHideFriend",
  "",
  sizeof(CMsgClientHideFriend),
  2,
  cmsg_client_hide_friend__field_descriptors,
  cmsg_client_hide_friend__field_indices_by_name,
  1,  cmsg_client_hide_friend__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_friends_list__friend__field_descriptors[2] =
{
  {
    "ulfriendid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientFriendsList__Friend, has_ulfriendid),
    offsetof(CMsgClientFriendsList__Friend, ulfriendid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "efriendrelationship",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientFriendsList__Friend, has_efriendrelationship),
    offsetof(CMsgClientFriendsList__Friend, efriendrelationship),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friends_list__friend__field_indices_by_name[] = {
  1,   /* field[1] = efriendrelationship */
  0,   /* field[0] = ulfriendid */
};
static const ProtobufCIntRange cmsg_client_friends_list__friend__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_friends_list__friend__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendsList.Friend",
  "Friend",
  "CMsgClientFriendsList__Friend",
  "",
  sizeof(CMsgClientFriendsList__Friend),
  2,
  cmsg_client_friends_list__friend__field_descriptors,
  cmsg_client_friends_list__friend__field_indices_by_name,
  1,  cmsg_client_friends_list__friend__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_friends_list__field_descriptors[5] =
{
  {
    "bincremental",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientFriendsList, has_bincremental),
    offsetof(CMsgClientFriendsList, bincremental),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientFriendsList, n_friends),
    offsetof(CMsgClientFriendsList, friends),
    &cmsg_client_friends_list__friend__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "max_friend_count",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientFriendsList, has_max_friend_count),
    offsetof(CMsgClientFriendsList, max_friend_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "active_friend_count",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientFriendsList, has_active_friend_count),
    offsetof(CMsgClientFriendsList, active_friend_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_limit_hit",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientFriendsList, has_friends_limit_hit),
    offsetof(CMsgClientFriendsList, friends_limit_hit),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friends_list__field_indices_by_name[] = {
  3,   /* field[3] = active_friend_count */
  0,   /* field[0] = bincremental */
  1,   /* field[1] = friends */
  4,   /* field[4] = friends_limit_hit */
  2,   /* field[2] = max_friend_count */
};
static const ProtobufCIntRange cmsg_client_friends_list__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cmsg_client_friends_list__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendsList",
  "CMsgClientFriendsList",
  "CMsgClientFriendsList",
  "",
  sizeof(CMsgClientFriendsList),
  5,
  cmsg_client_friends_list__field_descriptors,
  cmsg_client_friends_list__field_indices_by_name,
  1,  cmsg_client_friends_list__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_friends_groups_list__friend_group__field_descriptors[2] =
{
  {
    "nGroupID",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientFriendsGroupsList__FriendGroup, has_ngroupid),
    offsetof(CMsgClientFriendsGroupsList__FriendGroup, ngroupid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "strGroupName",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientFriendsGroupsList__FriendGroup, strgroupname),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friends_groups_list__friend_group__field_indices_by_name[] = {
  0,   /* field[0] = nGroupID */
  1,   /* field[1] = strGroupName */
};
static const ProtobufCIntRange cmsg_client_friends_groups_list__friend_group__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_friends_groups_list__friend_group__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendsGroupsList.FriendGroup",
  "FriendGroup",
  "CMsgClientFriendsGroupsList__FriendGroup",
  "",
  sizeof(CMsgClientFriendsGroupsList__FriendGroup),
  2,
  cmsg_client_friends_groups_list__friend_group__field_descriptors,
  cmsg_client_friends_groups_list__friend_group__field_indices_by_name,
  1,  cmsg_client_friends_groups_list__friend_group__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_friends_groups_list__friend_groups_membership__field_descriptors[2] =
{
  {
    "ulSteamID",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientFriendsGroupsList__FriendGroupsMembership, has_ulsteamid),
    offsetof(CMsgClientFriendsGroupsList__FriendGroupsMembership, ulsteamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "nGroupID",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientFriendsGroupsList__FriendGroupsMembership, has_ngroupid),
    offsetof(CMsgClientFriendsGroupsList__FriendGroupsMembership, ngroupid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friends_groups_list__friend_groups_membership__field_indices_by_name[] = {
  1,   /* field[1] = nGroupID */
  0,   /* field[0] = ulSteamID */
};
static const ProtobufCIntRange cmsg_client_friends_groups_list__friend_groups_membership__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_friends_groups_list__friend_groups_membership__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendsGroupsList.FriendGroupsMembership",
  "FriendGroupsMembership",
  "CMsgClientFriendsGroupsList__FriendGroupsMembership",
  "",
  sizeof(CMsgClientFriendsGroupsList__FriendGroupsMembership),
  2,
  cmsg_client_friends_groups_list__friend_groups_membership__field_descriptors,
  cmsg_client_friends_groups_list__friend_groups_membership__field_indices_by_name,
  1,  cmsg_client_friends_groups_list__friend_groups_membership__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_friends_groups_list__field_descriptors[4] =
{
  {
    "bremoval",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientFriendsGroupsList, has_bremoval),
    offsetof(CMsgClientFriendsGroupsList, bremoval),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "bincremental",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientFriendsGroupsList, has_bincremental),
    offsetof(CMsgClientFriendsGroupsList, bincremental),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friendGroups",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientFriendsGroupsList, n_friendgroups),
    offsetof(CMsgClientFriendsGroupsList, friendgroups),
    &cmsg_client_friends_groups_list__friend_group__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "memberships",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientFriendsGroupsList, n_memberships),
    offsetof(CMsgClientFriendsGroupsList, memberships),
    &cmsg_client_friends_groups_list__friend_groups_membership__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friends_groups_list__field_indices_by_name[] = {
  1,   /* field[1] = bincremental */
  0,   /* field[0] = bremoval */
  2,   /* field[2] = friendGroups */
  3,   /* field[3] = memberships */
};
static const ProtobufCIntRange cmsg_client_friends_groups_list__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cmsg_client_friends_groups_list__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendsGroupsList",
  "CMsgClientFriendsGroupsList",
  "CMsgClientFriendsGroupsList",
  "",
  sizeof(CMsgClientFriendsGroupsList),
  4,
  cmsg_client_friends_groups_list__field_descriptors,
  cmsg_client_friends_groups_list__field_indices_by_name,
  1,  cmsg_client_friends_groups_list__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_player_nickname_list__player_nickname__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientPlayerNicknameList__PlayerNickname, has_steamid),
    offsetof(CMsgClientPlayerNicknameList__PlayerNickname, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "nickname",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientPlayerNicknameList__PlayerNickname, nickname),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_player_nickname_list__player_nickname__field_indices_by_name[] = {
  1,   /* field[1] = nickname */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cmsg_client_player_nickname_list__player_nickname__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_player_nickname_list__player_nickname__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientPlayerNicknameList.PlayerNickname",
  "PlayerNickname",
  "CMsgClientPlayerNicknameList__PlayerNickname",
  "",
  sizeof(CMsgClientPlayerNicknameList__PlayerNickname),
  2,
  cmsg_client_player_nickname_list__player_nickname__field_descriptors,
  cmsg_client_player_nickname_list__player_nickname__field_indices_by_name,
  2,  cmsg_client_player_nickname_list__player_nickname__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_player_nickname_list__field_descriptors[3] =
{
  {
    "removal",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientPlayerNicknameList, has_removal),
    offsetof(CMsgClientPlayerNicknameList, removal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "incremental",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientPlayerNicknameList, has_incremental),
    offsetof(CMsgClientPlayerNicknameList, incremental),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "nicknames",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientPlayerNicknameList, n_nicknames),
    offsetof(CMsgClientPlayerNicknameList, nicknames),
    &cmsg_client_player_nickname_list__player_nickname__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_player_nickname_list__field_indices_by_name[] = {
  1,   /* field[1] = incremental */
  2,   /* field[2] = nicknames */
  0,   /* field[0] = removal */
};
static const ProtobufCIntRange cmsg_client_player_nickname_list__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_player_nickname_list__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientPlayerNicknameList",
  "CMsgClientPlayerNicknameList",
  "CMsgClientPlayerNicknameList",
  "",
  sizeof(CMsgClientPlayerNicknameList),
  3,
  cmsg_client_player_nickname_list__field_descriptors,
  cmsg_client_player_nickname_list__field_indices_by_name,
  1,  cmsg_client_player_nickname_list__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_set_player_nickname__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientSetPlayerNickname, has_steamid),
    offsetof(CMsgClientSetPlayerNickname, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "nickname",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientSetPlayerNickname, nickname),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_set_player_nickname__field_indices_by_name[] = {
  1,   /* field[1] = nickname */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cmsg_client_set_player_nickname__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_set_player_nickname__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientSetPlayerNickname",
  "CMsgClientSetPlayerNickname",
  "CMsgClientSetPlayerNickname",
  "",
  sizeof(CMsgClientSetPlayerNickname),
  2,
  cmsg_client_set_player_nickname__field_descriptors,
  cmsg_client_set_player_nickname__field_indices_by_name,
  1,  cmsg_client_set_player_nickname__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_set_player_nickname_response__field_descriptors[1] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientSetPlayerNicknameResponse, has_eresult),
    offsetof(CMsgClientSetPlayerNicknameResponse, eresult),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_set_player_nickname_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
};
static const ProtobufCIntRange cmsg_client_set_player_nickname_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_set_player_nickname_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientSetPlayerNicknameResponse",
  "CMsgClientSetPlayerNicknameResponse",
  "CMsgClientSetPlayerNicknameResponse",
  "",
  sizeof(CMsgClientSetPlayerNicknameResponse),
  1,
  cmsg_client_set_player_nickname_response__field_descriptors,
  cmsg_client_set_player_nickname_response__field_indices_by_name,
  1,  cmsg_client_set_player_nickname_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_request_friend_data__field_descriptors[2] =
{
  {
    "persona_state_requested",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientRequestFriendData, has_persona_state_requested),
    offsetof(CMsgClientRequestFriendData, persona_state_requested),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientRequestFriendData, n_friends),
    offsetof(CMsgClientRequestFriendData, friends),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_request_friend_data__field_indices_by_name[] = {
  1,   /* field[1] = friends */
  0,   /* field[0] = persona_state_requested */
};
static const ProtobufCIntRange cmsg_client_request_friend_data__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_request_friend_data__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRequestFriendData",
  "CMsgClientRequestFriendData",
  "CMsgClientRequestFriendData",
  "",
  sizeof(CMsgClientRequestFriendData),
  2,
  cmsg_client_request_friend_data__field_descriptors,
  cmsg_client_request_friend_data__field_indices_by_name,
  1,  cmsg_client_request_friend_data__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const uint32_t cmsg_client_change_status__persona_state_flags__default_value = 0u;
static const ProtobufCFieldDescriptor cmsg_client_change_status__field_descriptors[8] =
{
  {
    "persona_state",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientChangeStatus, has_persona_state),
    offsetof(CMsgClientChangeStatus, persona_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "player_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientChangeStatus, player_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_auto_generated_name",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientChangeStatus, has_is_auto_generated_name),
    offsetof(CMsgClientChangeStatus, is_auto_generated_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "high_priority",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientChangeStatus, has_high_priority),
    offsetof(CMsgClientChangeStatus, high_priority),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona_set_by_user",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientChangeStatus, has_persona_set_by_user),
    offsetof(CMsgClientChangeStatus, persona_set_by_user),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona_state_flags",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientChangeStatus, has_persona_state_flags),
    offsetof(CMsgClientChangeStatus, persona_state_flags),
    NULL,
    &cmsg_client_change_status__persona_state_flags__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "need_persona_response",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientChangeStatus, has_need_persona_response),
    offsetof(CMsgClientChangeStatus, need_persona_response),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_client_idle",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientChangeStatus, has_is_client_idle),
    offsetof(CMsgClientChangeStatus, is_client_idle),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_change_status__field_indices_by_name[] = {
  3,   /* field[3] = high_priority */
  2,   /* field[2] = is_auto_generated_name */
  7,   /* field[7] = is_client_idle */
  6,   /* field[6] = need_persona_response */
  4,   /* field[4] = persona_set_by_user */
  0,   /* field[0] = persona_state */
  5,   /* field[5] = persona_state_flags */
  1,   /* field[1] = player_name */
};
static const ProtobufCIntRange cmsg_client_change_status__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cmsg_client_change_status__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientChangeStatus",
  "CMsgClientChangeStatus",
  "CMsgClientChangeStatus",
  "",
  sizeof(CMsgClientChangeStatus),
  8,
  cmsg_client_change_status__field_descriptors,
  cmsg_client_change_status__field_indices_by_name,
  1,  cmsg_client_change_status__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_persona_change_response__field_descriptors[2] =
{
  {
    "result",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgPersonaChangeResponse, has_result),
    offsetof(CMsgPersonaChangeResponse, result),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "player_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgPersonaChangeResponse, player_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_persona_change_response__field_indices_by_name[] = {
  1,   /* field[1] = player_name */
  0,   /* field[0] = result */
};
static const ProtobufCIntRange cmsg_persona_change_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_persona_change_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgPersonaChangeResponse",
  "CMsgPersonaChangeResponse",
  "CMsgPersonaChangeResponse",
  "",
  sizeof(CMsgPersonaChangeResponse),
  2,
  cmsg_persona_change_response__field_descriptors,
  cmsg_persona_change_response__field_indices_by_name,
  1,  cmsg_persona_change_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_persona_state__friend__clan_data__field_descriptors[2] =
{
  {
    "ogg_app_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend__ClanData, has_ogg_app_id),
    offsetof(CMsgClientPersonaState__Friend__ClanData, ogg_app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_group_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CMsgClientPersonaState__Friend__ClanData, has_chat_group_id),
    offsetof(CMsgClientPersonaState__Friend__ClanData, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_persona_state__friend__clan_data__field_indices_by_name[] = {
  1,   /* field[1] = chat_group_id */
  0,   /* field[0] = ogg_app_id */
};
static const ProtobufCIntRange cmsg_client_persona_state__friend__clan_data__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_persona_state__friend__clan_data__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientPersonaState.Friend.ClanData",
  "ClanData",
  "CMsgClientPersonaState__Friend__ClanData",
  "",
  sizeof(CMsgClientPersonaState__Friend__ClanData),
  2,
  cmsg_client_persona_state__friend__clan_data__field_descriptors,
  cmsg_client_persona_state__friend__clan_data__field_indices_by_name,
  1,  cmsg_client_persona_state__friend__clan_data__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_persona_state__friend__kv__field_descriptors[2] =
{
  {
    "key",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientPersonaState__Friend__KV, key),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "value",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientPersonaState__Friend__KV, value),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_persona_state__friend__kv__field_indices_by_name[] = {
  0,   /* field[0] = key */
  1,   /* field[1] = value */
};
static const ProtobufCIntRange cmsg_client_persona_state__friend__kv__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_persona_state__friend__kv__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientPersonaState.Friend.KV",
  "KV",
  "CMsgClientPersonaState__Friend__KV",
  "",
  sizeof(CMsgClientPersonaState__Friend__KV),
  2,
  cmsg_client_persona_state__friend__kv__field_descriptors,
  cmsg_client_persona_state__friend__kv__field_indices_by_name,
  1,  cmsg_client_persona_state__friend__kv__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_persona_state__friend__field_descriptors[31] =
{
  {
    "friendid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientPersonaState__Friend, has_friendid),
    offsetof(CMsgClientPersonaState__Friend, friendid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona_state",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_persona_state),
    offsetof(CMsgClientPersonaState__Friend, persona_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_played_app_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_game_played_app_id),
    offsetof(CMsgClientPersonaState__Friend, game_played_app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_server_ip",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_game_server_ip),
    offsetof(CMsgClientPersonaState__Friend, game_server_ip),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_server_port",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_game_server_port),
    offsetof(CMsgClientPersonaState__Friend, game_server_port),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona_state_flags",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_persona_state_flags),
    offsetof(CMsgClientPersonaState__Friend, persona_state_flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "online_session_instances",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_online_session_instances),
    offsetof(CMsgClientPersonaState__Friend, online_session_instances),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona_set_by_user",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientPersonaState__Friend, has_persona_set_by_user),
    offsetof(CMsgClientPersonaState__Friend, persona_set_by_user),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "player_name",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientPersonaState__Friend, player_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "query_port",
    20,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_query_port),
    offsetof(CMsgClientPersonaState__Friend, query_port),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_source",
    25,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientPersonaState__Friend, has_steamid_source),
    offsetof(CMsgClientPersonaState__Friend, steamid_source),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "avatar_hash",
    31,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientPersonaState__Friend, has_avatar_hash),
    offsetof(CMsgClientPersonaState__Friend, avatar_hash),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_logoff",
    45,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_last_logoff),
    offsetof(CMsgClientPersonaState__Friend, last_logoff),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_logon",
    46,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_last_logon),
    offsetof(CMsgClientPersonaState__Friend, last_logon),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_seen_online",
    47,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_last_seen_online),
    offsetof(CMsgClientPersonaState__Friend, last_seen_online),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "clan_rank",
    50,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_clan_rank),
    offsetof(CMsgClientPersonaState__Friend, clan_rank),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_name",
    55,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientPersonaState__Friend, game_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "gameid",
    56,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientPersonaState__Friend, has_gameid),
    offsetof(CMsgClientPersonaState__Friend, gameid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_data_blob",
    60,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CMsgClientPersonaState__Friend, has_game_data_blob),
    offsetof(CMsgClientPersonaState__Friend, game_data_blob),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "clan_data",
    64,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CMsgClientPersonaState__Friend, clan_data),
    &cmsg_client_persona_state__friend__clan_data__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "clan_tag",
    65,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientPersonaState__Friend, clan_tag),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "rich_presence",
    71,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientPersonaState__Friend, n_rich_presence),
    offsetof(CMsgClientPersonaState__Friend, rich_presence),
    &cmsg_client_persona_state__friend__kv__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "broadcast_id",
    72,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientPersonaState__Friend, has_broadcast_id),
    offsetof(CMsgClientPersonaState__Friend, broadcast_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_lobby_id",
    73,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientPersonaState__Friend, has_game_lobby_id),
    offsetof(CMsgClientPersonaState__Friend, game_lobby_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_accountid",
    74,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_watching_broadcast_accountid),
    offsetof(CMsgClientPersonaState__Friend, watching_broadcast_accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_appid",
    75,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_watching_broadcast_appid),
    offsetof(CMsgClientPersonaState__Friend, watching_broadcast_appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_viewers",
    76,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState__Friend, has_watching_broadcast_viewers),
    offsetof(CMsgClientPersonaState__Friend, watching_broadcast_viewers),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_title",
    77,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientPersonaState__Friend, watching_broadcast_title),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_community_banned",
    78,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientPersonaState__Friend, has_is_community_banned),
    offsetof(CMsgClientPersonaState__Friend, is_community_banned),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "player_name_pending_review",
    79,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientPersonaState__Friend, has_player_name_pending_review),
    offsetof(CMsgClientPersonaState__Friend, player_name_pending_review),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "avatar_pending_review",
    80,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientPersonaState__Friend, has_avatar_pending_review),
    offsetof(CMsgClientPersonaState__Friend, avatar_pending_review),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_persona_state__friend__field_indices_by_name[] = {
  11,   /* field[11] = avatar_hash */
  30,   /* field[30] = avatar_pending_review */
  22,   /* field[22] = broadcast_id */
  19,   /* field[19] = clan_data */
  15,   /* field[15] = clan_rank */
  20,   /* field[20] = clan_tag */
  0,   /* field[0] = friendid */
  18,   /* field[18] = game_data_blob */
  23,   /* field[23] = game_lobby_id */
  16,   /* field[16] = game_name */
  2,   /* field[2] = game_played_app_id */
  3,   /* field[3] = game_server_ip */
  4,   /* field[4] = game_server_port */
  17,   /* field[17] = gameid */
  28,   /* field[28] = is_community_banned */
  12,   /* field[12] = last_logoff */
  13,   /* field[13] = last_logon */
  14,   /* field[14] = last_seen_online */
  6,   /* field[6] = online_session_instances */
  7,   /* field[7] = persona_set_by_user */
  1,   /* field[1] = persona_state */
  5,   /* field[5] = persona_state_flags */
  8,   /* field[8] = player_name */
  29,   /* field[29] = player_name_pending_review */
  9,   /* field[9] = query_port */
  21,   /* field[21] = rich_presence */
  10,   /* field[10] = steamid_source */
  24,   /* field[24] = watching_broadcast_accountid */
  25,   /* field[25] = watching_broadcast_appid */
  27,   /* field[27] = watching_broadcast_title */
  26,   /* field[26] = watching_broadcast_viewers */
};
static const ProtobufCIntRange cmsg_client_persona_state__friend__number_ranges[12 + 1] =
{
  { 1, 0 },
  { 10, 7 },
  { 15, 8 },
  { 20, 9 },
  { 25, 10 },
  { 31, 11 },
  { 45, 12 },
  { 50, 15 },
  { 55, 16 },
  { 60, 18 },
  { 64, 19 },
  { 71, 21 },
  { 0, 31 }
};
const ProtobufCMessageDescriptor cmsg_client_persona_state__friend__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientPersonaState.Friend",
  "Friend",
  "CMsgClientPersonaState__Friend",
  "",
  sizeof(CMsgClientPersonaState__Friend),
  31,
  cmsg_client_persona_state__friend__field_descriptors,
  cmsg_client_persona_state__friend__field_indices_by_name,
  12,  cmsg_client_persona_state__friend__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_persona_state__field_descriptors[2] =
{
  {
    "status_flags",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientPersonaState, has_status_flags),
    offsetof(CMsgClientPersonaState, status_flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientPersonaState, n_friends),
    offsetof(CMsgClientPersonaState, friends),
    &cmsg_client_persona_state__friend__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_persona_state__field_indices_by_name[] = {
  1,   /* field[1] = friends */
  0,   /* field[0] = status_flags */
};
static const ProtobufCIntRange cmsg_client_persona_state__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_persona_state__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientPersonaState",
  "CMsgClientPersonaState",
  "CMsgClientPersonaState",
  "",
  sizeof(CMsgClientPersonaState),
  2,
  cmsg_client_persona_state__field_descriptors,
  cmsg_client_persona_state__field_indices_by_name,
  1,  cmsg_client_persona_state__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_friend_profile_info__field_descriptors[1] =
{
  {
    "steamid_friend",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientFriendProfileInfo, has_steamid_friend),
    offsetof(CMsgClientFriendProfileInfo, steamid_friend),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friend_profile_info__field_indices_by_name[] = {
  0,   /* field[0] = steamid_friend */
};
static const ProtobufCIntRange cmsg_client_friend_profile_info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_friend_profile_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendProfileInfo",
  "CMsgClientFriendProfileInfo",
  "CMsgClientFriendProfileInfo",
  "",
  sizeof(CMsgClientFriendProfileInfo),
  1,
  cmsg_client_friend_profile_info__field_descriptors,
  cmsg_client_friend_profile_info__field_indices_by_name,
  1,  cmsg_client_friend_profile_info__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const int32_t cmsg_client_friend_profile_info_response__eresult__default_value = 2;
static const ProtobufCFieldDescriptor cmsg_client_friend_profile_info_response__field_descriptors[9] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientFriendProfileInfoResponse, has_eresult),
    offsetof(CMsgClientFriendProfileInfoResponse, eresult),
    NULL,
    &cmsg_client_friend_profile_info_response__eresult__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_friend",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientFriendProfileInfoResponse, has_steamid_friend),
    offsetof(CMsgClientFriendProfileInfoResponse, steamid_friend),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_created",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientFriendProfileInfoResponse, has_time_created),
    offsetof(CMsgClientFriendProfileInfoResponse, time_created),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "real_name",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientFriendProfileInfoResponse, real_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "city_name",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientFriendProfileInfoResponse, city_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "state_name",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientFriendProfileInfoResponse, state_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "country_name",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientFriendProfileInfoResponse, country_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "headline",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientFriendProfileInfoResponse, headline),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "summary",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientFriendProfileInfoResponse, summary),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_friend_profile_info_response__field_indices_by_name[] = {
  4,   /* field[4] = city_name */
  6,   /* field[6] = country_name */
  0,   /* field[0] = eresult */
  7,   /* field[7] = headline */
  3,   /* field[3] = real_name */
  5,   /* field[5] = state_name */
  1,   /* field[1] = steamid_friend */
  8,   /* field[8] = summary */
  2,   /* field[2] = time_created */
};
static const ProtobufCIntRange cmsg_client_friend_profile_info_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 9 }
};
const ProtobufCMessageDescriptor cmsg_client_friend_profile_info_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientFriendProfileInfoResponse",
  "CMsgClientFriendProfileInfoResponse",
  "CMsgClientFriendProfileInfoResponse",
  "",
  sizeof(CMsgClientFriendProfileInfoResponse),
  9,
  cmsg_client_friend_profile_info_response__field_descriptors,
  cmsg_client_friend_profile_info_response__field_indices_by_name,
  1,  cmsg_client_friend_profile_info_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_create_friends_group__field_descriptors[3] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientCreateFriendsGroup, has_steamid),
    offsetof(CMsgClientCreateFriendsGroup, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "groupname",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientCreateFriendsGroup, groupname),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_friends",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientCreateFriendsGroup, n_steamid_friends),
    offsetof(CMsgClientCreateFriendsGroup, steamid_friends),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_create_friends_group__field_indices_by_name[] = {
  1,   /* field[1] = groupname */
  0,   /* field[0] = steamid */
  2,   /* field[2] = steamid_friends */
};
static const ProtobufCIntRange cmsg_client_create_friends_group__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_create_friends_group__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientCreateFriendsGroup",
  "CMsgClientCreateFriendsGroup",
  "CMsgClientCreateFriendsGroup",
  "",
  sizeof(CMsgClientCreateFriendsGroup),
  3,
  cmsg_client_create_friends_group__field_descriptors,
  cmsg_client_create_friends_group__field_indices_by_name,
  1,  cmsg_client_create_friends_group__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_create_friends_group_response__field_descriptors[2] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientCreateFriendsGroupResponse, has_eresult),
    offsetof(CMsgClientCreateFriendsGroupResponse, eresult),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "groupid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientCreateFriendsGroupResponse, has_groupid),
    offsetof(CMsgClientCreateFriendsGroupResponse, groupid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_create_friends_group_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
  1,   /* field[1] = groupid */
};
static const ProtobufCIntRange cmsg_client_create_friends_group_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_create_friends_group_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientCreateFriendsGroupResponse",
  "CMsgClientCreateFriendsGroupResponse",
  "CMsgClientCreateFriendsGroupResponse",
  "",
  sizeof(CMsgClientCreateFriendsGroupResponse),
  2,
  cmsg_client_create_friends_group_response__field_descriptors,
  cmsg_client_create_friends_group_response__field_indices_by_name,
  1,  cmsg_client_create_friends_group_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_delete_friends_group__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientDeleteFriendsGroup, has_steamid),
    offsetof(CMsgClientDeleteFriendsGroup, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "groupid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientDeleteFriendsGroup, has_groupid),
    offsetof(CMsgClientDeleteFriendsGroup, groupid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_delete_friends_group__field_indices_by_name[] = {
  1,   /* field[1] = groupid */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cmsg_client_delete_friends_group__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_delete_friends_group__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientDeleteFriendsGroup",
  "CMsgClientDeleteFriendsGroup",
  "CMsgClientDeleteFriendsGroup",
  "",
  sizeof(CMsgClientDeleteFriendsGroup),
  2,
  cmsg_client_delete_friends_group__field_descriptors,
  cmsg_client_delete_friends_group__field_indices_by_name,
  1,  cmsg_client_delete_friends_group__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_delete_friends_group_response__field_descriptors[1] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientDeleteFriendsGroupResponse, has_eresult),
    offsetof(CMsgClientDeleteFriendsGroupResponse, eresult),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_delete_friends_group_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
};
static const ProtobufCIntRange cmsg_client_delete_friends_group_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_delete_friends_group_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientDeleteFriendsGroupResponse",
  "CMsgClientDeleteFriendsGroupResponse",
  "CMsgClientDeleteFriendsGroupResponse",
  "",
  sizeof(CMsgClientDeleteFriendsGroupResponse),
  1,
  cmsg_client_delete_friends_group_response__field_descriptors,
  cmsg_client_delete_friends_group_response__field_indices_by_name,
  1,  cmsg_client_delete_friends_group_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_manage_friends_group__field_descriptors[4] =
{
  {
    "groupid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientManageFriendsGroup, has_groupid),
    offsetof(CMsgClientManageFriendsGroup, groupid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "groupname",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientManageFriendsGroup, groupname),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_friends_added",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientManageFriendsGroup, n_steamid_friends_added),
    offsetof(CMsgClientManageFriendsGroup, steamid_friends_added),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_friends_removed",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientManageFriendsGroup, n_steamid_friends_removed),
    offsetof(CMsgClientManageFriendsGroup, steamid_friends_removed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_manage_friends_group__field_indices_by_name[] = {
  0,   /* field[0] = groupid */
  1,   /* field[1] = groupname */
  2,   /* field[2] = steamid_friends_added */
  3,   /* field[3] = steamid_friends_removed */
};
static const ProtobufCIntRange cmsg_client_manage_friends_group__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cmsg_client_manage_friends_group__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientManageFriendsGroup",
  "CMsgClientManageFriendsGroup",
  "CMsgClientManageFriendsGroup",
  "",
  sizeof(CMsgClientManageFriendsGroup),
  4,
  cmsg_client_manage_friends_group__field_descriptors,
  cmsg_client_manage_friends_group__field_indices_by_name,
  1,  cmsg_client_manage_friends_group__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_manage_friends_group_response__field_descriptors[1] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientManageFriendsGroupResponse, has_eresult),
    offsetof(CMsgClientManageFriendsGroupResponse, eresult),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_manage_friends_group_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
};
static const ProtobufCIntRange cmsg_client_manage_friends_group_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_manage_friends_group_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientManageFriendsGroupResponse",
  "CMsgClientManageFriendsGroupResponse",
  "CMsgClientManageFriendsGroupResponse",
  "",
  sizeof(CMsgClientManageFriendsGroupResponse),
  1,
  cmsg_client_manage_friends_group_response__field_descriptors,
  cmsg_client_manage_friends_group_response__field_indices_by_name,
  1,  cmsg_client_manage_friends_group_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_add_friend_to_group__field_descriptors[2] =
{
  {
    "groupid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientAddFriendToGroup, has_groupid),
    offsetof(CMsgClientAddFriendToGroup, groupid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamiduser",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientAddFriendToGroup, has_steamiduser),
    offsetof(CMsgClientAddFriendToGroup, steamiduser),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_add_friend_to_group__field_indices_by_name[] = {
  0,   /* field[0] = groupid */
  1,   /* field[1] = steamiduser */
};
static const ProtobufCIntRange cmsg_client_add_friend_to_group__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_add_friend_to_group__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAddFriendToGroup",
  "CMsgClientAddFriendToGroup",
  "CMsgClientAddFriendToGroup",
  "",
  sizeof(CMsgClientAddFriendToGroup),
  2,
  cmsg_client_add_friend_to_group__field_descriptors,
  cmsg_client_add_friend_to_group__field_indices_by_name,
  1,  cmsg_client_add_friend_to_group__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_add_friend_to_group_response__field_descriptors[1] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientAddFriendToGroupResponse, has_eresult),
    offsetof(CMsgClientAddFriendToGroupResponse, eresult),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_add_friend_to_group_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
};
static const ProtobufCIntRange cmsg_client_add_friend_to_group_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_add_friend_to_group_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientAddFriendToGroupResponse",
  "CMsgClientAddFriendToGroupResponse",
  "CMsgClientAddFriendToGroupResponse",
  "",
  sizeof(CMsgClientAddFriendToGroupResponse),
  1,
  cmsg_client_add_friend_to_group_response__field_descriptors,
  cmsg_client_add_friend_to_group_response__field_indices_by_name,
  1,  cmsg_client_add_friend_to_group_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_remove_friend_from_group__field_descriptors[2] =
{
  {
    "groupid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientRemoveFriendFromGroup, has_groupid),
    offsetof(CMsgClientRemoveFriendFromGroup, groupid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamiduser",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CMsgClientRemoveFriendFromGroup, has_steamiduser),
    offsetof(CMsgClientRemoveFriendFromGroup, steamiduser),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_remove_friend_from_group__field_indices_by_name[] = {
  0,   /* field[0] = groupid */
  1,   /* field[1] = steamiduser */
};
static const ProtobufCIntRange cmsg_client_remove_friend_from_group__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cmsg_client_remove_friend_from_group__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRemoveFriendFromGroup",
  "CMsgClientRemoveFriendFromGroup",
  "CMsgClientRemoveFriendFromGroup",
  "",
  sizeof(CMsgClientRemoveFriendFromGroup),
  2,
  cmsg_client_remove_friend_from_group__field_descriptors,
  cmsg_client_remove_friend_from_group__field_indices_by_name,
  1,  cmsg_client_remove_friend_from_group__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_remove_friend_from_group_response__field_descriptors[1] =
{
  {
    "eresult",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientRemoveFriendFromGroupResponse, has_eresult),
    offsetof(CMsgClientRemoveFriendFromGroupResponse, eresult),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_remove_friend_from_group_response__field_indices_by_name[] = {
  0,   /* field[0] = eresult */
};
static const ProtobufCIntRange cmsg_client_remove_friend_from_group_response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cmsg_client_remove_friend_from_group_response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientRemoveFriendFromGroupResponse",
  "CMsgClientRemoveFriendFromGroupResponse",
  "CMsgClientRemoveFriendFromGroupResponse",
  "",
  sizeof(CMsgClientRemoveFriendFromGroupResponse),
  1,
  cmsg_client_remove_friend_from_group_response__field_descriptors,
  cmsg_client_remove_friend_from_group_response__field_indices_by_name,
  1,  cmsg_client_remove_friend_from_group_response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cmsg_client_get_emoticon_list__field_descriptors NULL
#define cmsg_client_get_emoticon_list__field_indices_by_name NULL
#define cmsg_client_get_emoticon_list__number_ranges NULL
const ProtobufCMessageDescriptor cmsg_client_get_emoticon_list__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientGetEmoticonList",
  "CMsgClientGetEmoticonList",
  "CMsgClientGetEmoticonList",
  "",
  sizeof(CMsgClientGetEmoticonList),
  0,
  cmsg_client_get_emoticon_list__field_descriptors,
  cmsg_client_get_emoticon_list__field_indices_by_name,
  0,  cmsg_client_get_emoticon_list__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_emoticon_list__emoticon__field_descriptors[6] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientEmoticonList__Emoticon, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "count",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientEmoticonList__Emoticon, has_count),
    offsetof(CMsgClientEmoticonList__Emoticon, count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_last_used",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Emoticon, has_time_last_used),
    offsetof(CMsgClientEmoticonList__Emoticon, time_last_used),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "use_count",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Emoticon, has_use_count),
    offsetof(CMsgClientEmoticonList__Emoticon, use_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_received",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Emoticon, has_time_received),
    offsetof(CMsgClientEmoticonList__Emoticon, time_received),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Emoticon, has_appid),
    offsetof(CMsgClientEmoticonList__Emoticon, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_emoticon_list__emoticon__field_indices_by_name[] = {
  5,   /* field[5] = appid */
  1,   /* field[1] = count */
  0,   /* field[0] = name */
  2,   /* field[2] = time_last_used */
  4,   /* field[4] = time_received */
  3,   /* field[3] = use_count */
};
static const ProtobufCIntRange cmsg_client_emoticon_list__emoticon__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cmsg_client_emoticon_list__emoticon__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientEmoticonList.Emoticon",
  "Emoticon",
  "CMsgClientEmoticonList__Emoticon",
  "",
  sizeof(CMsgClientEmoticonList__Emoticon),
  6,
  cmsg_client_emoticon_list__emoticon__field_descriptors,
  cmsg_client_emoticon_list__emoticon__field_indices_by_name,
  1,  cmsg_client_emoticon_list__emoticon__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_emoticon_list__sticker__field_descriptors[6] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientEmoticonList__Sticker, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "count",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientEmoticonList__Sticker, has_count),
    offsetof(CMsgClientEmoticonList__Sticker, count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_received",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Sticker, has_time_received),
    offsetof(CMsgClientEmoticonList__Sticker, time_received),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Sticker, has_appid),
    offsetof(CMsgClientEmoticonList__Sticker, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_last_used",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Sticker, has_time_last_used),
    offsetof(CMsgClientEmoticonList__Sticker, time_last_used),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "use_count",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Sticker, has_use_count),
    offsetof(CMsgClientEmoticonList__Sticker, use_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_emoticon_list__sticker__field_indices_by_name[] = {
  3,   /* field[3] = appid */
  1,   /* field[1] = count */
  0,   /* field[0] = name */
  4,   /* field[4] = time_last_used */
  2,   /* field[2] = time_received */
  5,   /* field[5] = use_count */
};
static const ProtobufCIntRange cmsg_client_emoticon_list__sticker__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cmsg_client_emoticon_list__sticker__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientEmoticonList.Sticker",
  "Sticker",
  "CMsgClientEmoticonList__Sticker",
  "",
  sizeof(CMsgClientEmoticonList__Sticker),
  6,
  cmsg_client_emoticon_list__sticker__field_descriptors,
  cmsg_client_emoticon_list__sticker__field_indices_by_name,
  1,  cmsg_client_emoticon_list__sticker__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_emoticon_list__effect__field_descriptors[5] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CMsgClientEmoticonList__Effect, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "count",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CMsgClientEmoticonList__Effect, has_count),
    offsetof(CMsgClientEmoticonList__Effect, count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_received",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Effect, has_time_received),
    offsetof(CMsgClientEmoticonList__Effect, time_received),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "infinite_use",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CMsgClientEmoticonList__Effect, has_infinite_use),
    offsetof(CMsgClientEmoticonList__Effect, infinite_use),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CMsgClientEmoticonList__Effect, has_appid),
    offsetof(CMsgClientEmoticonList__Effect, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_emoticon_list__effect__field_indices_by_name[] = {
  4,   /* field[4] = appid */
  1,   /* field[1] = count */
  3,   /* field[3] = infinite_use */
  0,   /* field[0] = name */
  2,   /* field[2] = time_received */
};
static const ProtobufCIntRange cmsg_client_emoticon_list__effect__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cmsg_client_emoticon_list__effect__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientEmoticonList.Effect",
  "Effect",
  "CMsgClientEmoticonList__Effect",
  "",
  sizeof(CMsgClientEmoticonList__Effect),
  5,
  cmsg_client_emoticon_list__effect__field_descriptors,
  cmsg_client_emoticon_list__effect__field_indices_by_name,
  1,  cmsg_client_emoticon_list__effect__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cmsg_client_emoticon_list__field_descriptors[3] =
{
  {
    "emoticons",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientEmoticonList, n_emoticons),
    offsetof(CMsgClientEmoticonList, emoticons),
    &cmsg_client_emoticon_list__emoticon__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "stickers",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientEmoticonList, n_stickers),
    offsetof(CMsgClientEmoticonList, stickers),
    &cmsg_client_emoticon_list__sticker__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "effects",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CMsgClientEmoticonList, n_effects),
    offsetof(CMsgClientEmoticonList, effects),
    &cmsg_client_emoticon_list__effect__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cmsg_client_emoticon_list__field_indices_by_name[] = {
  2,   /* field[2] = effects */
  0,   /* field[0] = emoticons */
  1,   /* field[1] = stickers */
};
static const ProtobufCIntRange cmsg_client_emoticon_list__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cmsg_client_emoticon_list__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CMsgClientEmoticonList",
  "CMsgClientEmoticonList",
  "CMsgClientEmoticonList",
  "",
  sizeof(CMsgClientEmoticonList),
  3,
  cmsg_client_emoticon_list__field_descriptors,
  cmsg_client_emoticon_list__field_indices_by_name,
  1,  cmsg_client_emoticon_list__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
