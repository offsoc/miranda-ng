/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_base.proto */

#ifndef PROTOBUF_C_steammessages_5fbase_2eproto__INCLUDED
#define PROTOBUF_C_steammessages_5fbase_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

struct CMsgIPAddress;
struct CMsgIPAddressBucket;
struct CMsgGCRoutingProtoBufHeader;
struct CMsgProtoBufHeader;
struct CMsgMulti;
struct CMsgProtobufWrapped;
struct CMsgAuthTicket;
struct CCDDBAppDetailCommon;
struct CMsgAppRights;
struct CCuratorPreferences;
struct CLocalizationToken;
struct CClanEventUserNewsTuple;
struct CClanMatchEventByRange;
struct CCommunityClanAnnouncementInfo;
struct CClanEventData;
struct CBillingAddress;
struct CPackageReservationStatus;
struct CMsgKeyValuePair;
struct CMsgKeyValueSet;


/* --- enums --- */

typedef enum _EBanContentCheckResult {
  EBAN_CONTENT_CHECK_RESULT__k_EBanContentCheckResult_NotScanned = 0,
  EBAN_CONTENT_CHECK_RESULT__k_EBanContentCheckResult_Reset = 1,
  EBAN_CONTENT_CHECK_RESULT__k_EBanContentCheckResult_NeedsChecking = 2,
  EBAN_CONTENT_CHECK_RESULT__k_EBanContentCheckResult_VeryUnlikely = 5,
  EBAN_CONTENT_CHECK_RESULT__k_EBanContentCheckResult_Unlikely = 30,
  EBAN_CONTENT_CHECK_RESULT__k_EBanContentCheckResult_Possible = 50,
  EBAN_CONTENT_CHECK_RESULT__k_EBanContentCheckResult_Likely = 75,
  EBAN_CONTENT_CHECK_RESULT__k_EBanContentCheckResult_VeryLikely = 100
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EBAN_CONTENT_CHECK_RESULT)
} EBanContentCheckResult;
typedef enum _EProtoClanEventType {
  EPROTO_CLAN_EVENT_TYPE__k_EClanOtherEvent = 1,
  EPROTO_CLAN_EVENT_TYPE__k_EClanGameEvent = 2,
  EPROTO_CLAN_EVENT_TYPE__k_EClanPartyEvent = 3,
  EPROTO_CLAN_EVENT_TYPE__k_EClanMeetingEvent = 4,
  EPROTO_CLAN_EVENT_TYPE__k_EClanSpecialCauseEvent = 5,
  EPROTO_CLAN_EVENT_TYPE__k_EClanMusicAndArtsEvent = 6,
  EPROTO_CLAN_EVENT_TYPE__k_EClanSportsEvent = 7,
  EPROTO_CLAN_EVENT_TYPE__k_EClanTripEvent = 8,
  EPROTO_CLAN_EVENT_TYPE__k_EClanChatEvent = 9,
  EPROTO_CLAN_EVENT_TYPE__k_EClanGameReleaseEvent = 10,
  EPROTO_CLAN_EVENT_TYPE__k_EClanBroadcastEvent = 11,
  EPROTO_CLAN_EVENT_TYPE__k_EClanSmallUpdateEvent = 12,
  EPROTO_CLAN_EVENT_TYPE__k_EClanPreAnnounceMajorUpdateEvent = 13,
  EPROTO_CLAN_EVENT_TYPE__k_EClanMajorUpdateEvent = 14,
  EPROTO_CLAN_EVENT_TYPE__k_EClanDLCReleaseEvent = 15,
  EPROTO_CLAN_EVENT_TYPE__k_EClanFutureReleaseEvent = 16,
  EPROTO_CLAN_EVENT_TYPE__k_EClanESportTournamentStreamEvent = 17,
  EPROTO_CLAN_EVENT_TYPE__k_EClanDevStreamEvent = 18,
  EPROTO_CLAN_EVENT_TYPE__k_EClanFamousStreamEvent = 19,
  EPROTO_CLAN_EVENT_TYPE__k_EClanGameSalesEvent = 20,
  EPROTO_CLAN_EVENT_TYPE__k_EClanGameItemSalesEvent = 21,
  EPROTO_CLAN_EVENT_TYPE__k_EClanInGameBonusXPEvent = 22,
  EPROTO_CLAN_EVENT_TYPE__k_EClanInGameLootEvent = 23,
  EPROTO_CLAN_EVENT_TYPE__k_EClanInGamePerksEvent = 24,
  EPROTO_CLAN_EVENT_TYPE__k_EClanInGameChallengeEvent = 25,
  EPROTO_CLAN_EVENT_TYPE__k_EClanInGameContestEvent = 26,
  EPROTO_CLAN_EVENT_TYPE__k_EClanIRLEvent = 27,
  EPROTO_CLAN_EVENT_TYPE__k_EClanNewsEvent = 28,
  EPROTO_CLAN_EVENT_TYPE__k_EClanBetaReleaseEvent = 29,
  EPROTO_CLAN_EVENT_TYPE__k_EClanInGameContentReleaseEvent = 30,
  EPROTO_CLAN_EVENT_TYPE__k_EClanFreeTrial = 31,
  EPROTO_CLAN_EVENT_TYPE__k_EClanSeasonRelease = 32,
  EPROTO_CLAN_EVENT_TYPE__k_EClanSeasonUpdate = 33,
  EPROTO_CLAN_EVENT_TYPE__k_EClanCrosspostEvent = 34,
  EPROTO_CLAN_EVENT_TYPE__k_EClanInGameEventGeneral = 35
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EPROTO_CLAN_EVENT_TYPE)
} EProtoClanEventType;
typedef enum _PartnerEventNotificationType {
  PARTNER_EVENT_NOTIFICATION_TYPE__k_EEventStart = 0,
  PARTNER_EVENT_NOTIFICATION_TYPE__k_EEventBroadcastStart = 1,
  PARTNER_EVENT_NOTIFICATION_TYPE__k_EEventMatchStart = 2,
  PARTNER_EVENT_NOTIFICATION_TYPE__k_EEventPartnerMaxType = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PARTNER_EVENT_NOTIFICATION_TYPE)
} PartnerEventNotificationType;

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    eban_content_check_result__descriptor;
extern const ProtobufCEnumDescriptor    eproto_clan_event_type__descriptor;
extern const ProtobufCEnumDescriptor    partner_event_notification_type__descriptor;
extern const ProtobufCMessageDescriptor cmsg_ipaddress__descriptor;
extern const ProtobufCMessageDescriptor cmsg_ipaddress_bucket__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gcrouting_proto_buf_header__descriptor;
extern const ProtobufCMessageDescriptor cmsg_proto_buf_header__descriptor;
extern const ProtobufCMessageDescriptor cmsg_multi__descriptor;
extern const ProtobufCMessageDescriptor cmsg_protobuf_wrapped__descriptor;
extern const ProtobufCMessageDescriptor cmsg_auth_ticket__descriptor;
extern const ProtobufCMessageDescriptor ccddbapp_detail_common__descriptor;
extern const ProtobufCMessageDescriptor cmsg_app_rights__descriptor;
extern const ProtobufCMessageDescriptor ccurator_preferences__descriptor;
extern const ProtobufCMessageDescriptor clocalization_token__descriptor;
extern const ProtobufCMessageDescriptor cclan_event_user_news_tuple__descriptor;
extern const ProtobufCMessageDescriptor cclan_match_event_by_range__descriptor;
extern const ProtobufCMessageDescriptor ccommunity__clan_announcement_info__descriptor;
extern const ProtobufCMessageDescriptor cclan_event_data__descriptor;
extern const ProtobufCMessageDescriptor cbilling__address__descriptor;
extern const ProtobufCMessageDescriptor cpackage_reservation_status__descriptor;
extern const ProtobufCMessageDescriptor cmsg_key_value_pair__descriptor;
extern const ProtobufCMessageDescriptor cmsg_key_value_set__descriptor;

/* --- messages --- */

typedef enum {
  CMSG_IPADDRESS__IP__NOT_SET = 0,
  CMSG_IPADDRESS__IP_V4 = 1,
  CMSG_IPADDRESS__IP_V6 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_IPADDRESS__IP__CASE)
} CMsgIPAddress__IpCase;

struct CMsgIPAddress : public ProtobufCppMessage
{
  CMsgIPAddress() :
     ProtobufCppMessage(cmsg_ipaddress__descriptor)
  {}

  CMsgIPAddress__IpCase ip_case;
  union {
    uint32_t v4;
    ProtobufCBinaryData v6;
  };
};

struct CMsgIPAddressBucket : public ProtobufCppMessage
{
  CMsgIPAddressBucket() :
     ProtobufCppMessage(cmsg_ipaddress_bucket__descriptor)
  {}

  CMsgIPAddress *original_ip_address;
  protobuf_c_boolean has_bucket;
  uint64_t bucket;
};

struct CMsgGCRoutingProtoBufHeader : public ProtobufCppMessage
{
  CMsgGCRoutingProtoBufHeader() :
     ProtobufCppMessage(cmsg_gcrouting_proto_buf_header__descriptor)
  {}

  protobuf_c_boolean has_dst_gcid_queue;
  uint64_t dst_gcid_queue;
  protobuf_c_boolean has_dst_gc_dir_index;
  uint32_t dst_gc_dir_index;
};

typedef enum {
  CMSG_PROTO_BUF_HEADER__IP_ADDR__NOT_SET = 0,
  CMSG_PROTO_BUF_HEADER__IP_ADDR_IP = 15,
  CMSG_PROTO_BUF_HEADER__IP_ADDR_IP_V6 = 29
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMSG_PROTO_BUF_HEADER__IP_ADDR__CASE)
} CMsgProtoBufHeader__IpAddrCase;

struct CMsgProtoBufHeader : public ProtobufCppMessage
{
  CMsgProtoBufHeader() :
     ProtobufCppMessage(cmsg_proto_buf_header__descriptor)
  {}

  bool failed() const {
     return has_eresult && eresult != 1;
  }

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  protobuf_c_boolean has_client_sessionid;
  int32_t client_sessionid;
  protobuf_c_boolean has_routing_appid;
  uint32_t routing_appid;
  protobuf_c_boolean has_jobid_source;
  uint64_t jobid_source;
  protobuf_c_boolean has_jobid_target;
  uint64_t jobid_target;
  char *target_job_name;
  protobuf_c_boolean has_seq_num;
  int32_t seq_num;
  protobuf_c_boolean has_eresult;
  int32_t eresult;
  char *error_message;
  protobuf_c_boolean has_auth_account_flags;
  uint32_t auth_account_flags;
  protobuf_c_boolean has_token_source;
  uint32_t token_source;
  protobuf_c_boolean has_admin_spoofing_user;
  protobuf_c_boolean admin_spoofing_user;
  protobuf_c_boolean has_transport_error;
  int32_t transport_error;
  protobuf_c_boolean has_messageid;
  uint64_t messageid;
  protobuf_c_boolean has_publisher_group_id;
  uint32_t publisher_group_id;
  protobuf_c_boolean has_sysid;
  uint32_t sysid;
  protobuf_c_boolean has_trace_tag;
  uint64_t trace_tag;
  protobuf_c_boolean has_webapi_key_id;
  uint32_t webapi_key_id;
  protobuf_c_boolean has_is_from_external_source;
  protobuf_c_boolean is_from_external_source;
  size_t n_forward_to_sysid;
  uint32_t *forward_to_sysid;
  protobuf_c_boolean has_cm_sysid;
  uint32_t cm_sysid;
  protobuf_c_boolean has_launcher_type;
  uint32_t launcher_type;
  protobuf_c_boolean has_realm;
  uint32_t realm;
  protobuf_c_boolean has_timeout_ms;
  int32_t timeout_ms;
  char *debug_source;
  protobuf_c_boolean has_debug_source_string_index;
  uint32_t debug_source_string_index;
  protobuf_c_boolean has_token_id;
  uint64_t token_id;
  CMsgGCRoutingProtoBufHeader *routing_gc;
  CMsgProtoBufHeader__IpAddrCase ip_addr_case;
  union {
    uint32_t ip;
    ProtobufCBinaryData ip_v6;
  };
};

struct CMsgMulti : public ProtobufCppMessage
{
  CMsgMulti() :
     ProtobufCppMessage(cmsg_multi__descriptor)
  {}

  protobuf_c_boolean has_size_unzipped;
  uint32_t size_unzipped;
  protobuf_c_boolean has_message_body;
  ProtobufCBinaryData message_body;
};

struct CMsgProtobufWrapped : public ProtobufCppMessage
{
  CMsgProtobufWrapped() :
     ProtobufCppMessage(cmsg_protobuf_wrapped__descriptor)
  {}

  protobuf_c_boolean has_message_body;
  ProtobufCBinaryData message_body;
};

struct CMsgAuthTicket : public ProtobufCppMessage
{
  CMsgAuthTicket() :
     ProtobufCppMessage(cmsg_auth_ticket__descriptor)
  {}

  protobuf_c_boolean has_estate;
  uint32_t estate;
  protobuf_c_boolean has_eresult;
  uint32_t eresult;
  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  protobuf_c_boolean has_gameid;
  uint64_t gameid;
  protobuf_c_boolean has_h_steam_pipe;
  uint32_t h_steam_pipe;
  protobuf_c_boolean has_ticket_crc;
  uint32_t ticket_crc;
  protobuf_c_boolean has_ticket;
  ProtobufCBinaryData ticket;
  protobuf_c_boolean has_server_secret;
  ProtobufCBinaryData server_secret;
};

struct CCDDBAppDetailCommon : public ProtobufCppMessage
{
  CCDDBAppDetailCommon() :
     ProtobufCppMessage(ccddbapp_detail_common__descriptor)
  {}

  protobuf_c_boolean has_appid;
  uint32_t appid;
  char *name;
  char *icon;
  protobuf_c_boolean has_tool;
  protobuf_c_boolean tool;
  protobuf_c_boolean has_demo;
  protobuf_c_boolean demo;
  protobuf_c_boolean has_media;
  protobuf_c_boolean media;
  protobuf_c_boolean has_community_visible_stats;
  protobuf_c_boolean community_visible_stats;
  char *friendly_name;
  char *propagation;
  protobuf_c_boolean has_has_adult_content;
  protobuf_c_boolean has_adult_content;
  protobuf_c_boolean has_is_visible_in_steam_china;
  protobuf_c_boolean is_visible_in_steam_china;
  protobuf_c_boolean has_app_type;
  uint32_t app_type;
  protobuf_c_boolean has_has_adult_content_sex;
  protobuf_c_boolean has_adult_content_sex;
  protobuf_c_boolean has_has_adult_content_violence;
  protobuf_c_boolean has_adult_content_violence;
  size_t n_content_descriptorids;
  uint32_t *content_descriptorids;
};

struct CMsgAppRights : public ProtobufCppMessage
{
  CMsgAppRights() :
     ProtobufCppMessage(cmsg_app_rights__descriptor)
  {}

  protobuf_c_boolean has_edit_info;
  protobuf_c_boolean edit_info;
  protobuf_c_boolean has_publish;
  protobuf_c_boolean publish;
  protobuf_c_boolean has_view_error_data;
  protobuf_c_boolean view_error_data;
  protobuf_c_boolean has_download;
  protobuf_c_boolean download;
  protobuf_c_boolean has_upload_cdkeys;
  protobuf_c_boolean upload_cdkeys;
  protobuf_c_boolean has_generate_cdkeys;
  protobuf_c_boolean generate_cdkeys;
  protobuf_c_boolean has_view_financials;
  protobuf_c_boolean view_financials;
  protobuf_c_boolean has_manage_ceg;
  protobuf_c_boolean manage_ceg;
  protobuf_c_boolean has_manage_signing;
  protobuf_c_boolean manage_signing;
  protobuf_c_boolean has_manage_cdkeys;
  protobuf_c_boolean manage_cdkeys;
  protobuf_c_boolean has_edit_marketing;
  protobuf_c_boolean edit_marketing;
  protobuf_c_boolean has_economy_support;
  protobuf_c_boolean economy_support;
  protobuf_c_boolean has_economy_support_supervisor;
  protobuf_c_boolean economy_support_supervisor;
  protobuf_c_boolean has_manage_pricing;
  protobuf_c_boolean manage_pricing;
  protobuf_c_boolean has_broadcast_live;
  protobuf_c_boolean broadcast_live;
  protobuf_c_boolean has_view_marketing_traffic;
  protobuf_c_boolean view_marketing_traffic;
  protobuf_c_boolean has_edit_store_display_content;
  protobuf_c_boolean edit_store_display_content;
};

struct CCuratorPreferences : public ProtobufCppMessage
{
  CCuratorPreferences() :
     ProtobufCppMessage(ccurator_preferences__descriptor)
  {}

  protobuf_c_boolean has_supported_languages;
  uint32_t supported_languages;
  protobuf_c_boolean has_platform_windows;
  protobuf_c_boolean platform_windows;
  protobuf_c_boolean has_platform_mac;
  protobuf_c_boolean platform_mac;
  protobuf_c_boolean has_platform_linux;
  protobuf_c_boolean platform_linux;
  protobuf_c_boolean has_vr_content;
  protobuf_c_boolean vr_content;
  protobuf_c_boolean has_adult_content_violence;
  protobuf_c_boolean adult_content_violence;
  protobuf_c_boolean has_adult_content_sex;
  protobuf_c_boolean adult_content_sex;
  protobuf_c_boolean has_timestamp_updated;
  uint32_t timestamp_updated;
  size_t n_tagids_curated;
  uint32_t *tagids_curated;
  size_t n_tagids_filtered;
  uint32_t *tagids_filtered;
  char *website_title;
  char *website_url;
  char *discussion_url;
  protobuf_c_boolean has_show_broadcast;
  protobuf_c_boolean show_broadcast;
};

struct CLocalizationToken : public ProtobufCppMessage
{
  CLocalizationToken() :
     ProtobufCppMessage(clocalization_token__descriptor)
  {}

  protobuf_c_boolean has_language;
  uint32_t language;
  char *localized_string;
};

struct CClanEventUserNewsTuple : public ProtobufCppMessage
{
  CClanEventUserNewsTuple() :
     ProtobufCppMessage(cclan_event_user_news_tuple__descriptor)
  {}

  protobuf_c_boolean has_clanid;
  uint32_t clanid;
  protobuf_c_boolean has_event_gid;
  uint64_t event_gid;
  protobuf_c_boolean has_announcement_gid;
  uint64_t announcement_gid;
  protobuf_c_boolean has_rtime_start;
  uint32_t rtime_start;
  protobuf_c_boolean has_rtime_end;
  uint32_t rtime_end;
  protobuf_c_boolean has_priority_score;
  uint32_t priority_score;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_clamp_range_slot;
  uint32_t clamp_range_slot;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_rtime32_last_modified;
  uint32_t rtime32_last_modified;
};

struct CClanMatchEventByRange : public ProtobufCppMessage
{
  CClanMatchEventByRange() :
     ProtobufCppMessage(cclan_match_event_by_range__descriptor)
  {}

  protobuf_c_boolean has_rtime_before;
  uint32_t rtime_before;
  protobuf_c_boolean has_rtime_after;
  uint32_t rtime_after;
  protobuf_c_boolean has_qualified;
  uint32_t qualified;
  size_t n_events;
  CClanEventUserNewsTuple **events;
};

struct CCommunityClanAnnouncementInfo : public ProtobufCppMessage
{
  CCommunityClanAnnouncementInfo() :
     ProtobufCppMessage(ccommunity__clan_announcement_info__descriptor)
  {}

  protobuf_c_boolean has_gid;
  uint64_t gid;
  protobuf_c_boolean has_clanid;
  uint64_t clanid;
  protobuf_c_boolean has_posterid;
  uint64_t posterid;
  char *headline;
  protobuf_c_boolean has_posttime;
  uint32_t posttime;
  protobuf_c_boolean has_updatetime;
  uint32_t updatetime;
  char *body;
  protobuf_c_boolean has_commentcount;
  int32_t commentcount;
  size_t n_tags;
  char **tags;
  protobuf_c_boolean has_language;
  int32_t language;
  protobuf_c_boolean has_hidden;
  protobuf_c_boolean hidden;
  protobuf_c_boolean has_forum_topic_id;
  uint64_t forum_topic_id;
  protobuf_c_boolean has_event_gid;
  uint64_t event_gid;
  protobuf_c_boolean has_voteupcount;
  int32_t voteupcount;
  protobuf_c_boolean has_votedowncount;
  int32_t votedowncount;
  protobuf_c_boolean has_ban_check_result;
  EBanContentCheckResult ban_check_result;
  protobuf_c_boolean has_banned;
  protobuf_c_boolean banned;
};

struct CClanEventData : public ProtobufCppMessage
{
  CClanEventData() :
     ProtobufCppMessage(cclan_event_data__descriptor)
  {}

  protobuf_c_boolean has_gid;
  uint64_t gid;
  protobuf_c_boolean has_clan_steamid;
  uint64_t clan_steamid;
  char *event_name;
  protobuf_c_boolean has_event_type;
  EProtoClanEventType event_type;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  char *server_address;
  char *server_password;
  protobuf_c_boolean has_rtime32_start_time;
  uint32_t rtime32_start_time;
  protobuf_c_boolean has_rtime32_end_time;
  uint32_t rtime32_end_time;
  protobuf_c_boolean has_comment_count;
  int32_t comment_count;
  protobuf_c_boolean has_creator_steamid;
  uint64_t creator_steamid;
  protobuf_c_boolean has_last_update_steamid;
  uint64_t last_update_steamid;
  char *event_notes;
  char *jsondata;
  CCommunityClanAnnouncementInfo *announcement_body;
  protobuf_c_boolean has_published;
  protobuf_c_boolean published;
  protobuf_c_boolean has_hidden;
  protobuf_c_boolean hidden;
  protobuf_c_boolean has_rtime32_visibility_start;
  uint32_t rtime32_visibility_start;
  protobuf_c_boolean has_rtime32_visibility_end;
  uint32_t rtime32_visibility_end;
  protobuf_c_boolean has_broadcaster_accountid;
  uint32_t broadcaster_accountid;
  protobuf_c_boolean has_follower_count;
  uint32_t follower_count;
  protobuf_c_boolean has_ignore_count;
  uint32_t ignore_count;
  protobuf_c_boolean has_forum_topic_id;
  uint64_t forum_topic_id;
  protobuf_c_boolean has_rtime32_last_modified;
  uint32_t rtime32_last_modified;
  protobuf_c_boolean has_news_post_gid;
  uint64_t news_post_gid;
  protobuf_c_boolean has_rtime_mod_reviewed;
  uint32_t rtime_mod_reviewed;
  protobuf_c_boolean has_featured_app_tagid;
  uint32_t featured_app_tagid;
  size_t n_referenced_appids;
  uint32_t *referenced_appids;
  protobuf_c_boolean has_build_id;
  uint32_t build_id;
  char *build_branch;
};

struct CBillingAddress : public ProtobufCppMessage
{
  CBillingAddress() :
     ProtobufCppMessage(cbilling__address__descriptor)
  {}

  char *first_name;
  char *last_name;
  char *address1;
  char *address2;
  char *city;
  char *us_state;
  char *country_code;
  char *postcode;
  protobuf_c_boolean has_zip_plus4;
  int32_t zip_plus4;
  char *phone;
};

struct CPackageReservationStatus : public ProtobufCppMessage
{
  CPackageReservationStatus() :
     ProtobufCppMessage(cpackage_reservation_status__descriptor)
  {}

  protobuf_c_boolean has_packageid;
  uint32_t packageid;
  protobuf_c_boolean has_reservation_state;
  int32_t reservation_state;
  protobuf_c_boolean has_queue_position;
  int32_t queue_position;
  protobuf_c_boolean has_total_queue_size;
  int32_t total_queue_size;
  char *reservation_country_code;
  protobuf_c_boolean has_expired;
  protobuf_c_boolean expired;
  protobuf_c_boolean has_time_expires;
  uint32_t time_expires;
  protobuf_c_boolean has_time_reserved;
  uint32_t time_reserved;
};

struct CMsgKeyValuePair : public ProtobufCppMessage
{
  CMsgKeyValuePair() :
     ProtobufCppMessage(cmsg_key_value_pair__descriptor)
  {}

  char *name;
  char *value;
};

struct CMsgKeyValueSet : public ProtobufCppMessage
{
  CMsgKeyValueSet() :
     ProtobufCppMessage(cmsg_key_value_set__descriptor)
  {}

  size_t n_pairs;
  CMsgKeyValuePair **pairs;
};

size_t cmsg_ipaddress__get_packed_size
                     (const CMsgIPAddress   *message);
size_t cmsg_ipaddress__pack
                     (const CMsgIPAddress   *message,
                      uint8_t             *out);
size_t cmsg_ipaddress__pack_to_buffer
                     (const CMsgIPAddress   *message,
                      ProtobufCBuffer     *buffer);
CMsgIPAddress *
       cmsg_ipaddress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_ipaddress__free_unpacked
                     (CMsgIPAddress *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_ipaddress_bucket__get_packed_size
                     (const CMsgIPAddressBucket   *message);
size_t cmsg_ipaddress_bucket__pack
                     (const CMsgIPAddressBucket   *message,
                      uint8_t             *out);
size_t cmsg_ipaddress_bucket__pack_to_buffer
                     (const CMsgIPAddressBucket   *message,
                      ProtobufCBuffer     *buffer);
CMsgIPAddressBucket *
       cmsg_ipaddress_bucket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_ipaddress_bucket__free_unpacked
                     (CMsgIPAddressBucket *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_gcrouting_proto_buf_header__get_packed_size
                     (const CMsgGCRoutingProtoBufHeader   *message);
size_t cmsg_gcrouting_proto_buf_header__pack
                     (const CMsgGCRoutingProtoBufHeader   *message,
                      uint8_t             *out);
size_t cmsg_gcrouting_proto_buf_header__pack_to_buffer
                     (const CMsgGCRoutingProtoBufHeader   *message,
                      ProtobufCBuffer     *buffer);
CMsgGCRoutingProtoBufHeader *
       cmsg_gcrouting_proto_buf_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gcrouting_proto_buf_header__free_unpacked
                     (CMsgGCRoutingProtoBufHeader *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_proto_buf_header__get_packed_size
                     (const CMsgProtoBufHeader   *message);
size_t cmsg_proto_buf_header__pack
                     (const CMsgProtoBufHeader   *message,
                      uint8_t             *out);
size_t cmsg_proto_buf_header__pack_to_buffer
                     (const CMsgProtoBufHeader   *message,
                      ProtobufCBuffer     *buffer);
CMsgProtoBufHeader *
       cmsg_proto_buf_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_proto_buf_header__free_unpacked
                     (CMsgProtoBufHeader *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_multi__get_packed_size
                     (const CMsgMulti   *message);
size_t cmsg_multi__pack
                     (const CMsgMulti   *message,
                      uint8_t             *out);
size_t cmsg_multi__pack_to_buffer
                     (const CMsgMulti   *message,
                      ProtobufCBuffer     *buffer);
CMsgMulti *
       cmsg_multi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_multi__free_unpacked
                     (CMsgMulti *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_protobuf_wrapped__get_packed_size
                     (const CMsgProtobufWrapped   *message);
size_t cmsg_protobuf_wrapped__pack
                     (const CMsgProtobufWrapped   *message,
                      uint8_t             *out);
size_t cmsg_protobuf_wrapped__pack_to_buffer
                     (const CMsgProtobufWrapped   *message,
                      ProtobufCBuffer     *buffer);
CMsgProtobufWrapped *
       cmsg_protobuf_wrapped__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_protobuf_wrapped__free_unpacked
                     (CMsgProtobufWrapped *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_auth_ticket__get_packed_size
                     (const CMsgAuthTicket   *message);
size_t cmsg_auth_ticket__pack
                     (const CMsgAuthTicket   *message,
                      uint8_t             *out);
size_t cmsg_auth_ticket__pack_to_buffer
                     (const CMsgAuthTicket   *message,
                      ProtobufCBuffer     *buffer);
CMsgAuthTicket *
       cmsg_auth_ticket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_auth_ticket__free_unpacked
                     (CMsgAuthTicket *message,
                      ProtobufCAllocator *allocator);
size_t ccddbapp_detail_common__get_packed_size
                     (const CCDDBAppDetailCommon   *message);
size_t ccddbapp_detail_common__pack
                     (const CCDDBAppDetailCommon   *message,
                      uint8_t             *out);
size_t ccddbapp_detail_common__pack_to_buffer
                     (const CCDDBAppDetailCommon   *message,
                      ProtobufCBuffer     *buffer);
CCDDBAppDetailCommon *
       ccddbapp_detail_common__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ccddbapp_detail_common__free_unpacked
                     (CCDDBAppDetailCommon *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_app_rights__get_packed_size
                     (const CMsgAppRights   *message);
size_t cmsg_app_rights__pack
                     (const CMsgAppRights   *message,
                      uint8_t             *out);
size_t cmsg_app_rights__pack_to_buffer
                     (const CMsgAppRights   *message,
                      ProtobufCBuffer     *buffer);
CMsgAppRights *
       cmsg_app_rights__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_app_rights__free_unpacked
                     (CMsgAppRights *message,
                      ProtobufCAllocator *allocator);
size_t ccurator_preferences__get_packed_size
                     (const CCuratorPreferences   *message);
size_t ccurator_preferences__pack
                     (const CCuratorPreferences   *message,
                      uint8_t             *out);
size_t ccurator_preferences__pack_to_buffer
                     (const CCuratorPreferences   *message,
                      ProtobufCBuffer     *buffer);
CCuratorPreferences *
       ccurator_preferences__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ccurator_preferences__free_unpacked
                     (CCuratorPreferences *message,
                      ProtobufCAllocator *allocator);
size_t clocalization_token__get_packed_size
                     (const CLocalizationToken   *message);
size_t clocalization_token__pack
                     (const CLocalizationToken   *message,
                      uint8_t             *out);
size_t clocalization_token__pack_to_buffer
                     (const CLocalizationToken   *message,
                      ProtobufCBuffer     *buffer);
CLocalizationToken *
       clocalization_token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   clocalization_token__free_unpacked
                     (CLocalizationToken *message,
                      ProtobufCAllocator *allocator);
size_t cclan_event_user_news_tuple__get_packed_size
                     (const CClanEventUserNewsTuple   *message);
size_t cclan_event_user_news_tuple__pack
                     (const CClanEventUserNewsTuple   *message,
                      uint8_t             *out);
size_t cclan_event_user_news_tuple__pack_to_buffer
                     (const CClanEventUserNewsTuple   *message,
                      ProtobufCBuffer     *buffer);
CClanEventUserNewsTuple *
       cclan_event_user_news_tuple__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclan_event_user_news_tuple__free_unpacked
                     (CClanEventUserNewsTuple *message,
                      ProtobufCAllocator *allocator);
size_t cclan_match_event_by_range__get_packed_size
                     (const CClanMatchEventByRange   *message);
size_t cclan_match_event_by_range__pack
                     (const CClanMatchEventByRange   *message,
                      uint8_t             *out);
size_t cclan_match_event_by_range__pack_to_buffer
                     (const CClanMatchEventByRange   *message,
                      ProtobufCBuffer     *buffer);
CClanMatchEventByRange *
       cclan_match_event_by_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclan_match_event_by_range__free_unpacked
                     (CClanMatchEventByRange *message,
                      ProtobufCAllocator *allocator);
size_t ccommunity__clan_announcement_info__get_packed_size
                     (const CCommunityClanAnnouncementInfo   *message);
size_t ccommunity__clan_announcement_info__pack
                     (const CCommunityClanAnnouncementInfo   *message,
                      uint8_t             *out);
size_t ccommunity__clan_announcement_info__pack_to_buffer
                     (const CCommunityClanAnnouncementInfo   *message,
                      ProtobufCBuffer     *buffer);
CCommunityClanAnnouncementInfo *
       ccommunity__clan_announcement_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ccommunity__clan_announcement_info__free_unpacked
                     (CCommunityClanAnnouncementInfo *message,
                      ProtobufCAllocator *allocator);
size_t cclan_event_data__get_packed_size
                     (const CClanEventData   *message);
size_t cclan_event_data__pack
                     (const CClanEventData   *message,
                      uint8_t             *out);
size_t cclan_event_data__pack_to_buffer
                     (const CClanEventData   *message,
                      ProtobufCBuffer     *buffer);
CClanEventData *
       cclan_event_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclan_event_data__free_unpacked
                     (CClanEventData *message,
                      ProtobufCAllocator *allocator);
size_t cbilling__address__get_packed_size
                     (const CBillingAddress   *message);
size_t cbilling__address__pack
                     (const CBillingAddress   *message,
                      uint8_t             *out);
size_t cbilling__address__pack_to_buffer
                     (const CBillingAddress   *message,
                      ProtobufCBuffer     *buffer);
CBillingAddress *
       cbilling__address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cbilling__address__free_unpacked
                     (CBillingAddress *message,
                      ProtobufCAllocator *allocator);
size_t cpackage_reservation_status__get_packed_size
                     (const CPackageReservationStatus   *message);
size_t cpackage_reservation_status__pack
                     (const CPackageReservationStatus   *message,
                      uint8_t             *out);
size_t cpackage_reservation_status__pack_to_buffer
                     (const CPackageReservationStatus   *message,
                      ProtobufCBuffer     *buffer);
CPackageReservationStatus *
       cpackage_reservation_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpackage_reservation_status__free_unpacked
                     (CPackageReservationStatus *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_key_value_pair__get_packed_size
                     (const CMsgKeyValuePair   *message);
size_t cmsg_key_value_pair__pack
                     (const CMsgKeyValuePair   *message,
                      uint8_t             *out);
size_t cmsg_key_value_pair__pack_to_buffer
                     (const CMsgKeyValuePair   *message,
                      ProtobufCBuffer     *buffer);
CMsgKeyValuePair *
       cmsg_key_value_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_key_value_pair__free_unpacked
                     (CMsgKeyValuePair *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_key_value_set__get_packed_size
                     (const CMsgKeyValueSet   *message);
size_t cmsg_key_value_set__pack
                     (const CMsgKeyValueSet   *message,
                      uint8_t             *out);
size_t cmsg_key_value_set__pack_to_buffer
                     (const CMsgKeyValueSet   *message,
                      ProtobufCBuffer     *buffer);
CMsgKeyValueSet *
       cmsg_key_value_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_key_value_set__free_unpacked
                     (CMsgKeyValueSet *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CMsgIPAddress_Closure)
                 (const CMsgIPAddress *message,
                  void *closure_data);
typedef void (*CMsgIPAddressBucket_Closure)
                 (const CMsgIPAddressBucket *message,
                  void *closure_data);
typedef void (*CMsgGCRoutingProtoBufHeader_Closure)
                 (const CMsgGCRoutingProtoBufHeader *message,
                  void *closure_data);
typedef void (*CMsgProtoBufHeader_Closure)
                 (const CMsgProtoBufHeader *message,
                  void *closure_data);
typedef void (*CMsgMulti_Closure)
                 (const CMsgMulti *message,
                  void *closure_data);
typedef void (*CMsgProtobufWrapped_Closure)
                 (const CMsgProtobufWrapped *message,
                  void *closure_data);
typedef void (*CMsgAuthTicket_Closure)
                 (const CMsgAuthTicket *message,
                  void *closure_data);
typedef void (*CCDDBAppDetailCommon_Closure)
                 (const CCDDBAppDetailCommon *message,
                  void *closure_data);
typedef void (*CMsgAppRights_Closure)
                 (const CMsgAppRights *message,
                  void *closure_data);
typedef void (*CCuratorPreferences_Closure)
                 (const CCuratorPreferences *message,
                  void *closure_data);
typedef void (*CLocalizationToken_Closure)
                 (const CLocalizationToken *message,
                  void *closure_data);
typedef void (*CClanEventUserNewsTuple_Closure)
                 (const CClanEventUserNewsTuple *message,
                  void *closure_data);
typedef void (*CClanMatchEventByRange_Closure)
                 (const CClanMatchEventByRange *message,
                  void *closure_data);
typedef void (*CCommunityClanAnnouncementInfo_Closure)
                 (const CCommunityClanAnnouncementInfo *message,
                  void *closure_data);
typedef void (*CClanEventData_Closure)
                 (const CClanEventData *message,
                  void *closure_data);
typedef void (*CBillingAddress_Closure)
                 (const CBillingAddress *message,
                  void *closure_data);
typedef void (*CPackageReservationStatus_Closure)
                 (const CPackageReservationStatus *message,
                  void *closure_data);
typedef void (*CMsgKeyValuePair_Closure)
                 (const CMsgKeyValuePair *message,
                  void *closure_data);
typedef void (*CMsgKeyValueSet_Closure)
                 (const CMsgKeyValueSet *message,
                  void *closure_data);

/* --- services --- */


PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_steammessages_5fbase_2eproto__INCLUDED */
