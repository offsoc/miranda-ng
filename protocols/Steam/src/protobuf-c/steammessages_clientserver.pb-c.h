/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_clientserver.proto */

#ifndef PROTOBUF_C_steammessages_5fclientserver_2eproto__INCLUDED
#define PROTOBUF_C_steammessages_5fclientserver_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "steammessages_base.pb-c.h"
#include "encrypted_app_ticket.pb-c.h"

struct CMsgClientRegisterAuthTicketWithCM;
struct CMsgClientTicketAuthComplete;
struct CMsgClientCMList;
struct CMsgClientP2PConnectionInfo;
struct CMsgClientP2PConnectionFailInfo;
struct CMsgClientNetworkingCertRequest;
struct CMsgClientNetworkingCertReply;
struct CMsgClientNetworkingMobileCertRequest;
struct CMsgClientNetworkingMobileCertReply;
struct CMsgClientGetAppOwnershipTicket;
struct CMsgClientGetAppOwnershipTicketResponse;
struct CMsgClientSessionToken;
struct CMsgClientGameConnectTokens;
struct CMsgClientGamesPlayed;
struct CMsgClientGamesPlayed__ProcessInfo;
struct CMsgClientGamesPlayed__GamePlayed;
struct CMsgGSApprove;
struct CMsgGSDeny;
struct CMsgGSKick;
struct CMsgClientAuthList;
struct CMsgClientAuthListAck;
struct CMsgClientLicenseList;
struct CMsgClientLicenseList__License;
struct CMsgClientIsLimitedAccount;
struct CMsgClientRequestedClientStats;
struct CMsgClientRequestedClientStats__StatsToSend;
struct CMsgClientStat2;
struct CMsgClientStat2__StatDetail;
struct CMsgClientInviteToGame;
struct CMsgClientChatInvite;
struct CMsgClientConnectionStats;
struct CMsgClientConnectionStats__StatsLogon;
struct CMsgClientConnectionStats__StatsUDP;
struct CMsgClientConnectionStats__StatsVConn;
struct CMsgClientServersAvailable;
struct CMsgClientServersAvailable__ServerTypesAvailable;
struct CMsgClientReportOverlayDetourFailure;
struct CMsgClientRequestEncryptedAppTicket;
struct CMsgClientRequestEncryptedAppTicketResponse;
struct CMsgClientWalletInfoUpdate;
struct CMsgClientAMGetClanOfficers;
struct CMsgClientAMGetClanOfficersResponse;
struct CMsgClientAMGetPersonaNameHistory;
struct CMsgClientAMGetPersonaNameHistory__IdInstance;
struct CMsgClientAMGetPersonaNameHistoryResponse;
struct CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance;
struct CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance;
struct CMsgClientDeregisterWithServer;
struct CMsgClientClanState;
struct CMsgClientClanState__NameInfo;
struct CMsgClientClanState__UserCounts;
struct CMsgClientClanState__Event;


/* --- enums --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cmsg_client_register_auth_ticket_with_cm__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_ticket_auth_complete__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_cmlist__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_p2_pconnection_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_p2_pconnection_fail_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_networking_cert_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_networking_cert_reply__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_networking_mobile_cert_request__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_networking_mobile_cert_reply__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_get_app_ownership_ticket__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_get_app_ownership_ticket_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_session_token__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_game_connect_tokens__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_games_played__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_games_played__process_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_games_played__game_played__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gsapprove__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gsdeny__descriptor;
extern const ProtobufCMessageDescriptor cmsg_gskick__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_auth_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_auth_list_ack__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_license_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_license_list__license__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_is_limited_account__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_requested_client_stats__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_requested_client_stats__stats_to_send__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_stat2__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_stat2__stat_detail__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_invite_to_game__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_chat_invite__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_connection_stats__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_connection_stats__stats__logon__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_connection_stats__stats__udp__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_connection_stats__stats__vconn__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_servers_available__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_servers_available__server__types__available__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_report_overlay_detour_failure__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_request_encrypted_app_ticket__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_request_encrypted_app_ticket_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_wallet_info_update__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_amget_clan_officers__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_amget_clan_officers_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history__id_instance__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history_response__name_table_instance__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_deregister_with_server__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_clan_state__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_clan_state__name_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_clan_state__user_counts__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_clan_state__event__descriptor;

/* --- messages --- */

extern "C" void message_init_generic(const ProtobufCMessageDescriptor * desc, ProtobufCMessage * message);

struct CMsgClientRegisterAuthTicketWithCM : public ProtobufCppMessage
{
  CMsgClientRegisterAuthTicketWithCM() :
     ProtobufCppMessage(cmsg_client_register_auth_ticket_with_cm__descriptor)
  {}

  protobuf_c_boolean has_protocol_version;
  uint32_t protocol_version;
  protobuf_c_boolean has_ticket;
  ProtobufCBinaryData ticket;
  protobuf_c_boolean has_client_instance_id;
  uint64_t client_instance_id;
};

struct CMsgClientTicketAuthComplete : public ProtobufCppMessage
{
  CMsgClientTicketAuthComplete() :
     ProtobufCppMessage(cmsg_client_ticket_auth_complete__descriptor)
  {}

  protobuf_c_boolean has_steam_id;
  uint64_t steam_id;
  protobuf_c_boolean has_game_id;
  uint64_t game_id;
  protobuf_c_boolean has_estate;
  uint32_t estate;
  protobuf_c_boolean has_eauth_session_response;
  uint32_t eauth_session_response;
  protobuf_c_boolean has_deprecated_ticket;
  ProtobufCBinaryData deprecated_ticket;
  protobuf_c_boolean has_ticket_crc;
  uint32_t ticket_crc;
  protobuf_c_boolean has_ticket_sequence;
  uint32_t ticket_sequence;
  protobuf_c_boolean has_owner_steam_id;
  uint64_t owner_steam_id;
};

struct CMsgClientCMList : public ProtobufCppMessage
{
  CMsgClientCMList() :
     ProtobufCppMessage(cmsg_client_cmlist__descriptor)
  {}

  size_t n_cm_addresses;
  uint32_t *cm_addresses;
  size_t n_cm_ports;
  uint32_t *cm_ports;
  size_t n_cm_websocket_addresses;
  char **cm_websocket_addresses;
  protobuf_c_boolean has_percent_default_to_websocket;
  uint32_t percent_default_to_websocket;
};

struct CMsgClientP2PConnectionInfo : public ProtobufCppMessage
{
  CMsgClientP2PConnectionInfo() :
     ProtobufCppMessage(cmsg_client_p2_pconnection_info__descriptor)
  {}

  protobuf_c_boolean has_steam_id_dest;
  uint64_t steam_id_dest;
  protobuf_c_boolean has_steam_id_src;
  uint64_t steam_id_src;
  protobuf_c_boolean has_app_id;
  uint32_t app_id;
  protobuf_c_boolean has_candidate;
  ProtobufCBinaryData candidate;
  protobuf_c_boolean has_legacy_connection_id_src;
  uint64_t legacy_connection_id_src;
  protobuf_c_boolean has_rendezvous;
  ProtobufCBinaryData rendezvous;
};

struct CMsgClientP2PConnectionFailInfo : public ProtobufCppMessage
{
  CMsgClientP2PConnectionFailInfo() :
     ProtobufCppMessage(cmsg_client_p2_pconnection_fail_info__descriptor)
  {}

  protobuf_c_boolean has_steam_id_dest;
  uint64_t steam_id_dest;
  protobuf_c_boolean has_steam_id_src;
  uint64_t steam_id_src;
  protobuf_c_boolean has_app_id;
  uint32_t app_id;
  protobuf_c_boolean has_ep2p_session_error;
  uint32_t ep2p_session_error;
  protobuf_c_boolean has_connection_id_dest;
  uint64_t connection_id_dest;
  protobuf_c_boolean has_close_reason;
  uint32_t close_reason;
  char *close_message;
};

struct CMsgClientNetworkingCertRequest : public ProtobufCppMessage
{
  CMsgClientNetworkingCertRequest() :
     ProtobufCppMessage(cmsg_client_networking_cert_request__descriptor)
  {}

  protobuf_c_boolean has_key_data;
  ProtobufCBinaryData key_data;
  protobuf_c_boolean has_app_id;
  uint32_t app_id;
};

struct CMsgClientNetworkingCertReply : public ProtobufCppMessage
{
  CMsgClientNetworkingCertReply() :
     ProtobufCppMessage(cmsg_client_networking_cert_reply__descriptor)
  {}

  protobuf_c_boolean has_cert;
  ProtobufCBinaryData cert;
  protobuf_c_boolean has_ca_key_id;
  uint64_t ca_key_id;
  protobuf_c_boolean has_ca_signature;
  ProtobufCBinaryData ca_signature;
};

struct CMsgClientNetworkingMobileCertRequest : public ProtobufCppMessage
{
  CMsgClientNetworkingMobileCertRequest() :
     ProtobufCppMessage(cmsg_client_networking_mobile_cert_request__descriptor)
  {}

  protobuf_c_boolean has_app_id;
  uint32_t app_id;
};

struct CMsgClientNetworkingMobileCertReply : public ProtobufCppMessage
{
  CMsgClientNetworkingMobileCertReply() :
     ProtobufCppMessage(cmsg_client_networking_mobile_cert_reply__descriptor)
  {}

  char *encoded_cert;
};

struct CMsgClientGetAppOwnershipTicket : public ProtobufCppMessage
{
  CMsgClientGetAppOwnershipTicket() :
     ProtobufCppMessage(cmsg_client_get_app_ownership_ticket__descriptor)
  {}

  protobuf_c_boolean has_app_id;
  uint32_t app_id;
};

struct CMsgClientGetAppOwnershipTicketResponse : public ProtobufCppMessage
{
  CMsgClientGetAppOwnershipTicketResponse() :
     ProtobufCppMessage(cmsg_client_get_app_ownership_ticket_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  uint32_t eresult;
  protobuf_c_boolean has_app_id;
  uint32_t app_id;
  protobuf_c_boolean has_ticket;
  ProtobufCBinaryData ticket;
};

struct CMsgClientSessionToken : public ProtobufCppMessage
{
  CMsgClientSessionToken() :
     ProtobufCppMessage(cmsg_client_session_token__descriptor)
  {}

  protobuf_c_boolean has_token;
  uint64_t token;
};

struct CMsgClientGameConnectTokens : public ProtobufCppMessage
{
  CMsgClientGameConnectTokens() :
     ProtobufCppMessage(cmsg_client_game_connect_tokens__descriptor)
  {}

  protobuf_c_boolean has_max_tokens_to_keep;
  uint32_t max_tokens_to_keep;
  size_t n_tokens;
  ProtobufCBinaryData *tokens;
};

struct CMsgClientGamesPlayed__ProcessInfo : public ProtobufCppMessage
{
  CMsgClientGamesPlayed__ProcessInfo() :
     ProtobufCppMessage(cmsg_client_games_played__process_info__descriptor)
  {}

  protobuf_c_boolean has_process_id;
  uint32_t process_id;
  protobuf_c_boolean has_process_id_parent;
  uint32_t process_id_parent;
  protobuf_c_boolean has_parent_is_steam;
  protobuf_c_boolean parent_is_steam;
};

struct CMsgClientGamesPlayed__GamePlayed : public ProtobufCppMessage
{
  CMsgClientGamesPlayed__GamePlayed() :
     ProtobufCppMessage(cmsg_client_games_played__game_played__descriptor)
  {}

  protobuf_c_boolean has_steam_id_gs;
  uint64_t steam_id_gs;
  protobuf_c_boolean has_game_id;
  uint64_t game_id;
  protobuf_c_boolean has_deprecated_game_ip_address;
  uint32_t deprecated_game_ip_address;
  protobuf_c_boolean has_game_port;
  uint32_t game_port;
  protobuf_c_boolean has_is_secure;
  protobuf_c_boolean is_secure;
  protobuf_c_boolean has_token;
  ProtobufCBinaryData token;
  char *game_extra_info;
  protobuf_c_boolean has_game_data_blob;
  ProtobufCBinaryData game_data_blob;
  protobuf_c_boolean has_process_id;
  uint32_t process_id;
  protobuf_c_boolean has_streaming_provider_id;
  uint32_t streaming_provider_id;
  protobuf_c_boolean has_game_flags;
  uint32_t game_flags;
  protobuf_c_boolean has_owner_id;
  uint32_t owner_id;
  char *vr_hmd_vendor;
  char *vr_hmd_model;
  protobuf_c_boolean has_launch_option_type;
  uint32_t launch_option_type;
  protobuf_c_boolean has_primary_controller_type;
  int32_t primary_controller_type;
  char *primary_steam_controller_serial;
  protobuf_c_boolean has_total_steam_controller_count;
  uint32_t total_steam_controller_count;
  protobuf_c_boolean has_total_non_steam_controller_count;
  uint32_t total_non_steam_controller_count;
  protobuf_c_boolean has_controller_workshop_file_id;
  uint64_t controller_workshop_file_id;
  protobuf_c_boolean has_launch_source;
  uint32_t launch_source;
  protobuf_c_boolean has_vr_hmd_runtime;
  uint32_t vr_hmd_runtime;
  CMsgIPAddress *game_ip_address;
  protobuf_c_boolean has_controller_connection_type;
  uint32_t controller_connection_type;
  protobuf_c_boolean has_game_os_platform;
  int32_t game_os_platform;
  protobuf_c_boolean has_game_build_id;
  uint32_t game_build_id;
  protobuf_c_boolean has_compat_tool_id;
  uint32_t compat_tool_id;
  char *compat_tool_cmd;
  protobuf_c_boolean has_compat_tool_build_id;
  uint32_t compat_tool_build_id;
  char *beta_name;
  protobuf_c_boolean has_dlc_context;
  uint32_t dlc_context;
  size_t n_process_id_list;
  CMsgClientGamesPlayed__ProcessInfo **process_id_list;
};

struct CMsgClientGamesPlayed : public ProtobufCppMessage
{
  CMsgClientGamesPlayed() :
     ProtobufCppMessage(cmsg_client_games_played__descriptor)
  {}

  size_t n_games_played;
  CMsgClientGamesPlayed__GamePlayed **games_played;
  protobuf_c_boolean has_client_os_type;
  uint32_t client_os_type;
  protobuf_c_boolean has_cloud_gaming_platform;
  uint32_t cloud_gaming_platform;
  protobuf_c_boolean has_recent_reauthentication;
  protobuf_c_boolean recent_reauthentication;
};

struct CMsgGSApprove : public ProtobufCppMessage
{
  CMsgGSApprove() :
     ProtobufCppMessage(cmsg_gsapprove__descriptor)
  {}

  protobuf_c_boolean has_steam_id;
  uint64_t steam_id;
  protobuf_c_boolean has_owner_steam_id;
  uint64_t owner_steam_id;
};

struct CMsgGSDeny : public ProtobufCppMessage
{
  CMsgGSDeny() :
     ProtobufCppMessage(cmsg_gsdeny__descriptor)
  {}

  protobuf_c_boolean has_steam_id;
  uint64_t steam_id;
  protobuf_c_boolean has_edeny_reason;
  int32_t edeny_reason;
  char *deny_string;
};

struct CMsgGSKick : public ProtobufCppMessage
{
  CMsgGSKick() :
     ProtobufCppMessage(cmsg_gskick__descriptor)
  {}

  protobuf_c_boolean has_steam_id;
  uint64_t steam_id;
  protobuf_c_boolean has_edeny_reason;
  int32_t edeny_reason;
};

struct CMsgClientAuthList : public ProtobufCppMessage
{
  CMsgClientAuthList() :
     ProtobufCppMessage(cmsg_client_auth_list__descriptor)
  {}

  protobuf_c_boolean has_tokens_left;
  uint32_t tokens_left;
  protobuf_c_boolean has_last_request_seq;
  uint32_t last_request_seq;
  protobuf_c_boolean has_last_request_seq_from_server;
  uint32_t last_request_seq_from_server;
  size_t n_tickets;
  CMsgAuthTicket **tickets;
  size_t n_app_ids;
  uint32_t *app_ids;
  protobuf_c_boolean has_message_sequence;
  uint32_t message_sequence;
};

struct CMsgClientAuthListAck : public ProtobufCppMessage
{
  CMsgClientAuthListAck() :
     ProtobufCppMessage(cmsg_client_auth_list_ack__descriptor)
  {}

  size_t n_ticket_crc;
  uint32_t *ticket_crc;
  size_t n_app_ids;
  uint32_t *app_ids;
  protobuf_c_boolean has_message_sequence;
  uint32_t message_sequence;
};

struct CMsgClientLicenseList__License : public ProtobufCppMessage
{
  CMsgClientLicenseList__License() :
     ProtobufCppMessage(cmsg_client_license_list__license__descriptor)
  {}

  protobuf_c_boolean has_package_id;
  uint32_t package_id;
  protobuf_c_boolean has_time_created;
  uint32_t time_created;
  protobuf_c_boolean has_time_next_process;
  uint32_t time_next_process;
  protobuf_c_boolean has_minute_limit;
  int32_t minute_limit;
  protobuf_c_boolean has_minutes_used;
  int32_t minutes_used;
  protobuf_c_boolean has_payment_method;
  uint32_t payment_method;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  char *purchase_country_code;
  protobuf_c_boolean has_license_type;
  uint32_t license_type;
  protobuf_c_boolean has_territory_code;
  int32_t territory_code;
  protobuf_c_boolean has_change_number;
  int32_t change_number;
  protobuf_c_boolean has_owner_id;
  uint32_t owner_id;
  protobuf_c_boolean has_initial_period;
  uint32_t initial_period;
  protobuf_c_boolean has_initial_time_unit;
  uint32_t initial_time_unit;
  protobuf_c_boolean has_renewal_period;
  uint32_t renewal_period;
  protobuf_c_boolean has_renewal_time_unit;
  uint32_t renewal_time_unit;
  protobuf_c_boolean has_access_token;
  uint64_t access_token;
  protobuf_c_boolean has_master_package_id;
  uint32_t master_package_id;
};

struct CMsgClientLicenseList : public ProtobufCppMessage
{
  CMsgClientLicenseList() :
     ProtobufCppMessage(cmsg_client_license_list__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  int32_t eresult;
  size_t n_licenses;
  CMsgClientLicenseList__License **licenses;
};

struct CMsgClientIsLimitedAccount : public ProtobufCppMessage
{
  CMsgClientIsLimitedAccount() :
     ProtobufCppMessage(cmsg_client_is_limited_account__descriptor)
  {}

  protobuf_c_boolean has_bis_limited_account;
  protobuf_c_boolean bis_limited_account;
  protobuf_c_boolean has_bis_community_banned;
  protobuf_c_boolean bis_community_banned;
  protobuf_c_boolean has_bis_locked_account;
  protobuf_c_boolean bis_locked_account;
  protobuf_c_boolean has_bis_limited_account_allowed_to_invite_friends;
  protobuf_c_boolean bis_limited_account_allowed_to_invite_friends;
};

struct CMsgClientRequestedClientStats__StatsToSend : public ProtobufCppMessage
{
  CMsgClientRequestedClientStats__StatsToSend() :
     ProtobufCppMessage(cmsg_client_requested_client_stats__stats_to_send__descriptor)
  {}

  protobuf_c_boolean has_client_stat;
  uint32_t client_stat;
  protobuf_c_boolean has_stat_aggregate_method;
  uint32_t stat_aggregate_method;
};

struct CMsgClientRequestedClientStats : public ProtobufCppMessage
{
  CMsgClientRequestedClientStats() :
     ProtobufCppMessage(cmsg_client_requested_client_stats__descriptor)
  {}

  size_t n_stats_to_send;
  CMsgClientRequestedClientStats__StatsToSend **stats_to_send;
};

struct CMsgClientStat2__StatDetail : public ProtobufCppMessage
{
  CMsgClientStat2__StatDetail() :
     ProtobufCppMessage(cmsg_client_stat2__stat_detail__descriptor)
  {}

  protobuf_c_boolean has_client_stat;
  uint32_t client_stat;
  protobuf_c_boolean has_ll_value;
  int64_t ll_value;
  protobuf_c_boolean has_time_of_day;
  uint32_t time_of_day;
  protobuf_c_boolean has_cell_id;
  uint32_t cell_id;
  protobuf_c_boolean has_depot_id;
  uint32_t depot_id;
  protobuf_c_boolean has_app_id;
  uint32_t app_id;
};

struct CMsgClientStat2 : public ProtobufCppMessage
{
  CMsgClientStat2() :
     ProtobufCppMessage(cmsg_client_stat2__descriptor)
  {}

  size_t n_stat_detail;
  CMsgClientStat2__StatDetail **stat_detail;
};

struct CMsgClientInviteToGame : public ProtobufCppMessage
{
  CMsgClientInviteToGame() :
     ProtobufCppMessage(cmsg_client_invite_to_game__descriptor)
  {}

  protobuf_c_boolean has_steam_id_dest;
  uint64_t steam_id_dest;
  protobuf_c_boolean has_steam_id_src;
  uint64_t steam_id_src;
  char *connect_string;
  char *remote_play;
};

struct CMsgClientChatInvite : public ProtobufCppMessage
{
  CMsgClientChatInvite() :
     ProtobufCppMessage(cmsg_client_chat_invite__descriptor)
  {}

  protobuf_c_boolean has_steam_id_invited;
  uint64_t steam_id_invited;
  protobuf_c_boolean has_steam_id_chat;
  uint64_t steam_id_chat;
  protobuf_c_boolean has_steam_id_patron;
  uint64_t steam_id_patron;
  protobuf_c_boolean has_chatroom_type;
  int32_t chatroom_type;
  protobuf_c_boolean has_steam_id_friend_chat;
  uint64_t steam_id_friend_chat;
  char *chat_name;
  protobuf_c_boolean has_game_id;
  uint64_t game_id;
};

struct CMsgClientConnectionStats__StatsLogon : public ProtobufCppMessage
{
  CMsgClientConnectionStats__StatsLogon() :
     ProtobufCppMessage(cmsg_client_connection_stats__stats__logon__descriptor)
  {}

  protobuf_c_boolean has_connect_attempts;
  int32_t connect_attempts;
  protobuf_c_boolean has_connect_successes;
  int32_t connect_successes;
  protobuf_c_boolean has_connect_failures;
  int32_t connect_failures;
  protobuf_c_boolean has_connections_dropped;
  int32_t connections_dropped;
  protobuf_c_boolean has_seconds_running;
  uint32_t seconds_running;
  protobuf_c_boolean has_msec_tologonthistime;
  uint32_t msec_tologonthistime;
  protobuf_c_boolean has_count_bad_cms;
  uint32_t count_bad_cms;
  protobuf_c_boolean has_no_udp_connectivity;
  protobuf_c_boolean no_udp_connectivity;
  protobuf_c_boolean has_no_tcp_connectivity;
  protobuf_c_boolean no_tcp_connectivity;
  protobuf_c_boolean has_no_websocket_443_connectivity;
  protobuf_c_boolean no_websocket_443_connectivity;
  protobuf_c_boolean has_no_websocket_non_443_connectivity;
  protobuf_c_boolean no_websocket_non_443_connectivity;
};

struct CMsgClientConnectionStats__StatsUDP : public ProtobufCppMessage
{
  CMsgClientConnectionStats__StatsUDP() :
     ProtobufCppMessage(cmsg_client_connection_stats__stats__udp__descriptor)
  {}

  protobuf_c_boolean has_pkts_sent;
  uint64_t pkts_sent;
  protobuf_c_boolean has_bytes_sent;
  uint64_t bytes_sent;
  protobuf_c_boolean has_pkts_recv;
  uint64_t pkts_recv;
  protobuf_c_boolean has_pkts_processed;
  uint64_t pkts_processed;
  protobuf_c_boolean has_bytes_recv;
  uint64_t bytes_recv;
};

struct CMsgClientConnectionStats__StatsVConn : public ProtobufCppMessage
{
  CMsgClientConnectionStats__StatsVConn() :
     ProtobufCppMessage(cmsg_client_connection_stats__stats__vconn__descriptor)
  {}

  protobuf_c_boolean has_connections_udp;
  uint32_t connections_udp;
  protobuf_c_boolean has_connections_tcp;
  uint32_t connections_tcp;
  CMsgClientConnectionStats__StatsUDP *stats_udp;
  protobuf_c_boolean has_pkts_abandoned;
  uint64_t pkts_abandoned;
  protobuf_c_boolean has_conn_req_received;
  uint64_t conn_req_received;
  protobuf_c_boolean has_pkts_resent;
  uint64_t pkts_resent;
  protobuf_c_boolean has_msgs_sent;
  uint64_t msgs_sent;
  protobuf_c_boolean has_msgs_sent_failed;
  uint64_t msgs_sent_failed;
  protobuf_c_boolean has_msgs_recv;
  uint64_t msgs_recv;
  protobuf_c_boolean has_datagrams_sent;
  uint64_t datagrams_sent;
  protobuf_c_boolean has_datagrams_recv;
  uint64_t datagrams_recv;
  protobuf_c_boolean has_bad_pkts_recv;
  uint64_t bad_pkts_recv;
  protobuf_c_boolean has_unknown_conn_pkts_recv;
  uint64_t unknown_conn_pkts_recv;
  protobuf_c_boolean has_missed_pkts_recv;
  uint64_t missed_pkts_recv;
  protobuf_c_boolean has_dup_pkts_recv;
  uint64_t dup_pkts_recv;
  protobuf_c_boolean has_failed_connect_challenges;
  uint64_t failed_connect_challenges;
  protobuf_c_boolean has_micro_sec_avg_latency;
  uint32_t micro_sec_avg_latency;
  protobuf_c_boolean has_micro_sec_min_latency;
  uint32_t micro_sec_min_latency;
  protobuf_c_boolean has_micro_sec_max_latency;
  uint32_t micro_sec_max_latency;
  protobuf_c_boolean has_mem_pool_msg_in_use;
  uint32_t mem_pool_msg_in_use;
};

struct CMsgClientConnectionStats : public ProtobufCppMessage
{
  CMsgClientConnectionStats() :
     ProtobufCppMessage(cmsg_client_connection_stats__descriptor)
  {}

  CMsgClientConnectionStats__StatsLogon *stats_logon;
  CMsgClientConnectionStats__StatsVConn *stats_vconn;
};

struct CMsgClientServersAvailable__ServerTypesAvailable : public ProtobufCppMessage
{
  CMsgClientServersAvailable__ServerTypesAvailable() :
     ProtobufCppMessage(cmsg_client_servers_available__server__types__available__descriptor)
  {}

  protobuf_c_boolean has_server;
  uint32_t server;
  protobuf_c_boolean has_changed;
  protobuf_c_boolean changed;
};

struct CMsgClientServersAvailable : public ProtobufCppMessage
{
  CMsgClientServersAvailable() :
     ProtobufCppMessage(cmsg_client_servers_available__descriptor)
  {}

  size_t n_server_types_available;
  CMsgClientServersAvailable__ServerTypesAvailable **server_types_available;
  protobuf_c_boolean has_server_type_for_auth_services;
  uint32_t server_type_for_auth_services;
};

struct CMsgClientReportOverlayDetourFailure : public ProtobufCppMessage
{
  CMsgClientReportOverlayDetourFailure() :
     ProtobufCppMessage(cmsg_client_report_overlay_detour_failure__descriptor)
  {}

  size_t n_failure_strings;
  char **failure_strings;
};

struct CMsgClientRequestEncryptedAppTicket : public ProtobufCppMessage
{
  CMsgClientRequestEncryptedAppTicket() :
     ProtobufCppMessage(cmsg_client_request_encrypted_app_ticket__descriptor)
  {}

  protobuf_c_boolean has_app_id;
  uint32_t app_id;
  protobuf_c_boolean has_userdata;
  ProtobufCBinaryData userdata;
};

struct CMsgClientRequestEncryptedAppTicketResponse : public ProtobufCppMessage
{
  CMsgClientRequestEncryptedAppTicketResponse() :
     ProtobufCppMessage(cmsg_client_request_encrypted_app_ticket_response__descriptor)
  {}

  protobuf_c_boolean has_app_id;
  uint32_t app_id;
  protobuf_c_boolean has_eresult;
  int32_t eresult;
  EncryptedAppTicket *encrypted_app_ticket;
};

struct CMsgClientWalletInfoUpdate : public ProtobufCppMessage
{
  CMsgClientWalletInfoUpdate() :
     ProtobufCppMessage(cmsg_client_wallet_info_update__descriptor)
  {}

  protobuf_c_boolean has_has_wallet;
  protobuf_c_boolean has_wallet;
  protobuf_c_boolean has_balance;
  int32_t balance;
  protobuf_c_boolean has_currency;
  int32_t currency;
  protobuf_c_boolean has_balance_delayed;
  int32_t balance_delayed;
  protobuf_c_boolean has_balance64;
  int64_t balance64;
  protobuf_c_boolean has_balance64_delayed;
  int64_t balance64_delayed;
  protobuf_c_boolean has_realm;
  int32_t realm;
};

struct CMsgClientAMGetClanOfficers : public ProtobufCppMessage
{
  CMsgClientAMGetClanOfficers() :
     ProtobufCppMessage(cmsg_client_amget_clan_officers__descriptor)
  {}

  protobuf_c_boolean has_steamid_clan;
  uint64_t steamid_clan;
};

struct CMsgClientAMGetClanOfficersResponse : public ProtobufCppMessage
{
  CMsgClientAMGetClanOfficersResponse() :
     ProtobufCppMessage(cmsg_client_amget_clan_officers_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  int32_t eresult;
  protobuf_c_boolean has_steamid_clan;
  uint64_t steamid_clan;
  protobuf_c_boolean has_officer_count;
  int32_t officer_count;
};

struct CMsgClientAMGetPersonaNameHistory__IdInstance : public ProtobufCppMessage
{
  CMsgClientAMGetPersonaNameHistory__IdInstance() :
     ProtobufCppMessage(cmsg_client_amget_persona_name_history__id_instance__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
};

struct CMsgClientAMGetPersonaNameHistory : public ProtobufCppMessage
{
  CMsgClientAMGetPersonaNameHistory() :
     ProtobufCppMessage(cmsg_client_amget_persona_name_history__descriptor)
  {}

  protobuf_c_boolean has_id_count;
  int32_t id_count;
  size_t n_ids;
  CMsgClientAMGetPersonaNameHistory__IdInstance **ids;
};

struct CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance : public ProtobufCppMessage
{
  CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance() :
     ProtobufCppMessage(cmsg_client_amget_persona_name_history_response__name_table_instance__name_instance__descriptor)
  {}

  protobuf_c_boolean has_name_since;
  uint32_t name_since;
  char *name;
};

struct CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance : public ProtobufCppMessage
{
  CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance() :
     ProtobufCppMessage(cmsg_client_amget_persona_name_history_response__name_table_instance__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  int32_t eresult;
  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  size_t n_names;
  CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance **names;
};

struct CMsgClientAMGetPersonaNameHistoryResponse : public ProtobufCppMessage
{
  CMsgClientAMGetPersonaNameHistoryResponse() :
     ProtobufCppMessage(cmsg_client_amget_persona_name_history_response__descriptor)
  {}

  size_t n_responses;
  CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance **responses;
};

struct CMsgClientDeregisterWithServer : public ProtobufCppMessage
{
  CMsgClientDeregisterWithServer() :
     ProtobufCppMessage(cmsg_client_deregister_with_server__descriptor)
  {}

  protobuf_c_boolean has_eservertype;
  uint32_t eservertype;
  protobuf_c_boolean has_app_id;
  uint32_t app_id;
};

struct CMsgClientClanState__NameInfo : public ProtobufCppMessage
{
  CMsgClientClanState__NameInfo() :
     ProtobufCppMessage(cmsg_client_clan_state__name_info__descriptor)
  {}

  char *clan_name;
  protobuf_c_boolean has_sha_avatar;
  ProtobufCBinaryData sha_avatar;
};

struct CMsgClientClanState__UserCounts : public ProtobufCppMessage
{
  CMsgClientClanState__UserCounts() :
     ProtobufCppMessage(cmsg_client_clan_state__user_counts__descriptor)
  {}

  protobuf_c_boolean has_members;
  uint32_t members;
  protobuf_c_boolean has_online;
  uint32_t online;
  protobuf_c_boolean has_chatting;
  uint32_t chatting;
  protobuf_c_boolean has_in_game;
  uint32_t in_game;
  protobuf_c_boolean has_chat_room_members;
  uint32_t chat_room_members;
};

struct CMsgClientClanState__Event : public ProtobufCppMessage
{
  CMsgClientClanState__Event() :
     ProtobufCppMessage(cmsg_client_clan_state__event__descriptor)
  {}

  protobuf_c_boolean has_gid;
  uint64_t gid;
  protobuf_c_boolean has_event_time;
  uint32_t event_time;
  char *headline;
  protobuf_c_boolean has_game_id;
  uint64_t game_id;
  protobuf_c_boolean has_just_posted;
  protobuf_c_boolean just_posted;
};

struct CMsgClientClanState : public ProtobufCppMessage
{
  CMsgClientClanState() :
     ProtobufCppMessage(cmsg_client_clan_state__descriptor)
  {}

  protobuf_c_boolean has_steamid_clan;
  uint64_t steamid_clan;
  protobuf_c_boolean has_clan_account_flags;
  uint32_t clan_account_flags;
  CMsgClientClanState__NameInfo *name_info;
  CMsgClientClanState__UserCounts *user_counts;
  size_t n_events;
  CMsgClientClanState__Event **events;
  size_t n_announcements;
  CMsgClientClanState__Event **announcements;
  protobuf_c_boolean has_chat_room_private;
  protobuf_c_boolean chat_room_private;
};

size_t cmsg_client_register_auth_ticket_with_cm__get_packed_size
                     (const CMsgClientRegisterAuthTicketWithCM   *message);
size_t cmsg_client_register_auth_ticket_with_cm__pack
                     (const CMsgClientRegisterAuthTicketWithCM   *message,
                      uint8_t             *out);
size_t cmsg_client_register_auth_ticket_with_cm__pack_to_buffer
                     (const CMsgClientRegisterAuthTicketWithCM   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRegisterAuthTicketWithCM *
       cmsg_client_register_auth_ticket_with_cm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_register_auth_ticket_with_cm__free_unpacked
                     (CMsgClientRegisterAuthTicketWithCM *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_ticket_auth_complete__get_packed_size
                     (const CMsgClientTicketAuthComplete   *message);
size_t cmsg_client_ticket_auth_complete__pack
                     (const CMsgClientTicketAuthComplete   *message,
                      uint8_t             *out);
size_t cmsg_client_ticket_auth_complete__pack_to_buffer
                     (const CMsgClientTicketAuthComplete   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientTicketAuthComplete *
       cmsg_client_ticket_auth_complete__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_ticket_auth_complete__free_unpacked
                     (CMsgClientTicketAuthComplete *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_cmlist__get_packed_size
                     (const CMsgClientCMList   *message);
size_t cmsg_client_cmlist__pack
                     (const CMsgClientCMList   *message,
                      uint8_t             *out);
size_t cmsg_client_cmlist__pack_to_buffer
                     (const CMsgClientCMList   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientCMList *
       cmsg_client_cmlist__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_cmlist__free_unpacked
                     (CMsgClientCMList *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_p2_pconnection_info__get_packed_size
                     (const CMsgClientP2PConnectionInfo   *message);
size_t cmsg_client_p2_pconnection_info__pack
                     (const CMsgClientP2PConnectionInfo   *message,
                      uint8_t             *out);
size_t cmsg_client_p2_pconnection_info__pack_to_buffer
                     (const CMsgClientP2PConnectionInfo   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientP2PConnectionInfo *
       cmsg_client_p2_pconnection_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_p2_pconnection_info__free_unpacked
                     (CMsgClientP2PConnectionInfo *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_p2_pconnection_fail_info__get_packed_size
                     (const CMsgClientP2PConnectionFailInfo   *message);
size_t cmsg_client_p2_pconnection_fail_info__pack
                     (const CMsgClientP2PConnectionFailInfo   *message,
                      uint8_t             *out);
size_t cmsg_client_p2_pconnection_fail_info__pack_to_buffer
                     (const CMsgClientP2PConnectionFailInfo   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientP2PConnectionFailInfo *
       cmsg_client_p2_pconnection_fail_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_p2_pconnection_fail_info__free_unpacked
                     (CMsgClientP2PConnectionFailInfo *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_networking_cert_request__get_packed_size
                     (const CMsgClientNetworkingCertRequest   *message);
size_t cmsg_client_networking_cert_request__pack
                     (const CMsgClientNetworkingCertRequest   *message,
                      uint8_t             *out);
size_t cmsg_client_networking_cert_request__pack_to_buffer
                     (const CMsgClientNetworkingCertRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientNetworkingCertRequest *
       cmsg_client_networking_cert_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_networking_cert_request__free_unpacked
                     (CMsgClientNetworkingCertRequest *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_networking_cert_reply__get_packed_size
                     (const CMsgClientNetworkingCertReply   *message);
size_t cmsg_client_networking_cert_reply__pack
                     (const CMsgClientNetworkingCertReply   *message,
                      uint8_t             *out);
size_t cmsg_client_networking_cert_reply__pack_to_buffer
                     (const CMsgClientNetworkingCertReply   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientNetworkingCertReply *
       cmsg_client_networking_cert_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_networking_cert_reply__free_unpacked
                     (CMsgClientNetworkingCertReply *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_networking_mobile_cert_request__get_packed_size
                     (const CMsgClientNetworkingMobileCertRequest   *message);
size_t cmsg_client_networking_mobile_cert_request__pack
                     (const CMsgClientNetworkingMobileCertRequest   *message,
                      uint8_t             *out);
size_t cmsg_client_networking_mobile_cert_request__pack_to_buffer
                     (const CMsgClientNetworkingMobileCertRequest   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientNetworkingMobileCertRequest *
       cmsg_client_networking_mobile_cert_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_networking_mobile_cert_request__free_unpacked
                     (CMsgClientNetworkingMobileCertRequest *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_networking_mobile_cert_reply__get_packed_size
                     (const CMsgClientNetworkingMobileCertReply   *message);
size_t cmsg_client_networking_mobile_cert_reply__pack
                     (const CMsgClientNetworkingMobileCertReply   *message,
                      uint8_t             *out);
size_t cmsg_client_networking_mobile_cert_reply__pack_to_buffer
                     (const CMsgClientNetworkingMobileCertReply   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientNetworkingMobileCertReply *
       cmsg_client_networking_mobile_cert_reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_networking_mobile_cert_reply__free_unpacked
                     (CMsgClientNetworkingMobileCertReply *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_get_app_ownership_ticket__get_packed_size
                     (const CMsgClientGetAppOwnershipTicket   *message);
size_t cmsg_client_get_app_ownership_ticket__pack
                     (const CMsgClientGetAppOwnershipTicket   *message,
                      uint8_t             *out);
size_t cmsg_client_get_app_ownership_ticket__pack_to_buffer
                     (const CMsgClientGetAppOwnershipTicket   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientGetAppOwnershipTicket *
       cmsg_client_get_app_ownership_ticket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_get_app_ownership_ticket__free_unpacked
                     (CMsgClientGetAppOwnershipTicket *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_get_app_ownership_ticket_response__get_packed_size
                     (const CMsgClientGetAppOwnershipTicketResponse   *message);
size_t cmsg_client_get_app_ownership_ticket_response__pack
                     (const CMsgClientGetAppOwnershipTicketResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_get_app_ownership_ticket_response__pack_to_buffer
                     (const CMsgClientGetAppOwnershipTicketResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientGetAppOwnershipTicketResponse *
       cmsg_client_get_app_ownership_ticket_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_get_app_ownership_ticket_response__free_unpacked
                     (CMsgClientGetAppOwnershipTicketResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_session_token__get_packed_size
                     (const CMsgClientSessionToken   *message);
size_t cmsg_client_session_token__pack
                     (const CMsgClientSessionToken   *message,
                      uint8_t             *out);
size_t cmsg_client_session_token__pack_to_buffer
                     (const CMsgClientSessionToken   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientSessionToken *
       cmsg_client_session_token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_session_token__free_unpacked
                     (CMsgClientSessionToken *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_game_connect_tokens__get_packed_size
                     (const CMsgClientGameConnectTokens   *message);
size_t cmsg_client_game_connect_tokens__pack
                     (const CMsgClientGameConnectTokens   *message,
                      uint8_t             *out);
size_t cmsg_client_game_connect_tokens__pack_to_buffer
                     (const CMsgClientGameConnectTokens   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientGameConnectTokens *
       cmsg_client_game_connect_tokens__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_game_connect_tokens__free_unpacked
                     (CMsgClientGameConnectTokens *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_games_played__get_packed_size
                     (const CMsgClientGamesPlayed   *message);
size_t cmsg_client_games_played__pack
                     (const CMsgClientGamesPlayed   *message,
                      uint8_t             *out);
size_t cmsg_client_games_played__pack_to_buffer
                     (const CMsgClientGamesPlayed   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientGamesPlayed *
       cmsg_client_games_played__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_games_played__free_unpacked
                     (CMsgClientGamesPlayed *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_gsapprove__get_packed_size
                     (const CMsgGSApprove   *message);
size_t cmsg_gsapprove__pack
                     (const CMsgGSApprove   *message,
                      uint8_t             *out);
size_t cmsg_gsapprove__pack_to_buffer
                     (const CMsgGSApprove   *message,
                      ProtobufCBuffer     *buffer);
CMsgGSApprove *
       cmsg_gsapprove__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gsapprove__free_unpacked
                     (CMsgGSApprove *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_gsdeny__get_packed_size
                     (const CMsgGSDeny   *message);
size_t cmsg_gsdeny__pack
                     (const CMsgGSDeny   *message,
                      uint8_t             *out);
size_t cmsg_gsdeny__pack_to_buffer
                     (const CMsgGSDeny   *message,
                      ProtobufCBuffer     *buffer);
CMsgGSDeny *
       cmsg_gsdeny__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gsdeny__free_unpacked
                     (CMsgGSDeny *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_gskick__get_packed_size
                     (const CMsgGSKick   *message);
size_t cmsg_gskick__pack
                     (const CMsgGSKick   *message,
                      uint8_t             *out);
size_t cmsg_gskick__pack_to_buffer
                     (const CMsgGSKick   *message,
                      ProtobufCBuffer     *buffer);
CMsgGSKick *
       cmsg_gskick__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_gskick__free_unpacked
                     (CMsgGSKick *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_auth_list__get_packed_size
                     (const CMsgClientAuthList   *message);
size_t cmsg_client_auth_list__pack
                     (const CMsgClientAuthList   *message,
                      uint8_t             *out);
size_t cmsg_client_auth_list__pack_to_buffer
                     (const CMsgClientAuthList   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAuthList *
       cmsg_client_auth_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_auth_list__free_unpacked
                     (CMsgClientAuthList *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_auth_list_ack__get_packed_size
                     (const CMsgClientAuthListAck   *message);
size_t cmsg_client_auth_list_ack__pack
                     (const CMsgClientAuthListAck   *message,
                      uint8_t             *out);
size_t cmsg_client_auth_list_ack__pack_to_buffer
                     (const CMsgClientAuthListAck   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAuthListAck *
       cmsg_client_auth_list_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_auth_list_ack__free_unpacked
                     (CMsgClientAuthListAck *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_license_list__get_packed_size
                     (const CMsgClientLicenseList   *message);
size_t cmsg_client_license_list__pack
                     (const CMsgClientLicenseList   *message,
                      uint8_t             *out);
size_t cmsg_client_license_list__pack_to_buffer
                     (const CMsgClientLicenseList   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientLicenseList *
       cmsg_client_license_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_license_list__free_unpacked
                     (CMsgClientLicenseList *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_is_limited_account__get_packed_size
                     (const CMsgClientIsLimitedAccount   *message);
size_t cmsg_client_is_limited_account__pack
                     (const CMsgClientIsLimitedAccount   *message,
                      uint8_t             *out);
size_t cmsg_client_is_limited_account__pack_to_buffer
                     (const CMsgClientIsLimitedAccount   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientIsLimitedAccount *
       cmsg_client_is_limited_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_is_limited_account__free_unpacked
                     (CMsgClientIsLimitedAccount *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_requested_client_stats__get_packed_size
                     (const CMsgClientRequestedClientStats   *message);
size_t cmsg_client_requested_client_stats__pack
                     (const CMsgClientRequestedClientStats   *message,
                      uint8_t             *out);
size_t cmsg_client_requested_client_stats__pack_to_buffer
                     (const CMsgClientRequestedClientStats   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRequestedClientStats *
       cmsg_client_requested_client_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_requested_client_stats__free_unpacked
                     (CMsgClientRequestedClientStats *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_stat2__get_packed_size
                     (const CMsgClientStat2   *message);
size_t cmsg_client_stat2__pack
                     (const CMsgClientStat2   *message,
                      uint8_t             *out);
size_t cmsg_client_stat2__pack_to_buffer
                     (const CMsgClientStat2   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientStat2 *
       cmsg_client_stat2__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_stat2__free_unpacked
                     (CMsgClientStat2 *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_invite_to_game__get_packed_size
                     (const CMsgClientInviteToGame   *message);
size_t cmsg_client_invite_to_game__pack
                     (const CMsgClientInviteToGame   *message,
                      uint8_t             *out);
size_t cmsg_client_invite_to_game__pack_to_buffer
                     (const CMsgClientInviteToGame   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientInviteToGame *
       cmsg_client_invite_to_game__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_invite_to_game__free_unpacked
                     (CMsgClientInviteToGame *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_chat_invite__get_packed_size
                     (const CMsgClientChatInvite   *message);
size_t cmsg_client_chat_invite__pack
                     (const CMsgClientChatInvite   *message,
                      uint8_t             *out);
size_t cmsg_client_chat_invite__pack_to_buffer
                     (const CMsgClientChatInvite   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientChatInvite *
       cmsg_client_chat_invite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_chat_invite__free_unpacked
                     (CMsgClientChatInvite *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_connection_stats__get_packed_size
                     (const CMsgClientConnectionStats   *message);
size_t cmsg_client_connection_stats__pack
                     (const CMsgClientConnectionStats   *message,
                      uint8_t             *out);
size_t cmsg_client_connection_stats__pack_to_buffer
                     (const CMsgClientConnectionStats   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientConnectionStats *
       cmsg_client_connection_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_connection_stats__free_unpacked
                     (CMsgClientConnectionStats *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_servers_available__get_packed_size
                     (const CMsgClientServersAvailable   *message);
size_t cmsg_client_servers_available__pack
                     (const CMsgClientServersAvailable   *message,
                      uint8_t             *out);
size_t cmsg_client_servers_available__pack_to_buffer
                     (const CMsgClientServersAvailable   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientServersAvailable *
       cmsg_client_servers_available__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_servers_available__free_unpacked
                     (CMsgClientServersAvailable *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_report_overlay_detour_failure__get_packed_size
                     (const CMsgClientReportOverlayDetourFailure   *message);
size_t cmsg_client_report_overlay_detour_failure__pack
                     (const CMsgClientReportOverlayDetourFailure   *message,
                      uint8_t             *out);
size_t cmsg_client_report_overlay_detour_failure__pack_to_buffer
                     (const CMsgClientReportOverlayDetourFailure   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientReportOverlayDetourFailure *
       cmsg_client_report_overlay_detour_failure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_report_overlay_detour_failure__free_unpacked
                     (CMsgClientReportOverlayDetourFailure *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_request_encrypted_app_ticket__get_packed_size
                     (const CMsgClientRequestEncryptedAppTicket   *message);
size_t cmsg_client_request_encrypted_app_ticket__pack
                     (const CMsgClientRequestEncryptedAppTicket   *message,
                      uint8_t             *out);
size_t cmsg_client_request_encrypted_app_ticket__pack_to_buffer
                     (const CMsgClientRequestEncryptedAppTicket   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRequestEncryptedAppTicket *
       cmsg_client_request_encrypted_app_ticket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_request_encrypted_app_ticket__free_unpacked
                     (CMsgClientRequestEncryptedAppTicket *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_request_encrypted_app_ticket_response__get_packed_size
                     (const CMsgClientRequestEncryptedAppTicketResponse   *message);
size_t cmsg_client_request_encrypted_app_ticket_response__pack
                     (const CMsgClientRequestEncryptedAppTicketResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_request_encrypted_app_ticket_response__pack_to_buffer
                     (const CMsgClientRequestEncryptedAppTicketResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRequestEncryptedAppTicketResponse *
       cmsg_client_request_encrypted_app_ticket_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_request_encrypted_app_ticket_response__free_unpacked
                     (CMsgClientRequestEncryptedAppTicketResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_wallet_info_update__get_packed_size
                     (const CMsgClientWalletInfoUpdate   *message);
size_t cmsg_client_wallet_info_update__pack
                     (const CMsgClientWalletInfoUpdate   *message,
                      uint8_t             *out);
size_t cmsg_client_wallet_info_update__pack_to_buffer
                     (const CMsgClientWalletInfoUpdate   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientWalletInfoUpdate *
       cmsg_client_wallet_info_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_wallet_info_update__free_unpacked
                     (CMsgClientWalletInfoUpdate *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_amget_clan_officers__get_packed_size
                     (const CMsgClientAMGetClanOfficers   *message);
size_t cmsg_client_amget_clan_officers__pack
                     (const CMsgClientAMGetClanOfficers   *message,
                      uint8_t             *out);
size_t cmsg_client_amget_clan_officers__pack_to_buffer
                     (const CMsgClientAMGetClanOfficers   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAMGetClanOfficers *
       cmsg_client_amget_clan_officers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_amget_clan_officers__free_unpacked
                     (CMsgClientAMGetClanOfficers *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_amget_clan_officers_response__get_packed_size
                     (const CMsgClientAMGetClanOfficersResponse   *message);
size_t cmsg_client_amget_clan_officers_response__pack
                     (const CMsgClientAMGetClanOfficersResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_amget_clan_officers_response__pack_to_buffer
                     (const CMsgClientAMGetClanOfficersResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAMGetClanOfficersResponse *
       cmsg_client_amget_clan_officers_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_amget_clan_officers_response__free_unpacked
                     (CMsgClientAMGetClanOfficersResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_amget_persona_name_history__get_packed_size
                     (const CMsgClientAMGetPersonaNameHistory   *message);
size_t cmsg_client_amget_persona_name_history__pack
                     (const CMsgClientAMGetPersonaNameHistory   *message,
                      uint8_t             *out);
size_t cmsg_client_amget_persona_name_history__pack_to_buffer
                     (const CMsgClientAMGetPersonaNameHistory   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAMGetPersonaNameHistory *
       cmsg_client_amget_persona_name_history__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_amget_persona_name_history__free_unpacked
                     (CMsgClientAMGetPersonaNameHistory *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_amget_persona_name_history_response__get_packed_size
                     (const CMsgClientAMGetPersonaNameHistoryResponse   *message);
size_t cmsg_client_amget_persona_name_history_response__pack
                     (const CMsgClientAMGetPersonaNameHistoryResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_amget_persona_name_history_response__pack_to_buffer
                     (const CMsgClientAMGetPersonaNameHistoryResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAMGetPersonaNameHistoryResponse *
       cmsg_client_amget_persona_name_history_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_amget_persona_name_history_response__free_unpacked
                     (CMsgClientAMGetPersonaNameHistoryResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_deregister_with_server__get_packed_size
                     (const CMsgClientDeregisterWithServer   *message);
size_t cmsg_client_deregister_with_server__pack
                     (const CMsgClientDeregisterWithServer   *message,
                      uint8_t             *out);
size_t cmsg_client_deregister_with_server__pack_to_buffer
                     (const CMsgClientDeregisterWithServer   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientDeregisterWithServer *
       cmsg_client_deregister_with_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_deregister_with_server__free_unpacked
                     (CMsgClientDeregisterWithServer *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_clan_state__get_packed_size
                     (const CMsgClientClanState   *message);
size_t cmsg_client_clan_state__pack
                     (const CMsgClientClanState   *message,
                      uint8_t             *out);
size_t cmsg_client_clan_state__pack_to_buffer
                     (const CMsgClientClanState   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientClanState *
       cmsg_client_clan_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_clan_state__free_unpacked
                     (CMsgClientClanState *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CMsgClientRegisterAuthTicketWithCM_Closure)
                 (const CMsgClientRegisterAuthTicketWithCM *message,
                  void *closure_data);
typedef void (*CMsgClientTicketAuthComplete_Closure)
                 (const CMsgClientTicketAuthComplete *message,
                  void *closure_data);
typedef void (*CMsgClientCMList_Closure)
                 (const CMsgClientCMList *message,
                  void *closure_data);
typedef void (*CMsgClientP2PConnectionInfo_Closure)
                 (const CMsgClientP2PConnectionInfo *message,
                  void *closure_data);
typedef void (*CMsgClientP2PConnectionFailInfo_Closure)
                 (const CMsgClientP2PConnectionFailInfo *message,
                  void *closure_data);
typedef void (*CMsgClientNetworkingCertRequest_Closure)
                 (const CMsgClientNetworkingCertRequest *message,
                  void *closure_data);
typedef void (*CMsgClientNetworkingCertReply_Closure)
                 (const CMsgClientNetworkingCertReply *message,
                  void *closure_data);
typedef void (*CMsgClientNetworkingMobileCertRequest_Closure)
                 (const CMsgClientNetworkingMobileCertRequest *message,
                  void *closure_data);
typedef void (*CMsgClientNetworkingMobileCertReply_Closure)
                 (const CMsgClientNetworkingMobileCertReply *message,
                  void *closure_data);
typedef void (*CMsgClientGetAppOwnershipTicket_Closure)
                 (const CMsgClientGetAppOwnershipTicket *message,
                  void *closure_data);
typedef void (*CMsgClientGetAppOwnershipTicketResponse_Closure)
                 (const CMsgClientGetAppOwnershipTicketResponse *message,
                  void *closure_data);
typedef void (*CMsgClientSessionToken_Closure)
                 (const CMsgClientSessionToken *message,
                  void *closure_data);
typedef void (*CMsgClientGameConnectTokens_Closure)
                 (const CMsgClientGameConnectTokens *message,
                  void *closure_data);
typedef void (*CMsgClientGamesPlayed__ProcessInfo_Closure)
                 (const CMsgClientGamesPlayed__ProcessInfo *message,
                  void *closure_data);
typedef void (*CMsgClientGamesPlayed__GamePlayed_Closure)
                 (const CMsgClientGamesPlayed__GamePlayed *message,
                  void *closure_data);
typedef void (*CMsgClientGamesPlayed_Closure)
                 (const CMsgClientGamesPlayed *message,
                  void *closure_data);
typedef void (*CMsgGSApprove_Closure)
                 (const CMsgGSApprove *message,
                  void *closure_data);
typedef void (*CMsgGSDeny_Closure)
                 (const CMsgGSDeny *message,
                  void *closure_data);
typedef void (*CMsgGSKick_Closure)
                 (const CMsgGSKick *message,
                  void *closure_data);
typedef void (*CMsgClientAuthList_Closure)
                 (const CMsgClientAuthList *message,
                  void *closure_data);
typedef void (*CMsgClientAuthListAck_Closure)
                 (const CMsgClientAuthListAck *message,
                  void *closure_data);
typedef void (*CMsgClientLicenseList__License_Closure)
                 (const CMsgClientLicenseList__License *message,
                  void *closure_data);
typedef void (*CMsgClientLicenseList_Closure)
                 (const CMsgClientLicenseList *message,
                  void *closure_data);
typedef void (*CMsgClientIsLimitedAccount_Closure)
                 (const CMsgClientIsLimitedAccount *message,
                  void *closure_data);
typedef void (*CMsgClientRequestedClientStats__StatsToSend_Closure)
                 (const CMsgClientRequestedClientStats__StatsToSend *message,
                  void *closure_data);
typedef void (*CMsgClientRequestedClientStats_Closure)
                 (const CMsgClientRequestedClientStats *message,
                  void *closure_data);
typedef void (*CMsgClientStat2__StatDetail_Closure)
                 (const CMsgClientStat2__StatDetail *message,
                  void *closure_data);
typedef void (*CMsgClientStat2_Closure)
                 (const CMsgClientStat2 *message,
                  void *closure_data);
typedef void (*CMsgClientInviteToGame_Closure)
                 (const CMsgClientInviteToGame *message,
                  void *closure_data);
typedef void (*CMsgClientChatInvite_Closure)
                 (const CMsgClientChatInvite *message,
                  void *closure_data);
typedef void (*CMsgClientConnectionStats__StatsLogon_Closure)
                 (const CMsgClientConnectionStats__StatsLogon *message,
                  void *closure_data);
typedef void (*CMsgClientConnectionStats__StatsUDP_Closure)
                 (const CMsgClientConnectionStats__StatsUDP *message,
                  void *closure_data);
typedef void (*CMsgClientConnectionStats__StatsVConn_Closure)
                 (const CMsgClientConnectionStats__StatsVConn *message,
                  void *closure_data);
typedef void (*CMsgClientConnectionStats_Closure)
                 (const CMsgClientConnectionStats *message,
                  void *closure_data);
typedef void (*CMsgClientServersAvailable__ServerTypesAvailable_Closure)
                 (const CMsgClientServersAvailable__ServerTypesAvailable *message,
                  void *closure_data);
typedef void (*CMsgClientServersAvailable_Closure)
                 (const CMsgClientServersAvailable *message,
                  void *closure_data);
typedef void (*CMsgClientReportOverlayDetourFailure_Closure)
                 (const CMsgClientReportOverlayDetourFailure *message,
                  void *closure_data);
typedef void (*CMsgClientRequestEncryptedAppTicket_Closure)
                 (const CMsgClientRequestEncryptedAppTicket *message,
                  void *closure_data);
typedef void (*CMsgClientRequestEncryptedAppTicketResponse_Closure)
                 (const CMsgClientRequestEncryptedAppTicketResponse *message,
                  void *closure_data);
typedef void (*CMsgClientWalletInfoUpdate_Closure)
                 (const CMsgClientWalletInfoUpdate *message,
                  void *closure_data);
typedef void (*CMsgClientAMGetClanOfficers_Closure)
                 (const CMsgClientAMGetClanOfficers *message,
                  void *closure_data);
typedef void (*CMsgClientAMGetClanOfficersResponse_Closure)
                 (const CMsgClientAMGetClanOfficersResponse *message,
                  void *closure_data);
typedef void (*CMsgClientAMGetPersonaNameHistory__IdInstance_Closure)
                 (const CMsgClientAMGetPersonaNameHistory__IdInstance *message,
                  void *closure_data);
typedef void (*CMsgClientAMGetPersonaNameHistory_Closure)
                 (const CMsgClientAMGetPersonaNameHistory *message,
                  void *closure_data);
typedef void (*CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance_Closure)
                 (const CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance__NameInstance *message,
                  void *closure_data);
typedef void (*CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance_Closure)
                 (const CMsgClientAMGetPersonaNameHistoryResponse__NameTableInstance *message,
                  void *closure_data);
typedef void (*CMsgClientAMGetPersonaNameHistoryResponse_Closure)
                 (const CMsgClientAMGetPersonaNameHistoryResponse *message,
                  void *closure_data);
typedef void (*CMsgClientDeregisterWithServer_Closure)
                 (const CMsgClientDeregisterWithServer *message,
                  void *closure_data);
typedef void (*CMsgClientClanState__NameInfo_Closure)
                 (const CMsgClientClanState__NameInfo *message,
                  void *closure_data);
typedef void (*CMsgClientClanState__UserCounts_Closure)
                 (const CMsgClientClanState__UserCounts *message,
                  void *closure_data);
typedef void (*CMsgClientClanState__Event_Closure)
                 (const CMsgClientClanState__Event *message,
                  void *closure_data);
typedef void (*CMsgClientClanState_Closure)
                 (const CMsgClientClanState *message,
                  void *closure_data);

/* --- services --- */


PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_steammessages_5fclientserver_2eproto__INCLUDED */
