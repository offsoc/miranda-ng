/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_chat.steamclient.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "steammessages_chat.steamclient.pb-c.h"
size_t cchat__request_friend_persona_states__request__get_packed_size
                     (const CChatRequestFriendPersonaStatesRequest *message)
{
  assert(message->descriptor == &cchat__request_friend_persona_states__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat__request_friend_persona_states__request__pack
                     (const CChatRequestFriendPersonaStatesRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat__request_friend_persona_states__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat__request_friend_persona_states__request__pack_to_buffer
                     (const CChatRequestFriendPersonaStatesRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat__request_friend_persona_states__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRequestFriendPersonaStatesRequest *
       cchat__request_friend_persona_states__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRequestFriendPersonaStatesRequest *)
     protobuf_c_message_unpack (&cchat__request_friend_persona_states__request__descriptor,
                                allocator, len, data);
}
void   cchat__request_friend_persona_states__request__free_unpacked
                     (CChatRequestFriendPersonaStatesRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat__request_friend_persona_states__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat__request_friend_persona_states__response__get_packed_size
                     (const CChatRequestFriendPersonaStatesResponse *message)
{
  assert(message->descriptor == &cchat__request_friend_persona_states__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat__request_friend_persona_states__response__pack
                     (const CChatRequestFriendPersonaStatesResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat__request_friend_persona_states__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat__request_friend_persona_states__response__pack_to_buffer
                     (const CChatRequestFriendPersonaStatesResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat__request_friend_persona_states__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRequestFriendPersonaStatesResponse *
       cchat__request_friend_persona_states__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRequestFriendPersonaStatesResponse *)
     protobuf_c_message_unpack (&cchat__request_friend_persona_states__response__descriptor,
                                allocator, len, data);
}
void   cchat__request_friend_persona_states__response__free_unpacked
                     (CChatRequestFriendPersonaStatesResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat__request_friend_persona_states__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__create_chat_room_group__request__get_packed_size
                     (const CChatRoomCreateChatRoomGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__create_chat_room_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__create_chat_room_group__request__pack
                     (const CChatRoomCreateChatRoomGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__create_chat_room_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__create_chat_room_group__request__pack_to_buffer
                     (const CChatRoomCreateChatRoomGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__create_chat_room_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomCreateChatRoomGroupRequest *
       cchat_room__create_chat_room_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomCreateChatRoomGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__create_chat_room_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__create_chat_room_group__request__free_unpacked
                     (CChatRoomCreateChatRoomGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__create_chat_room_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_role__get_packed_size
                     (const CChatRole *message)
{
  assert(message->descriptor == &cchat_role__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_role__pack
                     (const CChatRole *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_role__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_role__pack_to_buffer
                     (const CChatRole *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_role__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRole *
       cchat_role__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRole *)
     protobuf_c_message_unpack (&cchat_role__descriptor,
                                allocator, len, data);
}
void   cchat_role__free_unpacked
                     (CChatRole *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_role__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_role_actions__get_packed_size
                     (const CChatRoleActions *message)
{
  assert(message->descriptor == &cchat_role_actions__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_role_actions__pack
                     (const CChatRoleActions *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_role_actions__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_role_actions__pack_to_buffer
                     (const CChatRoleActions *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_role_actions__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoleActions *
       cchat_role_actions__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoleActions *)
     protobuf_c_message_unpack (&cchat_role_actions__descriptor,
                                allocator, len, data);
}
void   cchat_role_actions__free_unpacked
                     (CChatRoleActions *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_role_actions__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_party_beacon__get_packed_size
                     (const CChatPartyBeacon *message)
{
  assert(message->descriptor == &cchat_party_beacon__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_party_beacon__pack
                     (const CChatPartyBeacon *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_party_beacon__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_party_beacon__pack_to_buffer
                     (const CChatPartyBeacon *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_party_beacon__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatPartyBeacon *
       cchat_party_beacon__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatPartyBeacon *)
     protobuf_c_message_unpack (&cchat_party_beacon__descriptor,
                                allocator, len, data);
}
void   cchat_party_beacon__free_unpacked
                     (CChatPartyBeacon *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_party_beacon__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_group_header_state__get_packed_size
                     (const CChatRoomGroupHeaderState *message)
{
  assert(message->descriptor == &cchat_room_group_header_state__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_group_header_state__pack
                     (const CChatRoomGroupHeaderState *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_group_header_state__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_group_header_state__pack_to_buffer
                     (const CChatRoomGroupHeaderState *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_group_header_state__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGroupHeaderState *
       cchat_room_group_header_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGroupHeaderState *)
     protobuf_c_message_unpack (&cchat_room_group_header_state__descriptor,
                                allocator, len, data);
}
void   cchat_room_group_header_state__free_unpacked
                     (CChatRoomGroupHeaderState *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_group_header_state__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_member__get_packed_size
                     (const CChatRoomMember *message)
{
  assert(message->descriptor == &cchat_room_member__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_member__pack
                     (const CChatRoomMember *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_member__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_member__pack_to_buffer
                     (const CChatRoomMember *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_member__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomMember *
       cchat_room_member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomMember *)
     protobuf_c_message_unpack (&cchat_room_member__descriptor,
                                allocator, len, data);
}
void   cchat_room_member__free_unpacked
                     (CChatRoomMember *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_member__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_state__get_packed_size
                     (const CChatRoomState *message)
{
  assert(message->descriptor == &cchat_room_state__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_state__pack
                     (const CChatRoomState *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_state__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_state__pack_to_buffer
                     (const CChatRoomState *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_state__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomState *
       cchat_room_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomState *)
     protobuf_c_message_unpack (&cchat_room_state__descriptor,
                                allocator, len, data);
}
void   cchat_room_state__free_unpacked
                     (CChatRoomState *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_state__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_group_state__get_packed_size
                     (const CChatRoomGroupState *message)
{
  assert(message->descriptor == &cchat_room_group_state__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_group_state__pack
                     (const CChatRoomGroupState *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_group_state__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_group_state__pack_to_buffer
                     (const CChatRoomGroupState *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_group_state__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGroupState *
       cchat_room_group_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGroupState *)
     protobuf_c_message_unpack (&cchat_room_group_state__descriptor,
                                allocator, len, data);
}
void   cchat_room_group_state__free_unpacked
                     (CChatRoomGroupState *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_group_state__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cuser_chat_room_state__get_packed_size
                     (const CUserChatRoomState *message)
{
  assert(message->descriptor == &cuser_chat_room_state__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cuser_chat_room_state__pack
                     (const CUserChatRoomState *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cuser_chat_room_state__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cuser_chat_room_state__pack_to_buffer
                     (const CUserChatRoomState *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cuser_chat_room_state__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CUserChatRoomState *
       cuser_chat_room_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CUserChatRoomState *)
     protobuf_c_message_unpack (&cuser_chat_room_state__descriptor,
                                allocator, len, data);
}
void   cuser_chat_room_state__free_unpacked
                     (CUserChatRoomState *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cuser_chat_room_state__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cuser_chat_room_group_state__get_packed_size
                     (const CUserChatRoomGroupState *message)
{
  assert(message->descriptor == &cuser_chat_room_group_state__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cuser_chat_room_group_state__pack
                     (const CUserChatRoomGroupState *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cuser_chat_room_group_state__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cuser_chat_room_group_state__pack_to_buffer
                     (const CUserChatRoomGroupState *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cuser_chat_room_group_state__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CUserChatRoomGroupState *
       cuser_chat_room_group_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CUserChatRoomGroupState *)
     protobuf_c_message_unpack (&cuser_chat_room_group_state__descriptor,
                                allocator, len, data);
}
void   cuser_chat_room_group_state__free_unpacked
                     (CUserChatRoomGroupState *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cuser_chat_room_group_state__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__create_chat_room_group__response__get_packed_size
                     (const CChatRoomCreateChatRoomGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__create_chat_room_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__create_chat_room_group__response__pack
                     (const CChatRoomCreateChatRoomGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__create_chat_room_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__create_chat_room_group__response__pack_to_buffer
                     (const CChatRoomCreateChatRoomGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__create_chat_room_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomCreateChatRoomGroupResponse *
       cchat_room__create_chat_room_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomCreateChatRoomGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__create_chat_room_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__create_chat_room_group__response__free_unpacked
                     (CChatRoomCreateChatRoomGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__create_chat_room_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__save_chat_room_group__request__get_packed_size
                     (const CChatRoomSaveChatRoomGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__save_chat_room_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__save_chat_room_group__request__pack
                     (const CChatRoomSaveChatRoomGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__save_chat_room_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__save_chat_room_group__request__pack_to_buffer
                     (const CChatRoomSaveChatRoomGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__save_chat_room_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSaveChatRoomGroupRequest *
       cchat_room__save_chat_room_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSaveChatRoomGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__save_chat_room_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__save_chat_room_group__request__free_unpacked
                     (CChatRoomSaveChatRoomGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__save_chat_room_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__save_chat_room_group__response__get_packed_size
                     (const CChatRoomSaveChatRoomGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__save_chat_room_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__save_chat_room_group__response__pack
                     (const CChatRoomSaveChatRoomGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__save_chat_room_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__save_chat_room_group__response__pack_to_buffer
                     (const CChatRoomSaveChatRoomGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__save_chat_room_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSaveChatRoomGroupResponse *
       cchat_room__save_chat_room_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSaveChatRoomGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__save_chat_room_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__save_chat_room_group__response__free_unpacked
                     (CChatRoomSaveChatRoomGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__save_chat_room_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__rename_chat_room_group__request__get_packed_size
                     (const CChatRoomRenameChatRoomGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__rename_chat_room_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__rename_chat_room_group__request__pack
                     (const CChatRoomRenameChatRoomGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__rename_chat_room_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__rename_chat_room_group__request__pack_to_buffer
                     (const CChatRoomRenameChatRoomGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__rename_chat_room_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomRenameChatRoomGroupRequest *
       cchat_room__rename_chat_room_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomRenameChatRoomGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__rename_chat_room_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__rename_chat_room_group__request__free_unpacked
                     (CChatRoomRenameChatRoomGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__rename_chat_room_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__rename_chat_room_group__response__get_packed_size
                     (const CChatRoomRenameChatRoomGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__rename_chat_room_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__rename_chat_room_group__response__pack
                     (const CChatRoomRenameChatRoomGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__rename_chat_room_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__rename_chat_room_group__response__pack_to_buffer
                     (const CChatRoomRenameChatRoomGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__rename_chat_room_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomRenameChatRoomGroupResponse *
       cchat_room__rename_chat_room_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomRenameChatRoomGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__rename_chat_room_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__rename_chat_room_group__response__free_unpacked
                     (CChatRoomRenameChatRoomGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__rename_chat_room_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_chat_room_group_tagline__request__get_packed_size
                     (const CChatRoomSetChatRoomGroupTaglineRequest *message)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_tagline__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_chat_room_group_tagline__request__pack
                     (const CChatRoomSetChatRoomGroupTaglineRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_tagline__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_chat_room_group_tagline__request__pack_to_buffer
                     (const CChatRoomSetChatRoomGroupTaglineRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_tagline__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetChatRoomGroupTaglineRequest *
       cchat_room__set_chat_room_group_tagline__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetChatRoomGroupTaglineRequest *)
     protobuf_c_message_unpack (&cchat_room__set_chat_room_group_tagline__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_chat_room_group_tagline__request__free_unpacked
                     (CChatRoomSetChatRoomGroupTaglineRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_chat_room_group_tagline__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_chat_room_group_tagline__response__get_packed_size
                     (const CChatRoomSetChatRoomGroupTaglineResponse *message)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_tagline__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_chat_room_group_tagline__response__pack
                     (const CChatRoomSetChatRoomGroupTaglineResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_tagline__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_chat_room_group_tagline__response__pack_to_buffer
                     (const CChatRoomSetChatRoomGroupTaglineResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_tagline__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetChatRoomGroupTaglineResponse *
       cchat_room__set_chat_room_group_tagline__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetChatRoomGroupTaglineResponse *)
     protobuf_c_message_unpack (&cchat_room__set_chat_room_group_tagline__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_chat_room_group_tagline__response__free_unpacked
                     (CChatRoomSetChatRoomGroupTaglineResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_chat_room_group_tagline__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_chat_room_group_avatar__request__get_packed_size
                     (const CChatRoomSetChatRoomGroupAvatarRequest *message)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_avatar__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_chat_room_group_avatar__request__pack
                     (const CChatRoomSetChatRoomGroupAvatarRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_avatar__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_chat_room_group_avatar__request__pack_to_buffer
                     (const CChatRoomSetChatRoomGroupAvatarRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_avatar__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetChatRoomGroupAvatarRequest *
       cchat_room__set_chat_room_group_avatar__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetChatRoomGroupAvatarRequest *)
     protobuf_c_message_unpack (&cchat_room__set_chat_room_group_avatar__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_chat_room_group_avatar__request__free_unpacked
                     (CChatRoomSetChatRoomGroupAvatarRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_chat_room_group_avatar__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_chat_room_group_avatar__response__get_packed_size
                     (const CChatRoomSetChatRoomGroupAvatarResponse *message)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_avatar__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_chat_room_group_avatar__response__pack
                     (const CChatRoomSetChatRoomGroupAvatarResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_avatar__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_chat_room_group_avatar__response__pack_to_buffer
                     (const CChatRoomSetChatRoomGroupAvatarResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_avatar__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetChatRoomGroupAvatarResponse *
       cchat_room__set_chat_room_group_avatar__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetChatRoomGroupAvatarResponse *)
     protobuf_c_message_unpack (&cchat_room__set_chat_room_group_avatar__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_chat_room_group_avatar__response__free_unpacked
                     (CChatRoomSetChatRoomGroupAvatarResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_chat_room_group_avatar__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_chat_room_group_watching_broadcast__request__get_packed_size
                     (const CChatRoomSetChatRoomGroupWatchingBroadcastRequest *message)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_watching_broadcast__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_chat_room_group_watching_broadcast__request__pack
                     (const CChatRoomSetChatRoomGroupWatchingBroadcastRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_watching_broadcast__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_chat_room_group_watching_broadcast__request__pack_to_buffer
                     (const CChatRoomSetChatRoomGroupWatchingBroadcastRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_watching_broadcast__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetChatRoomGroupWatchingBroadcastRequest *
       cchat_room__set_chat_room_group_watching_broadcast__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetChatRoomGroupWatchingBroadcastRequest *)
     protobuf_c_message_unpack (&cchat_room__set_chat_room_group_watching_broadcast__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_chat_room_group_watching_broadcast__request__free_unpacked
                     (CChatRoomSetChatRoomGroupWatchingBroadcastRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_chat_room_group_watching_broadcast__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_chat_room_group_watching_broadcast__response__get_packed_size
                     (const CChatRoomSetChatRoomGroupWatchingBroadcastResponse *message)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_watching_broadcast__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_chat_room_group_watching_broadcast__response__pack
                     (const CChatRoomSetChatRoomGroupWatchingBroadcastResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_watching_broadcast__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_chat_room_group_watching_broadcast__response__pack_to_buffer
                     (const CChatRoomSetChatRoomGroupWatchingBroadcastResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_chat_room_group_watching_broadcast__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetChatRoomGroupWatchingBroadcastResponse *
       cchat_room__set_chat_room_group_watching_broadcast__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetChatRoomGroupWatchingBroadcastResponse *)
     protobuf_c_message_unpack (&cchat_room__set_chat_room_group_watching_broadcast__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_chat_room_group_watching_broadcast__response__free_unpacked
                     (CChatRoomSetChatRoomGroupWatchingBroadcastResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_chat_room_group_watching_broadcast__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__join_mini_game_for_chat_room_group__request__get_packed_size
                     (const CChatRoomJoinMiniGameForChatRoomGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__join_mini_game_for_chat_room_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__join_mini_game_for_chat_room_group__request__pack
                     (const CChatRoomJoinMiniGameForChatRoomGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__join_mini_game_for_chat_room_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__join_mini_game_for_chat_room_group__request__pack_to_buffer
                     (const CChatRoomJoinMiniGameForChatRoomGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__join_mini_game_for_chat_room_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomJoinMiniGameForChatRoomGroupRequest *
       cchat_room__join_mini_game_for_chat_room_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomJoinMiniGameForChatRoomGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__join_mini_game_for_chat_room_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__join_mini_game_for_chat_room_group__request__free_unpacked
                     (CChatRoomJoinMiniGameForChatRoomGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__join_mini_game_for_chat_room_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__join_mini_game_for_chat_room_group__response__get_packed_size
                     (const CChatRoomJoinMiniGameForChatRoomGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__join_mini_game_for_chat_room_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__join_mini_game_for_chat_room_group__response__pack
                     (const CChatRoomJoinMiniGameForChatRoomGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__join_mini_game_for_chat_room_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__join_mini_game_for_chat_room_group__response__pack_to_buffer
                     (const CChatRoomJoinMiniGameForChatRoomGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__join_mini_game_for_chat_room_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomJoinMiniGameForChatRoomGroupResponse *
       cchat_room__join_mini_game_for_chat_room_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomJoinMiniGameForChatRoomGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__join_mini_game_for_chat_room_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__join_mini_game_for_chat_room_group__response__free_unpacked
                     (CChatRoomJoinMiniGameForChatRoomGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__join_mini_game_for_chat_room_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__end_mini_game_for_chat_room_group__request__get_packed_size
                     (const CChatRoomEndMiniGameForChatRoomGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__end_mini_game_for_chat_room_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__end_mini_game_for_chat_room_group__request__pack
                     (const CChatRoomEndMiniGameForChatRoomGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__end_mini_game_for_chat_room_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__end_mini_game_for_chat_room_group__request__pack_to_buffer
                     (const CChatRoomEndMiniGameForChatRoomGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__end_mini_game_for_chat_room_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomEndMiniGameForChatRoomGroupRequest *
       cchat_room__end_mini_game_for_chat_room_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomEndMiniGameForChatRoomGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__end_mini_game_for_chat_room_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__end_mini_game_for_chat_room_group__request__free_unpacked
                     (CChatRoomEndMiniGameForChatRoomGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__end_mini_game_for_chat_room_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__end_mini_game_for_chat_room_group__response__get_packed_size
                     (const CChatRoomEndMiniGameForChatRoomGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__end_mini_game_for_chat_room_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__end_mini_game_for_chat_room_group__response__pack
                     (const CChatRoomEndMiniGameForChatRoomGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__end_mini_game_for_chat_room_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__end_mini_game_for_chat_room_group__response__pack_to_buffer
                     (const CChatRoomEndMiniGameForChatRoomGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__end_mini_game_for_chat_room_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomEndMiniGameForChatRoomGroupResponse *
       cchat_room__end_mini_game_for_chat_room_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomEndMiniGameForChatRoomGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__end_mini_game_for_chat_room_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__end_mini_game_for_chat_room_group__response__free_unpacked
                     (CChatRoomEndMiniGameForChatRoomGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__end_mini_game_for_chat_room_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__mute_user__request__get_packed_size
                     (const CChatRoomMuteUserRequest *message)
{
  assert(message->descriptor == &cchat_room__mute_user__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__mute_user__request__pack
                     (const CChatRoomMuteUserRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__mute_user__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__mute_user__request__pack_to_buffer
                     (const CChatRoomMuteUserRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__mute_user__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomMuteUserRequest *
       cchat_room__mute_user__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomMuteUserRequest *)
     protobuf_c_message_unpack (&cchat_room__mute_user__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__mute_user__request__free_unpacked
                     (CChatRoomMuteUserRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__mute_user__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__mute_user__response__get_packed_size
                     (const CChatRoomMuteUserResponse *message)
{
  assert(message->descriptor == &cchat_room__mute_user__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__mute_user__response__pack
                     (const CChatRoomMuteUserResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__mute_user__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__mute_user__response__pack_to_buffer
                     (const CChatRoomMuteUserResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__mute_user__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomMuteUserResponse *
       cchat_room__mute_user__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomMuteUserResponse *)
     protobuf_c_message_unpack (&cchat_room__mute_user__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__mute_user__response__free_unpacked
                     (CChatRoomMuteUserResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__mute_user__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__kick_user__request__get_packed_size
                     (const CChatRoomKickUserRequest *message)
{
  assert(message->descriptor == &cchat_room__kick_user__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__kick_user__request__pack
                     (const CChatRoomKickUserRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__kick_user__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__kick_user__request__pack_to_buffer
                     (const CChatRoomKickUserRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__kick_user__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomKickUserRequest *
       cchat_room__kick_user__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomKickUserRequest *)
     protobuf_c_message_unpack (&cchat_room__kick_user__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__kick_user__request__free_unpacked
                     (CChatRoomKickUserRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__kick_user__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__kick_user__response__get_packed_size
                     (const CChatRoomKickUserResponse *message)
{
  assert(message->descriptor == &cchat_room__kick_user__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__kick_user__response__pack
                     (const CChatRoomKickUserResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__kick_user__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__kick_user__response__pack_to_buffer
                     (const CChatRoomKickUserResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__kick_user__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomKickUserResponse *
       cchat_room__kick_user__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomKickUserResponse *)
     protobuf_c_message_unpack (&cchat_room__kick_user__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__kick_user__response__free_unpacked
                     (CChatRoomKickUserResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__kick_user__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_user_ban_state__request__get_packed_size
                     (const CChatRoomSetUserBanStateRequest *message)
{
  assert(message->descriptor == &cchat_room__set_user_ban_state__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_user_ban_state__request__pack
                     (const CChatRoomSetUserBanStateRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_user_ban_state__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_user_ban_state__request__pack_to_buffer
                     (const CChatRoomSetUserBanStateRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_user_ban_state__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetUserBanStateRequest *
       cchat_room__set_user_ban_state__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetUserBanStateRequest *)
     protobuf_c_message_unpack (&cchat_room__set_user_ban_state__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_user_ban_state__request__free_unpacked
                     (CChatRoomSetUserBanStateRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_user_ban_state__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_user_ban_state__response__get_packed_size
                     (const CChatRoomSetUserBanStateResponse *message)
{
  assert(message->descriptor == &cchat_room__set_user_ban_state__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_user_ban_state__response__pack
                     (const CChatRoomSetUserBanStateResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_user_ban_state__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_user_ban_state__response__pack_to_buffer
                     (const CChatRoomSetUserBanStateResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_user_ban_state__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetUserBanStateResponse *
       cchat_room__set_user_ban_state__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetUserBanStateResponse *)
     protobuf_c_message_unpack (&cchat_room__set_user_ban_state__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_user_ban_state__response__free_unpacked
                     (CChatRoomSetUserBanStateResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_user_ban_state__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__revoke_invite__request__get_packed_size
                     (const CChatRoomRevokeInviteRequest *message)
{
  assert(message->descriptor == &cchat_room__revoke_invite__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__revoke_invite__request__pack
                     (const CChatRoomRevokeInviteRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__revoke_invite__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__revoke_invite__request__pack_to_buffer
                     (const CChatRoomRevokeInviteRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__revoke_invite__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomRevokeInviteRequest *
       cchat_room__revoke_invite__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomRevokeInviteRequest *)
     protobuf_c_message_unpack (&cchat_room__revoke_invite__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__revoke_invite__request__free_unpacked
                     (CChatRoomRevokeInviteRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__revoke_invite__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__revoke_invite__response__get_packed_size
                     (const CChatRoomRevokeInviteResponse *message)
{
  assert(message->descriptor == &cchat_room__revoke_invite__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__revoke_invite__response__pack
                     (const CChatRoomRevokeInviteResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__revoke_invite__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__revoke_invite__response__pack_to_buffer
                     (const CChatRoomRevokeInviteResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__revoke_invite__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomRevokeInviteResponse *
       cchat_room__revoke_invite__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomRevokeInviteResponse *)
     protobuf_c_message_unpack (&cchat_room__revoke_invite__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__revoke_invite__response__free_unpacked
                     (CChatRoomRevokeInviteResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__revoke_invite__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__create_role__request__get_packed_size
                     (const CChatRoomCreateRoleRequest *message)
{
  assert(message->descriptor == &cchat_room__create_role__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__create_role__request__pack
                     (const CChatRoomCreateRoleRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__create_role__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__create_role__request__pack_to_buffer
                     (const CChatRoomCreateRoleRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__create_role__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomCreateRoleRequest *
       cchat_room__create_role__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomCreateRoleRequest *)
     protobuf_c_message_unpack (&cchat_room__create_role__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__create_role__request__free_unpacked
                     (CChatRoomCreateRoleRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__create_role__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__create_role__response__get_packed_size
                     (const CChatRoomCreateRoleResponse *message)
{
  assert(message->descriptor == &cchat_room__create_role__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__create_role__response__pack
                     (const CChatRoomCreateRoleResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__create_role__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__create_role__response__pack_to_buffer
                     (const CChatRoomCreateRoleResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__create_role__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomCreateRoleResponse *
       cchat_room__create_role__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomCreateRoleResponse *)
     protobuf_c_message_unpack (&cchat_room__create_role__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__create_role__response__free_unpacked
                     (CChatRoomCreateRoleResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__create_role__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_roles__request__get_packed_size
                     (const CChatRoomGetRolesRequest *message)
{
  assert(message->descriptor == &cchat_room__get_roles__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_roles__request__pack
                     (const CChatRoomGetRolesRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_roles__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_roles__request__pack_to_buffer
                     (const CChatRoomGetRolesRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_roles__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetRolesRequest *
       cchat_room__get_roles__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetRolesRequest *)
     protobuf_c_message_unpack (&cchat_room__get_roles__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_roles__request__free_unpacked
                     (CChatRoomGetRolesRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_roles__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_roles__response__get_packed_size
                     (const CChatRoomGetRolesResponse *message)
{
  assert(message->descriptor == &cchat_room__get_roles__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_roles__response__pack
                     (const CChatRoomGetRolesResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_roles__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_roles__response__pack_to_buffer
                     (const CChatRoomGetRolesResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_roles__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetRolesResponse *
       cchat_room__get_roles__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetRolesResponse *)
     protobuf_c_message_unpack (&cchat_room__get_roles__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_roles__response__free_unpacked
                     (CChatRoomGetRolesResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_roles__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__rename_role__request__get_packed_size
                     (const CChatRoomRenameRoleRequest *message)
{
  assert(message->descriptor == &cchat_room__rename_role__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__rename_role__request__pack
                     (const CChatRoomRenameRoleRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__rename_role__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__rename_role__request__pack_to_buffer
                     (const CChatRoomRenameRoleRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__rename_role__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomRenameRoleRequest *
       cchat_room__rename_role__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomRenameRoleRequest *)
     protobuf_c_message_unpack (&cchat_room__rename_role__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__rename_role__request__free_unpacked
                     (CChatRoomRenameRoleRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__rename_role__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__rename_role__response__get_packed_size
                     (const CChatRoomRenameRoleResponse *message)
{
  assert(message->descriptor == &cchat_room__rename_role__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__rename_role__response__pack
                     (const CChatRoomRenameRoleResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__rename_role__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__rename_role__response__pack_to_buffer
                     (const CChatRoomRenameRoleResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__rename_role__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomRenameRoleResponse *
       cchat_room__rename_role__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomRenameRoleResponse *)
     protobuf_c_message_unpack (&cchat_room__rename_role__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__rename_role__response__free_unpacked
                     (CChatRoomRenameRoleResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__rename_role__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__reorder_role__request__get_packed_size
                     (const CChatRoomReorderRoleRequest *message)
{
  assert(message->descriptor == &cchat_room__reorder_role__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__reorder_role__request__pack
                     (const CChatRoomReorderRoleRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__reorder_role__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__reorder_role__request__pack_to_buffer
                     (const CChatRoomReorderRoleRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__reorder_role__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomReorderRoleRequest *
       cchat_room__reorder_role__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomReorderRoleRequest *)
     protobuf_c_message_unpack (&cchat_room__reorder_role__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__reorder_role__request__free_unpacked
                     (CChatRoomReorderRoleRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__reorder_role__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__reorder_role__response__get_packed_size
                     (const CChatRoomReorderRoleResponse *message)
{
  assert(message->descriptor == &cchat_room__reorder_role__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__reorder_role__response__pack
                     (const CChatRoomReorderRoleResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__reorder_role__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__reorder_role__response__pack_to_buffer
                     (const CChatRoomReorderRoleResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__reorder_role__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomReorderRoleResponse *
       cchat_room__reorder_role__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomReorderRoleResponse *)
     protobuf_c_message_unpack (&cchat_room__reorder_role__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__reorder_role__response__free_unpacked
                     (CChatRoomReorderRoleResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__reorder_role__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_role__request__get_packed_size
                     (const CChatRoomDeleteRoleRequest *message)
{
  assert(message->descriptor == &cchat_room__delete_role__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_role__request__pack
                     (const CChatRoomDeleteRoleRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_role__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_role__request__pack_to_buffer
                     (const CChatRoomDeleteRoleRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_role__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteRoleRequest *
       cchat_room__delete_role__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteRoleRequest *)
     protobuf_c_message_unpack (&cchat_room__delete_role__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_role__request__free_unpacked
                     (CChatRoomDeleteRoleRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_role__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_role__response__get_packed_size
                     (const CChatRoomDeleteRoleResponse *message)
{
  assert(message->descriptor == &cchat_room__delete_role__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_role__response__pack
                     (const CChatRoomDeleteRoleResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_role__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_role__response__pack_to_buffer
                     (const CChatRoomDeleteRoleResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_role__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteRoleResponse *
       cchat_room__delete_role__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteRoleResponse *)
     protobuf_c_message_unpack (&cchat_room__delete_role__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_role__response__free_unpacked
                     (CChatRoomDeleteRoleResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_role__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_role_actions__request__get_packed_size
                     (const CChatRoomGetRoleActionsRequest *message)
{
  assert(message->descriptor == &cchat_room__get_role_actions__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_role_actions__request__pack
                     (const CChatRoomGetRoleActionsRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_role_actions__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_role_actions__request__pack_to_buffer
                     (const CChatRoomGetRoleActionsRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_role_actions__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetRoleActionsRequest *
       cchat_room__get_role_actions__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetRoleActionsRequest *)
     protobuf_c_message_unpack (&cchat_room__get_role_actions__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_role_actions__request__free_unpacked
                     (CChatRoomGetRoleActionsRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_role_actions__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_role_actions__response__get_packed_size
                     (const CChatRoomGetRoleActionsResponse *message)
{
  assert(message->descriptor == &cchat_room__get_role_actions__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_role_actions__response__pack
                     (const CChatRoomGetRoleActionsResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_role_actions__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_role_actions__response__pack_to_buffer
                     (const CChatRoomGetRoleActionsResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_role_actions__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetRoleActionsResponse *
       cchat_room__get_role_actions__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetRoleActionsResponse *)
     protobuf_c_message_unpack (&cchat_room__get_role_actions__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_role_actions__response__free_unpacked
                     (CChatRoomGetRoleActionsResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_role_actions__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__replace_role_actions__request__get_packed_size
                     (const CChatRoomReplaceRoleActionsRequest *message)
{
  assert(message->descriptor == &cchat_room__replace_role_actions__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__replace_role_actions__request__pack
                     (const CChatRoomReplaceRoleActionsRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__replace_role_actions__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__replace_role_actions__request__pack_to_buffer
                     (const CChatRoomReplaceRoleActionsRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__replace_role_actions__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomReplaceRoleActionsRequest *
       cchat_room__replace_role_actions__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomReplaceRoleActionsRequest *)
     protobuf_c_message_unpack (&cchat_room__replace_role_actions__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__replace_role_actions__request__free_unpacked
                     (CChatRoomReplaceRoleActionsRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__replace_role_actions__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__replace_role_actions__response__get_packed_size
                     (const CChatRoomReplaceRoleActionsResponse *message)
{
  assert(message->descriptor == &cchat_room__replace_role_actions__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__replace_role_actions__response__pack
                     (const CChatRoomReplaceRoleActionsResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__replace_role_actions__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__replace_role_actions__response__pack_to_buffer
                     (const CChatRoomReplaceRoleActionsResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__replace_role_actions__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomReplaceRoleActionsResponse *
       cchat_room__replace_role_actions__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomReplaceRoleActionsResponse *)
     protobuf_c_message_unpack (&cchat_room__replace_role_actions__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__replace_role_actions__response__free_unpacked
                     (CChatRoomReplaceRoleActionsResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__replace_role_actions__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__add_role_to_user__request__get_packed_size
                     (const CChatRoomAddRoleToUserRequest *message)
{
  assert(message->descriptor == &cchat_room__add_role_to_user__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__add_role_to_user__request__pack
                     (const CChatRoomAddRoleToUserRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__add_role_to_user__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__add_role_to_user__request__pack_to_buffer
                     (const CChatRoomAddRoleToUserRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__add_role_to_user__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomAddRoleToUserRequest *
       cchat_room__add_role_to_user__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomAddRoleToUserRequest *)
     protobuf_c_message_unpack (&cchat_room__add_role_to_user__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__add_role_to_user__request__free_unpacked
                     (CChatRoomAddRoleToUserRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__add_role_to_user__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__add_role_to_user__response__get_packed_size
                     (const CChatRoomAddRoleToUserResponse *message)
{
  assert(message->descriptor == &cchat_room__add_role_to_user__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__add_role_to_user__response__pack
                     (const CChatRoomAddRoleToUserResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__add_role_to_user__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__add_role_to_user__response__pack_to_buffer
                     (const CChatRoomAddRoleToUserResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__add_role_to_user__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomAddRoleToUserResponse *
       cchat_room__add_role_to_user__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomAddRoleToUserResponse *)
     protobuf_c_message_unpack (&cchat_room__add_role_to_user__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__add_role_to_user__response__free_unpacked
                     (CChatRoomAddRoleToUserResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__add_role_to_user__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_roles_for_user__request__get_packed_size
                     (const CChatRoomGetRolesForUserRequest *message)
{
  assert(message->descriptor == &cchat_room__get_roles_for_user__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_roles_for_user__request__pack
                     (const CChatRoomGetRolesForUserRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_roles_for_user__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_roles_for_user__request__pack_to_buffer
                     (const CChatRoomGetRolesForUserRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_roles_for_user__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetRolesForUserRequest *
       cchat_room__get_roles_for_user__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetRolesForUserRequest *)
     protobuf_c_message_unpack (&cchat_room__get_roles_for_user__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_roles_for_user__request__free_unpacked
                     (CChatRoomGetRolesForUserRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_roles_for_user__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_roles_for_user__response__get_packed_size
                     (const CChatRoomGetRolesForUserResponse *message)
{
  assert(message->descriptor == &cchat_room__get_roles_for_user__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_roles_for_user__response__pack
                     (const CChatRoomGetRolesForUserResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_roles_for_user__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_roles_for_user__response__pack_to_buffer
                     (const CChatRoomGetRolesForUserResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_roles_for_user__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetRolesForUserResponse *
       cchat_room__get_roles_for_user__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetRolesForUserResponse *)
     protobuf_c_message_unpack (&cchat_room__get_roles_for_user__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_roles_for_user__response__free_unpacked
                     (CChatRoomGetRolesForUserResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_roles_for_user__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_role_from_user__request__get_packed_size
                     (const CChatRoomDeleteRoleFromUserRequest *message)
{
  assert(message->descriptor == &cchat_room__delete_role_from_user__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_role_from_user__request__pack
                     (const CChatRoomDeleteRoleFromUserRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_role_from_user__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_role_from_user__request__pack_to_buffer
                     (const CChatRoomDeleteRoleFromUserRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_role_from_user__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteRoleFromUserRequest *
       cchat_room__delete_role_from_user__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteRoleFromUserRequest *)
     protobuf_c_message_unpack (&cchat_room__delete_role_from_user__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_role_from_user__request__free_unpacked
                     (CChatRoomDeleteRoleFromUserRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_role_from_user__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_role_from_user__response__get_packed_size
                     (const CChatRoomDeleteRoleFromUserResponse *message)
{
  assert(message->descriptor == &cchat_room__delete_role_from_user__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_role_from_user__response__pack
                     (const CChatRoomDeleteRoleFromUserResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_role_from_user__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_role_from_user__response__pack_to_buffer
                     (const CChatRoomDeleteRoleFromUserResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_role_from_user__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteRoleFromUserResponse *
       cchat_room__delete_role_from_user__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteRoleFromUserResponse *)
     protobuf_c_message_unpack (&cchat_room__delete_role_from_user__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_role_from_user__response__free_unpacked
                     (CChatRoomDeleteRoleFromUserResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_role_from_user__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__join_chat_room_group__request__get_packed_size
                     (const CChatRoomJoinChatRoomGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__join_chat_room_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__join_chat_room_group__request__pack
                     (const CChatRoomJoinChatRoomGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__join_chat_room_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__join_chat_room_group__request__pack_to_buffer
                     (const CChatRoomJoinChatRoomGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__join_chat_room_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomJoinChatRoomGroupRequest *
       cchat_room__join_chat_room_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomJoinChatRoomGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__join_chat_room_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__join_chat_room_group__request__free_unpacked
                     (CChatRoomJoinChatRoomGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__join_chat_room_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__join_chat_room_group__response__get_packed_size
                     (const CChatRoomJoinChatRoomGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__join_chat_room_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__join_chat_room_group__response__pack
                     (const CChatRoomJoinChatRoomGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__join_chat_room_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__join_chat_room_group__response__pack_to_buffer
                     (const CChatRoomJoinChatRoomGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__join_chat_room_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomJoinChatRoomGroupResponse *
       cchat_room__join_chat_room_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomJoinChatRoomGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__join_chat_room_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__join_chat_room_group__response__free_unpacked
                     (CChatRoomJoinChatRoomGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__join_chat_room_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__invite_friend_to_chat_room_group__request__get_packed_size
                     (const CChatRoomInviteFriendToChatRoomGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__invite_friend_to_chat_room_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__invite_friend_to_chat_room_group__request__pack
                     (const CChatRoomInviteFriendToChatRoomGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__invite_friend_to_chat_room_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__invite_friend_to_chat_room_group__request__pack_to_buffer
                     (const CChatRoomInviteFriendToChatRoomGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__invite_friend_to_chat_room_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomInviteFriendToChatRoomGroupRequest *
       cchat_room__invite_friend_to_chat_room_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomInviteFriendToChatRoomGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__invite_friend_to_chat_room_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__invite_friend_to_chat_room_group__request__free_unpacked
                     (CChatRoomInviteFriendToChatRoomGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__invite_friend_to_chat_room_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__invite_friend_to_chat_room_group__response__get_packed_size
                     (const CChatRoomInviteFriendToChatRoomGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__invite_friend_to_chat_room_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__invite_friend_to_chat_room_group__response__pack
                     (const CChatRoomInviteFriendToChatRoomGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__invite_friend_to_chat_room_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__invite_friend_to_chat_room_group__response__pack_to_buffer
                     (const CChatRoomInviteFriendToChatRoomGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__invite_friend_to_chat_room_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomInviteFriendToChatRoomGroupResponse *
       cchat_room__invite_friend_to_chat_room_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomInviteFriendToChatRoomGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__invite_friend_to_chat_room_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__invite_friend_to_chat_room_group__response__free_unpacked
                     (CChatRoomInviteFriendToChatRoomGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__invite_friend_to_chat_room_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__leave_chat_room_group__request__get_packed_size
                     (const CChatRoomLeaveChatRoomGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__leave_chat_room_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__leave_chat_room_group__request__pack
                     (const CChatRoomLeaveChatRoomGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__leave_chat_room_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__leave_chat_room_group__request__pack_to_buffer
                     (const CChatRoomLeaveChatRoomGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__leave_chat_room_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomLeaveChatRoomGroupRequest *
       cchat_room__leave_chat_room_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomLeaveChatRoomGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__leave_chat_room_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__leave_chat_room_group__request__free_unpacked
                     (CChatRoomLeaveChatRoomGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__leave_chat_room_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__leave_chat_room_group__response__get_packed_size
                     (const CChatRoomLeaveChatRoomGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__leave_chat_room_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__leave_chat_room_group__response__pack
                     (const CChatRoomLeaveChatRoomGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__leave_chat_room_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__leave_chat_room_group__response__pack_to_buffer
                     (const CChatRoomLeaveChatRoomGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__leave_chat_room_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomLeaveChatRoomGroupResponse *
       cchat_room__leave_chat_room_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomLeaveChatRoomGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__leave_chat_room_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__leave_chat_room_group__response__free_unpacked
                     (CChatRoomLeaveChatRoomGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__leave_chat_room_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__create_chat_room__request__get_packed_size
                     (const CChatRoomCreateChatRoomRequest *message)
{
  assert(message->descriptor == &cchat_room__create_chat_room__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__create_chat_room__request__pack
                     (const CChatRoomCreateChatRoomRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__create_chat_room__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__create_chat_room__request__pack_to_buffer
                     (const CChatRoomCreateChatRoomRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__create_chat_room__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomCreateChatRoomRequest *
       cchat_room__create_chat_room__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomCreateChatRoomRequest *)
     protobuf_c_message_unpack (&cchat_room__create_chat_room__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__create_chat_room__request__free_unpacked
                     (CChatRoomCreateChatRoomRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__create_chat_room__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__create_chat_room__response__get_packed_size
                     (const CChatRoomCreateChatRoomResponse *message)
{
  assert(message->descriptor == &cchat_room__create_chat_room__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__create_chat_room__response__pack
                     (const CChatRoomCreateChatRoomResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__create_chat_room__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__create_chat_room__response__pack_to_buffer
                     (const CChatRoomCreateChatRoomResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__create_chat_room__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomCreateChatRoomResponse *
       cchat_room__create_chat_room__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomCreateChatRoomResponse *)
     protobuf_c_message_unpack (&cchat_room__create_chat_room__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__create_chat_room__response__free_unpacked
                     (CChatRoomCreateChatRoomResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__create_chat_room__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_chat_room__request__get_packed_size
                     (const CChatRoomDeleteChatRoomRequest *message)
{
  assert(message->descriptor == &cchat_room__delete_chat_room__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_chat_room__request__pack
                     (const CChatRoomDeleteChatRoomRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_chat_room__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_chat_room__request__pack_to_buffer
                     (const CChatRoomDeleteChatRoomRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_chat_room__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteChatRoomRequest *
       cchat_room__delete_chat_room__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteChatRoomRequest *)
     protobuf_c_message_unpack (&cchat_room__delete_chat_room__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_chat_room__request__free_unpacked
                     (CChatRoomDeleteChatRoomRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_chat_room__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_chat_room__response__get_packed_size
                     (const CChatRoomDeleteChatRoomResponse *message)
{
  assert(message->descriptor == &cchat_room__delete_chat_room__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_chat_room__response__pack
                     (const CChatRoomDeleteChatRoomResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_chat_room__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_chat_room__response__pack_to_buffer
                     (const CChatRoomDeleteChatRoomResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_chat_room__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteChatRoomResponse *
       cchat_room__delete_chat_room__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteChatRoomResponse *)
     protobuf_c_message_unpack (&cchat_room__delete_chat_room__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_chat_room__response__free_unpacked
                     (CChatRoomDeleteChatRoomResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_chat_room__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__rename_chat_room__request__get_packed_size
                     (const CChatRoomRenameChatRoomRequest *message)
{
  assert(message->descriptor == &cchat_room__rename_chat_room__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__rename_chat_room__request__pack
                     (const CChatRoomRenameChatRoomRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__rename_chat_room__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__rename_chat_room__request__pack_to_buffer
                     (const CChatRoomRenameChatRoomRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__rename_chat_room__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomRenameChatRoomRequest *
       cchat_room__rename_chat_room__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomRenameChatRoomRequest *)
     protobuf_c_message_unpack (&cchat_room__rename_chat_room__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__rename_chat_room__request__free_unpacked
                     (CChatRoomRenameChatRoomRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__rename_chat_room__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__rename_chat_room__response__get_packed_size
                     (const CChatRoomRenameChatRoomResponse *message)
{
  assert(message->descriptor == &cchat_room__rename_chat_room__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__rename_chat_room__response__pack
                     (const CChatRoomRenameChatRoomResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__rename_chat_room__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__rename_chat_room__response__pack_to_buffer
                     (const CChatRoomRenameChatRoomResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__rename_chat_room__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomRenameChatRoomResponse *
       cchat_room__rename_chat_room__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomRenameChatRoomResponse *)
     protobuf_c_message_unpack (&cchat_room__rename_chat_room__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__rename_chat_room__response__free_unpacked
                     (CChatRoomRenameChatRoomResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__rename_chat_room__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__reorder_chat_room__request__get_packed_size
                     (const CChatRoomReorderChatRoomRequest *message)
{
  assert(message->descriptor == &cchat_room__reorder_chat_room__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__reorder_chat_room__request__pack
                     (const CChatRoomReorderChatRoomRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__reorder_chat_room__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__reorder_chat_room__request__pack_to_buffer
                     (const CChatRoomReorderChatRoomRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__reorder_chat_room__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomReorderChatRoomRequest *
       cchat_room__reorder_chat_room__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomReorderChatRoomRequest *)
     protobuf_c_message_unpack (&cchat_room__reorder_chat_room__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__reorder_chat_room__request__free_unpacked
                     (CChatRoomReorderChatRoomRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__reorder_chat_room__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__reorder_chat_room__response__get_packed_size
                     (const CChatRoomReorderChatRoomResponse *message)
{
  assert(message->descriptor == &cchat_room__reorder_chat_room__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__reorder_chat_room__response__pack
                     (const CChatRoomReorderChatRoomResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__reorder_chat_room__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__reorder_chat_room__response__pack_to_buffer
                     (const CChatRoomReorderChatRoomResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__reorder_chat_room__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomReorderChatRoomResponse *
       cchat_room__reorder_chat_room__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomReorderChatRoomResponse *)
     protobuf_c_message_unpack (&cchat_room__reorder_chat_room__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__reorder_chat_room__response__free_unpacked
                     (CChatRoomReorderChatRoomResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__reorder_chat_room__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__send_chat_message__request__get_packed_size
                     (const CChatRoomSendChatMessageRequest *message)
{
  assert(message->descriptor == &cchat_room__send_chat_message__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__send_chat_message__request__pack
                     (const CChatRoomSendChatMessageRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__send_chat_message__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__send_chat_message__request__pack_to_buffer
                     (const CChatRoomSendChatMessageRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__send_chat_message__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSendChatMessageRequest *
       cchat_room__send_chat_message__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSendChatMessageRequest *)
     protobuf_c_message_unpack (&cchat_room__send_chat_message__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__send_chat_message__request__free_unpacked
                     (CChatRoomSendChatMessageRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__send_chat_message__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__send_chat_message__response__get_packed_size
                     (const CChatRoomSendChatMessageResponse *message)
{
  assert(message->descriptor == &cchat_room__send_chat_message__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__send_chat_message__response__pack
                     (const CChatRoomSendChatMessageResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__send_chat_message__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__send_chat_message__response__pack_to_buffer
                     (const CChatRoomSendChatMessageResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__send_chat_message__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSendChatMessageResponse *
       cchat_room__send_chat_message__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSendChatMessageResponse *)
     protobuf_c_message_unpack (&cchat_room__send_chat_message__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__send_chat_message__response__free_unpacked
                     (CChatRoomSendChatMessageResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__send_chat_message__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__join_voice_chat__request__get_packed_size
                     (const CChatRoomJoinVoiceChatRequest *message)
{
  assert(message->descriptor == &cchat_room__join_voice_chat__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__join_voice_chat__request__pack
                     (const CChatRoomJoinVoiceChatRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__join_voice_chat__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__join_voice_chat__request__pack_to_buffer
                     (const CChatRoomJoinVoiceChatRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__join_voice_chat__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomJoinVoiceChatRequest *
       cchat_room__join_voice_chat__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomJoinVoiceChatRequest *)
     protobuf_c_message_unpack (&cchat_room__join_voice_chat__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__join_voice_chat__request__free_unpacked
                     (CChatRoomJoinVoiceChatRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__join_voice_chat__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__join_voice_chat__response__get_packed_size
                     (const CChatRoomJoinVoiceChatResponse *message)
{
  assert(message->descriptor == &cchat_room__join_voice_chat__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__join_voice_chat__response__pack
                     (const CChatRoomJoinVoiceChatResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__join_voice_chat__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__join_voice_chat__response__pack_to_buffer
                     (const CChatRoomJoinVoiceChatResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__join_voice_chat__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomJoinVoiceChatResponse *
       cchat_room__join_voice_chat__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomJoinVoiceChatResponse *)
     protobuf_c_message_unpack (&cchat_room__join_voice_chat__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__join_voice_chat__response__free_unpacked
                     (CChatRoomJoinVoiceChatResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__join_voice_chat__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__leave_voice_chat__request__get_packed_size
                     (const CChatRoomLeaveVoiceChatRequest *message)
{
  assert(message->descriptor == &cchat_room__leave_voice_chat__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__leave_voice_chat__request__pack
                     (const CChatRoomLeaveVoiceChatRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__leave_voice_chat__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__leave_voice_chat__request__pack_to_buffer
                     (const CChatRoomLeaveVoiceChatRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__leave_voice_chat__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomLeaveVoiceChatRequest *
       cchat_room__leave_voice_chat__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomLeaveVoiceChatRequest *)
     protobuf_c_message_unpack (&cchat_room__leave_voice_chat__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__leave_voice_chat__request__free_unpacked
                     (CChatRoomLeaveVoiceChatRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__leave_voice_chat__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__leave_voice_chat__response__get_packed_size
                     (const CChatRoomLeaveVoiceChatResponse *message)
{
  assert(message->descriptor == &cchat_room__leave_voice_chat__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__leave_voice_chat__response__pack
                     (const CChatRoomLeaveVoiceChatResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__leave_voice_chat__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__leave_voice_chat__response__pack_to_buffer
                     (const CChatRoomLeaveVoiceChatResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__leave_voice_chat__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomLeaveVoiceChatResponse *
       cchat_room__leave_voice_chat__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomLeaveVoiceChatResponse *)
     protobuf_c_message_unpack (&cchat_room__leave_voice_chat__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__leave_voice_chat__response__free_unpacked
                     (CChatRoomLeaveVoiceChatResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__leave_voice_chat__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_message_history__request__get_packed_size
                     (const CChatRoomGetMessageHistoryRequest *message)
{
  assert(message->descriptor == &cchat_room__get_message_history__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_message_history__request__pack
                     (const CChatRoomGetMessageHistoryRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_message_history__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_message_history__request__pack_to_buffer
                     (const CChatRoomGetMessageHistoryRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_message_history__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetMessageHistoryRequest *
       cchat_room__get_message_history__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetMessageHistoryRequest *)
     protobuf_c_message_unpack (&cchat_room__get_message_history__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_message_history__request__free_unpacked
                     (CChatRoomGetMessageHistoryRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_message_history__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t server_message__get_packed_size
                     (const ServerMessage *message)
{
  assert(message->descriptor == &server_message__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t server_message__pack
                     (const ServerMessage *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &server_message__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t server_message__pack_to_buffer
                     (const ServerMessage *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &server_message__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ServerMessage *
       server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ServerMessage *)
     protobuf_c_message_unpack (&server_message__descriptor,
                                allocator, len, data);
}
void   server_message__free_unpacked
                     (ServerMessage *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &server_message__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_message_history__response__get_packed_size
                     (const CChatRoomGetMessageHistoryResponse *message)
{
  assert(message->descriptor == &cchat_room__get_message_history__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_message_history__response__pack
                     (const CChatRoomGetMessageHistoryResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_message_history__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_message_history__response__pack_to_buffer
                     (const CChatRoomGetMessageHistoryResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_message_history__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetMessageHistoryResponse *
       cchat_room__get_message_history__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetMessageHistoryResponse *)
     protobuf_c_message_unpack (&cchat_room__get_message_history__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_message_history__response__free_unpacked
                     (CChatRoomGetMessageHistoryResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_message_history__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_my_chat_room_groups__request__get_packed_size
                     (const CChatRoomGetMyChatRoomGroupsRequest *message)
{
  assert(message->descriptor == &cchat_room__get_my_chat_room_groups__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_my_chat_room_groups__request__pack
                     (const CChatRoomGetMyChatRoomGroupsRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_my_chat_room_groups__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_my_chat_room_groups__request__pack_to_buffer
                     (const CChatRoomGetMyChatRoomGroupsRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_my_chat_room_groups__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetMyChatRoomGroupsRequest *
       cchat_room__get_my_chat_room_groups__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetMyChatRoomGroupsRequest *)
     protobuf_c_message_unpack (&cchat_room__get_my_chat_room_groups__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_my_chat_room_groups__request__free_unpacked
                     (CChatRoomGetMyChatRoomGroupsRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_my_chat_room_groups__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_chat_room_group_summary__response__get_packed_size
                     (const CChatRoomGetChatRoomGroupSummaryResponse *message)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_summary__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_chat_room_group_summary__response__pack
                     (const CChatRoomGetChatRoomGroupSummaryResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_summary__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_chat_room_group_summary__response__pack_to_buffer
                     (const CChatRoomGetChatRoomGroupSummaryResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_summary__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetChatRoomGroupSummaryResponse *
       cchat_room__get_chat_room_group_summary__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetChatRoomGroupSummaryResponse *)
     protobuf_c_message_unpack (&cchat_room__get_chat_room_group_summary__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_chat_room_group_summary__response__free_unpacked
                     (CChatRoomGetChatRoomGroupSummaryResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_chat_room_group_summary__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_summary_pair__get_packed_size
                     (const CChatRoomSummaryPair *message)
{
  assert(message->descriptor == &cchat_room_summary_pair__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_summary_pair__pack
                     (const CChatRoomSummaryPair *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_summary_pair__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_summary_pair__pack_to_buffer
                     (const CChatRoomSummaryPair *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_summary_pair__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSummaryPair *
       cchat_room_summary_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSummaryPair *)
     protobuf_c_message_unpack (&cchat_room_summary_pair__descriptor,
                                allocator, len, data);
}
void   cchat_room_summary_pair__free_unpacked
                     (CChatRoomSummaryPair *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_summary_pair__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_my_chat_room_groups__response__get_packed_size
                     (const CChatRoomGetMyChatRoomGroupsResponse *message)
{
  assert(message->descriptor == &cchat_room__get_my_chat_room_groups__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_my_chat_room_groups__response__pack
                     (const CChatRoomGetMyChatRoomGroupsResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_my_chat_room_groups__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_my_chat_room_groups__response__pack_to_buffer
                     (const CChatRoomGetMyChatRoomGroupsResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_my_chat_room_groups__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetMyChatRoomGroupsResponse *
       cchat_room__get_my_chat_room_groups__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetMyChatRoomGroupsResponse *)
     protobuf_c_message_unpack (&cchat_room__get_my_chat_room_groups__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_my_chat_room_groups__response__free_unpacked
                     (CChatRoomGetMyChatRoomGroupsResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_my_chat_room_groups__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_chat_room_group_state__request__get_packed_size
                     (const CChatRoomGetChatRoomGroupStateRequest *message)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_state__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_chat_room_group_state__request__pack
                     (const CChatRoomGetChatRoomGroupStateRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_state__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_chat_room_group_state__request__pack_to_buffer
                     (const CChatRoomGetChatRoomGroupStateRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_state__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetChatRoomGroupStateRequest *
       cchat_room__get_chat_room_group_state__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetChatRoomGroupStateRequest *)
     protobuf_c_message_unpack (&cchat_room__get_chat_room_group_state__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_chat_room_group_state__request__free_unpacked
                     (CChatRoomGetChatRoomGroupStateRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_chat_room_group_state__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_chat_room_group_state__response__get_packed_size
                     (const CChatRoomGetChatRoomGroupStateResponse *message)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_state__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_chat_room_group_state__response__pack
                     (const CChatRoomGetChatRoomGroupStateResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_state__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_chat_room_group_state__response__pack_to_buffer
                     (const CChatRoomGetChatRoomGroupStateResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_state__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetChatRoomGroupStateResponse *
       cchat_room__get_chat_room_group_state__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetChatRoomGroupStateResponse *)
     protobuf_c_message_unpack (&cchat_room__get_chat_room_group_state__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_chat_room_group_state__response__free_unpacked
                     (CChatRoomGetChatRoomGroupStateResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_chat_room_group_state__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_chat_room_group_summary__request__get_packed_size
                     (const CChatRoomGetChatRoomGroupSummaryRequest *message)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_summary__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_chat_room_group_summary__request__pack
                     (const CChatRoomGetChatRoomGroupSummaryRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_summary__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_chat_room_group_summary__request__pack_to_buffer
                     (const CChatRoomGetChatRoomGroupSummaryRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_chat_room_group_summary__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetChatRoomGroupSummaryRequest *
       cchat_room__get_chat_room_group_summary__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetChatRoomGroupSummaryRequest *)
     protobuf_c_message_unpack (&cchat_room__get_chat_room_group_summary__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_chat_room_group_summary__request__free_unpacked
                     (CChatRoomGetChatRoomGroupSummaryRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_chat_room_group_summary__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_app_chat_room_group_force_active__request__get_packed_size
                     (const CChatRoomSetAppChatRoomGroupForceActiveRequest *message)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_force_active__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_app_chat_room_group_force_active__request__pack
                     (const CChatRoomSetAppChatRoomGroupForceActiveRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_force_active__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_app_chat_room_group_force_active__request__pack_to_buffer
                     (const CChatRoomSetAppChatRoomGroupForceActiveRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_force_active__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetAppChatRoomGroupForceActiveRequest *
       cchat_room__set_app_chat_room_group_force_active__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetAppChatRoomGroupForceActiveRequest *)
     protobuf_c_message_unpack (&cchat_room__set_app_chat_room_group_force_active__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_app_chat_room_group_force_active__request__free_unpacked
                     (CChatRoomSetAppChatRoomGroupForceActiveRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_force_active__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_app_chat_room_group_force_active__response__get_packed_size
                     (const CChatRoomSetAppChatRoomGroupForceActiveResponse *message)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_force_active__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_app_chat_room_group_force_active__response__pack
                     (const CChatRoomSetAppChatRoomGroupForceActiveResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_force_active__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_app_chat_room_group_force_active__response__pack_to_buffer
                     (const CChatRoomSetAppChatRoomGroupForceActiveResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_force_active__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetAppChatRoomGroupForceActiveResponse *
       cchat_room__set_app_chat_room_group_force_active__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetAppChatRoomGroupForceActiveResponse *)
     protobuf_c_message_unpack (&cchat_room__set_app_chat_room_group_force_active__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_app_chat_room_group_force_active__response__free_unpacked
                     (CChatRoomSetAppChatRoomGroupForceActiveResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_force_active__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_app_chat_room_group_stop_force_active__notification__get_packed_size
                     (const CChatRoomSetAppChatRoomGroupStopForceActiveNotification *message)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_stop_force_active__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_app_chat_room_group_stop_force_active__notification__pack
                     (const CChatRoomSetAppChatRoomGroupStopForceActiveNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_stop_force_active__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_app_chat_room_group_stop_force_active__notification__pack_to_buffer
                     (const CChatRoomSetAppChatRoomGroupStopForceActiveNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_stop_force_active__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetAppChatRoomGroupStopForceActiveNotification *
       cchat_room__set_app_chat_room_group_stop_force_active__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetAppChatRoomGroupStopForceActiveNotification *)
     protobuf_c_message_unpack (&cchat_room__set_app_chat_room_group_stop_force_active__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_app_chat_room_group_stop_force_active__notification__free_unpacked
                     (CChatRoomSetAppChatRoomGroupStopForceActiveNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_app_chat_room_group_stop_force_active__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__ack_chat_message__notification__get_packed_size
                     (const CChatRoomAckChatMessageNotification *message)
{
  assert(message->descriptor == &cchat_room__ack_chat_message__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__ack_chat_message__notification__pack
                     (const CChatRoomAckChatMessageNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__ack_chat_message__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__ack_chat_message__notification__pack_to_buffer
                     (const CChatRoomAckChatMessageNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__ack_chat_message__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomAckChatMessageNotification *
       cchat_room__ack_chat_message__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomAckChatMessageNotification *)
     protobuf_c_message_unpack (&cchat_room__ack_chat_message__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__ack_chat_message__notification__free_unpacked
                     (CChatRoomAckChatMessageNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__ack_chat_message__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__create_invite_link__request__get_packed_size
                     (const CChatRoomCreateInviteLinkRequest *message)
{
  assert(message->descriptor == &cchat_room__create_invite_link__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__create_invite_link__request__pack
                     (const CChatRoomCreateInviteLinkRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__create_invite_link__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__create_invite_link__request__pack_to_buffer
                     (const CChatRoomCreateInviteLinkRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__create_invite_link__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomCreateInviteLinkRequest *
       cchat_room__create_invite_link__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomCreateInviteLinkRequest *)
     protobuf_c_message_unpack (&cchat_room__create_invite_link__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__create_invite_link__request__free_unpacked
                     (CChatRoomCreateInviteLinkRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__create_invite_link__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__create_invite_link__response__get_packed_size
                     (const CChatRoomCreateInviteLinkResponse *message)
{
  assert(message->descriptor == &cchat_room__create_invite_link__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__create_invite_link__response__pack
                     (const CChatRoomCreateInviteLinkResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__create_invite_link__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__create_invite_link__response__pack_to_buffer
                     (const CChatRoomCreateInviteLinkResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__create_invite_link__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomCreateInviteLinkResponse *
       cchat_room__create_invite_link__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomCreateInviteLinkResponse *)
     protobuf_c_message_unpack (&cchat_room__create_invite_link__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__create_invite_link__response__free_unpacked
                     (CChatRoomCreateInviteLinkResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__create_invite_link__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_invite_link_info__request__get_packed_size
                     (const CChatRoomGetInviteLinkInfoRequest *message)
{
  assert(message->descriptor == &cchat_room__get_invite_link_info__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_invite_link_info__request__pack
                     (const CChatRoomGetInviteLinkInfoRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_invite_link_info__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_invite_link_info__request__pack_to_buffer
                     (const CChatRoomGetInviteLinkInfoRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_invite_link_info__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetInviteLinkInfoRequest *
       cchat_room__get_invite_link_info__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetInviteLinkInfoRequest *)
     protobuf_c_message_unpack (&cchat_room__get_invite_link_info__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_invite_link_info__request__free_unpacked
                     (CChatRoomGetInviteLinkInfoRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_invite_link_info__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_invite_link_info__response__get_packed_size
                     (const CChatRoomGetInviteLinkInfoResponse *message)
{
  assert(message->descriptor == &cchat_room__get_invite_link_info__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_invite_link_info__response__pack
                     (const CChatRoomGetInviteLinkInfoResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_invite_link_info__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_invite_link_info__response__pack_to_buffer
                     (const CChatRoomGetInviteLinkInfoResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_invite_link_info__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetInviteLinkInfoResponse *
       cchat_room__get_invite_link_info__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetInviteLinkInfoResponse *)
     protobuf_c_message_unpack (&cchat_room__get_invite_link_info__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_invite_link_info__response__free_unpacked
                     (CChatRoomGetInviteLinkInfoResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_invite_link_info__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_invite_info__request__get_packed_size
                     (const CChatRoomGetInviteInfoRequest *message)
{
  assert(message->descriptor == &cchat_room__get_invite_info__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_invite_info__request__pack
                     (const CChatRoomGetInviteInfoRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_invite_info__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_invite_info__request__pack_to_buffer
                     (const CChatRoomGetInviteInfoRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_invite_info__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetInviteInfoRequest *
       cchat_room__get_invite_info__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetInviteInfoRequest *)
     protobuf_c_message_unpack (&cchat_room__get_invite_info__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_invite_info__request__free_unpacked
                     (CChatRoomGetInviteInfoRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_invite_info__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_invite_info__response__get_packed_size
                     (const CChatRoomGetInviteInfoResponse *message)
{
  assert(message->descriptor == &cchat_room__get_invite_info__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_invite_info__response__pack
                     (const CChatRoomGetInviteInfoResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_invite_info__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_invite_info__response__pack_to_buffer
                     (const CChatRoomGetInviteInfoResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_invite_info__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetInviteInfoResponse *
       cchat_room__get_invite_info__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetInviteInfoResponse *)
     protobuf_c_message_unpack (&cchat_room__get_invite_info__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_invite_info__response__free_unpacked
                     (CChatRoomGetInviteInfoResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_invite_info__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_invite_links_for_group__request__get_packed_size
                     (const CChatRoomGetInviteLinksForGroupRequest *message)
{
  assert(message->descriptor == &cchat_room__get_invite_links_for_group__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_invite_links_for_group__request__pack
                     (const CChatRoomGetInviteLinksForGroupRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_invite_links_for_group__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_invite_links_for_group__request__pack_to_buffer
                     (const CChatRoomGetInviteLinksForGroupRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_invite_links_for_group__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetInviteLinksForGroupRequest *
       cchat_room__get_invite_links_for_group__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetInviteLinksForGroupRequest *)
     protobuf_c_message_unpack (&cchat_room__get_invite_links_for_group__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_invite_links_for_group__request__free_unpacked
                     (CChatRoomGetInviteLinksForGroupRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_invite_links_for_group__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_invite_links_for_group__response__get_packed_size
                     (const CChatRoomGetInviteLinksForGroupResponse *message)
{
  assert(message->descriptor == &cchat_room__get_invite_links_for_group__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_invite_links_for_group__response__pack
                     (const CChatRoomGetInviteLinksForGroupResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_invite_links_for_group__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_invite_links_for_group__response__pack_to_buffer
                     (const CChatRoomGetInviteLinksForGroupResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_invite_links_for_group__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetInviteLinksForGroupResponse *
       cchat_room__get_invite_links_for_group__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetInviteLinksForGroupResponse *)
     protobuf_c_message_unpack (&cchat_room__get_invite_links_for_group__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_invite_links_for_group__response__free_unpacked
                     (CChatRoomGetInviteLinksForGroupResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_invite_links_for_group__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_ban_list__request__get_packed_size
                     (const CChatRoomGetBanListRequest *message)
{
  assert(message->descriptor == &cchat_room__get_ban_list__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_ban_list__request__pack
                     (const CChatRoomGetBanListRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_ban_list__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_ban_list__request__pack_to_buffer
                     (const CChatRoomGetBanListRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_ban_list__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetBanListRequest *
       cchat_room__get_ban_list__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetBanListRequest *)
     protobuf_c_message_unpack (&cchat_room__get_ban_list__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_ban_list__request__free_unpacked
                     (CChatRoomGetBanListRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_ban_list__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_ban_list__response__get_packed_size
                     (const CChatRoomGetBanListResponse *message)
{
  assert(message->descriptor == &cchat_room__get_ban_list__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_ban_list__response__pack
                     (const CChatRoomGetBanListResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_ban_list__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_ban_list__response__pack_to_buffer
                     (const CChatRoomGetBanListResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_ban_list__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetBanListResponse *
       cchat_room__get_ban_list__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetBanListResponse *)
     protobuf_c_message_unpack (&cchat_room__get_ban_list__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_ban_list__response__free_unpacked
                     (CChatRoomGetBanListResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_ban_list__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_invite_list__request__get_packed_size
                     (const CChatRoomGetInviteListRequest *message)
{
  assert(message->descriptor == &cchat_room__get_invite_list__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_invite_list__request__pack
                     (const CChatRoomGetInviteListRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_invite_list__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_invite_list__request__pack_to_buffer
                     (const CChatRoomGetInviteListRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_invite_list__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetInviteListRequest *
       cchat_room__get_invite_list__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetInviteListRequest *)
     protobuf_c_message_unpack (&cchat_room__get_invite_list__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_invite_list__request__free_unpacked
                     (CChatRoomGetInviteListRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_invite_list__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_group_invite__get_packed_size
                     (const CChatRoomGroupInvite *message)
{
  assert(message->descriptor == &cchat_room_group_invite__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_group_invite__pack
                     (const CChatRoomGroupInvite *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_group_invite__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_group_invite__pack_to_buffer
                     (const CChatRoomGroupInvite *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_group_invite__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGroupInvite *
       cchat_room_group_invite__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGroupInvite *)
     protobuf_c_message_unpack (&cchat_room_group_invite__descriptor,
                                allocator, len, data);
}
void   cchat_room_group_invite__free_unpacked
                     (CChatRoomGroupInvite *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_group_invite__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_invite_list__response__get_packed_size
                     (const CChatRoomGetInviteListResponse *message)
{
  assert(message->descriptor == &cchat_room__get_invite_list__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_invite_list__response__pack
                     (const CChatRoomGetInviteListResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_invite_list__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_invite_list__response__pack_to_buffer
                     (const CChatRoomGetInviteListResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_invite_list__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetInviteListResponse *
       cchat_room__get_invite_list__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetInviteListResponse *)
     protobuf_c_message_unpack (&cchat_room__get_invite_list__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_invite_list__response__free_unpacked
                     (CChatRoomGetInviteListResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_invite_list__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_invite_link__request__get_packed_size
                     (const CChatRoomDeleteInviteLinkRequest *message)
{
  assert(message->descriptor == &cchat_room__delete_invite_link__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_invite_link__request__pack
                     (const CChatRoomDeleteInviteLinkRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_invite_link__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_invite_link__request__pack_to_buffer
                     (const CChatRoomDeleteInviteLinkRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_invite_link__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteInviteLinkRequest *
       cchat_room__delete_invite_link__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteInviteLinkRequest *)
     protobuf_c_message_unpack (&cchat_room__delete_invite_link__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_invite_link__request__free_unpacked
                     (CChatRoomDeleteInviteLinkRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_invite_link__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_invite_link__response__get_packed_size
                     (const CChatRoomDeleteInviteLinkResponse *message)
{
  assert(message->descriptor == &cchat_room__delete_invite_link__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_invite_link__response__pack
                     (const CChatRoomDeleteInviteLinkResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_invite_link__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_invite_link__response__pack_to_buffer
                     (const CChatRoomDeleteInviteLinkResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_invite_link__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteInviteLinkResponse *
       cchat_room__delete_invite_link__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteInviteLinkResponse *)
     protobuf_c_message_unpack (&cchat_room__delete_invite_link__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_invite_link__response__free_unpacked
                     (CChatRoomDeleteInviteLinkResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_invite_link__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_session_active_chat_room_groups__request__get_packed_size
                     (const CChatRoomSetSessionActiveChatRoomGroupsRequest *message)
{
  assert(message->descriptor == &cchat_room__set_session_active_chat_room_groups__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_session_active_chat_room_groups__request__pack
                     (const CChatRoomSetSessionActiveChatRoomGroupsRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_session_active_chat_room_groups__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_session_active_chat_room_groups__request__pack_to_buffer
                     (const CChatRoomSetSessionActiveChatRoomGroupsRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_session_active_chat_room_groups__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetSessionActiveChatRoomGroupsRequest *
       cchat_room__set_session_active_chat_room_groups__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetSessionActiveChatRoomGroupsRequest *)
     protobuf_c_message_unpack (&cchat_room__set_session_active_chat_room_groups__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_session_active_chat_room_groups__request__free_unpacked
                     (CChatRoomSetSessionActiveChatRoomGroupsRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_session_active_chat_room_groups__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_session_active_chat_room_groups__response__get_packed_size
                     (const CChatRoomSetSessionActiveChatRoomGroupsResponse *message)
{
  assert(message->descriptor == &cchat_room__set_session_active_chat_room_groups__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_session_active_chat_room_groups__response__pack
                     (const CChatRoomSetSessionActiveChatRoomGroupsResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_session_active_chat_room_groups__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_session_active_chat_room_groups__response__pack_to_buffer
                     (const CChatRoomSetSessionActiveChatRoomGroupsResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_session_active_chat_room_groups__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetSessionActiveChatRoomGroupsResponse *
       cchat_room__set_session_active_chat_room_groups__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetSessionActiveChatRoomGroupsResponse *)
     protobuf_c_message_unpack (&cchat_room__set_session_active_chat_room_groups__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_session_active_chat_room_groups__response__free_unpacked
                     (CChatRoomSetSessionActiveChatRoomGroupsResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_session_active_chat_room_groups__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_user_chat_group_preferences__request__get_packed_size
                     (const CChatRoomSetUserChatGroupPreferencesRequest *message)
{
  assert(message->descriptor == &cchat_room__set_user_chat_group_preferences__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_user_chat_group_preferences__request__pack
                     (const CChatRoomSetUserChatGroupPreferencesRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_user_chat_group_preferences__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_user_chat_group_preferences__request__pack_to_buffer
                     (const CChatRoomSetUserChatGroupPreferencesRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_user_chat_group_preferences__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetUserChatGroupPreferencesRequest *
       cchat_room__set_user_chat_group_preferences__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetUserChatGroupPreferencesRequest *)
     protobuf_c_message_unpack (&cchat_room__set_user_chat_group_preferences__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_user_chat_group_preferences__request__free_unpacked
                     (CChatRoomSetUserChatGroupPreferencesRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_user_chat_group_preferences__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__set_user_chat_group_preferences__response__get_packed_size
                     (const CChatRoomSetUserChatGroupPreferencesResponse *message)
{
  assert(message->descriptor == &cchat_room__set_user_chat_group_preferences__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__set_user_chat_group_preferences__response__pack
                     (const CChatRoomSetUserChatGroupPreferencesResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__set_user_chat_group_preferences__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__set_user_chat_group_preferences__response__pack_to_buffer
                     (const CChatRoomSetUserChatGroupPreferencesResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__set_user_chat_group_preferences__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSetUserChatGroupPreferencesResponse *
       cchat_room__set_user_chat_group_preferences__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSetUserChatGroupPreferencesResponse *)
     protobuf_c_message_unpack (&cchat_room__set_user_chat_group_preferences__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__set_user_chat_group_preferences__response__free_unpacked
                     (CChatRoomSetUserChatGroupPreferencesResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__set_user_chat_group_preferences__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_chat_messages__request__get_packed_size
                     (const CChatRoomDeleteChatMessagesRequest *message)
{
  assert(message->descriptor == &cchat_room__delete_chat_messages__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_chat_messages__request__pack
                     (const CChatRoomDeleteChatMessagesRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_chat_messages__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_chat_messages__request__pack_to_buffer
                     (const CChatRoomDeleteChatMessagesRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_chat_messages__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteChatMessagesRequest *
       cchat_room__delete_chat_messages__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteChatMessagesRequest *)
     protobuf_c_message_unpack (&cchat_room__delete_chat_messages__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_chat_messages__request__free_unpacked
                     (CChatRoomDeleteChatMessagesRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_chat_messages__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__delete_chat_messages__response__get_packed_size
                     (const CChatRoomDeleteChatMessagesResponse *message)
{
  assert(message->descriptor == &cchat_room__delete_chat_messages__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__delete_chat_messages__response__pack
                     (const CChatRoomDeleteChatMessagesResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__delete_chat_messages__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__delete_chat_messages__response__pack_to_buffer
                     (const CChatRoomDeleteChatMessagesResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__delete_chat_messages__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomDeleteChatMessagesResponse *
       cchat_room__delete_chat_messages__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomDeleteChatMessagesResponse *)
     protobuf_c_message_unpack (&cchat_room__delete_chat_messages__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__delete_chat_messages__response__free_unpacked
                     (CChatRoomDeleteChatMessagesResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__delete_chat_messages__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__update_member_list_view__notification__get_packed_size
                     (const CChatRoomUpdateMemberListViewNotification *message)
{
  assert(message->descriptor == &cchat_room__update_member_list_view__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__update_member_list_view__notification__pack
                     (const CChatRoomUpdateMemberListViewNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__update_member_list_view__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__update_member_list_view__notification__pack_to_buffer
                     (const CChatRoomUpdateMemberListViewNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__update_member_list_view__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomUpdateMemberListViewNotification *
       cchat_room__update_member_list_view__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomUpdateMemberListViewNotification *)
     protobuf_c_message_unpack (&cchat_room__update_member_list_view__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__update_member_list_view__notification__free_unpacked
                     (CChatRoomUpdateMemberListViewNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__update_member_list_view__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__search_members__request__get_packed_size
                     (const CChatRoomSearchMembersRequest *message)
{
  assert(message->descriptor == &cchat_room__search_members__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__search_members__request__pack
                     (const CChatRoomSearchMembersRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__search_members__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__search_members__request__pack_to_buffer
                     (const CChatRoomSearchMembersRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__search_members__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSearchMembersRequest *
       cchat_room__search_members__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSearchMembersRequest *)
     protobuf_c_message_unpack (&cchat_room__search_members__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__search_members__request__free_unpacked
                     (CChatRoomSearchMembersRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__search_members__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__search_members__response__get_packed_size
                     (const CChatRoomSearchMembersResponse *message)
{
  assert(message->descriptor == &cchat_room__search_members__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__search_members__response__pack
                     (const CChatRoomSearchMembersResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__search_members__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__search_members__response__pack_to_buffer
                     (const CChatRoomSearchMembersResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__search_members__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomSearchMembersResponse *
       cchat_room__search_members__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomSearchMembersResponse *)
     protobuf_c_message_unpack (&cchat_room__search_members__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__search_members__response__free_unpacked
                     (CChatRoomSearchMembersResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__search_members__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__update_message_reaction__request__get_packed_size
                     (const CChatRoomUpdateMessageReactionRequest *message)
{
  assert(message->descriptor == &cchat_room__update_message_reaction__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__update_message_reaction__request__pack
                     (const CChatRoomUpdateMessageReactionRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__update_message_reaction__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__update_message_reaction__request__pack_to_buffer
                     (const CChatRoomUpdateMessageReactionRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__update_message_reaction__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomUpdateMessageReactionRequest *
       cchat_room__update_message_reaction__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomUpdateMessageReactionRequest *)
     protobuf_c_message_unpack (&cchat_room__update_message_reaction__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__update_message_reaction__request__free_unpacked
                     (CChatRoomUpdateMessageReactionRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__update_message_reaction__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__update_message_reaction__response__get_packed_size
                     (const CChatRoomUpdateMessageReactionResponse *message)
{
  assert(message->descriptor == &cchat_room__update_message_reaction__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__update_message_reaction__response__pack
                     (const CChatRoomUpdateMessageReactionResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__update_message_reaction__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__update_message_reaction__response__pack_to_buffer
                     (const CChatRoomUpdateMessageReactionResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__update_message_reaction__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomUpdateMessageReactionResponse *
       cchat_room__update_message_reaction__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomUpdateMessageReactionResponse *)
     protobuf_c_message_unpack (&cchat_room__update_message_reaction__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__update_message_reaction__response__free_unpacked
                     (CChatRoomUpdateMessageReactionResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__update_message_reaction__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_message_reaction_reactors__request__get_packed_size
                     (const CChatRoomGetMessageReactionReactorsRequest *message)
{
  assert(message->descriptor == &cchat_room__get_message_reaction_reactors__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_message_reaction_reactors__request__pack
                     (const CChatRoomGetMessageReactionReactorsRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_message_reaction_reactors__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_message_reaction_reactors__request__pack_to_buffer
                     (const CChatRoomGetMessageReactionReactorsRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_message_reaction_reactors__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetMessageReactionReactorsRequest *
       cchat_room__get_message_reaction_reactors__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetMessageReactionReactorsRequest *)
     protobuf_c_message_unpack (&cchat_room__get_message_reaction_reactors__request__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_message_reaction_reactors__request__free_unpacked
                     (CChatRoomGetMessageReactionReactorsRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_message_reaction_reactors__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__get_message_reaction_reactors__response__get_packed_size
                     (const CChatRoomGetMessageReactionReactorsResponse *message)
{
  assert(message->descriptor == &cchat_room__get_message_reaction_reactors__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__get_message_reaction_reactors__response__pack
                     (const CChatRoomGetMessageReactionReactorsResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__get_message_reaction_reactors__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__get_message_reaction_reactors__response__pack_to_buffer
                     (const CChatRoomGetMessageReactionReactorsResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__get_message_reaction_reactors__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomGetMessageReactionReactorsResponse *
       cchat_room__get_message_reaction_reactors__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomGetMessageReactionReactorsResponse *)
     protobuf_c_message_unpack (&cchat_room__get_message_reaction_reactors__response__descriptor,
                                allocator, len, data);
}
void   cchat_room__get_message_reaction_reactors__response__free_unpacked
                     (CChatRoomGetMessageReactionReactorsResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__get_message_reaction_reactors__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cclan_chat_rooms__get_clan_chat_room_info__request__get_packed_size
                     (const CClanChatRoomsGetClanChatRoomInfoRequest *message)
{
  assert(message->descriptor == &cclan_chat_rooms__get_clan_chat_room_info__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cclan_chat_rooms__get_clan_chat_room_info__request__pack
                     (const CClanChatRoomsGetClanChatRoomInfoRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cclan_chat_rooms__get_clan_chat_room_info__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cclan_chat_rooms__get_clan_chat_room_info__request__pack_to_buffer
                     (const CClanChatRoomsGetClanChatRoomInfoRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cclan_chat_rooms__get_clan_chat_room_info__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CClanChatRoomsGetClanChatRoomInfoRequest *
       cclan_chat_rooms__get_clan_chat_room_info__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CClanChatRoomsGetClanChatRoomInfoRequest *)
     protobuf_c_message_unpack (&cclan_chat_rooms__get_clan_chat_room_info__request__descriptor,
                                allocator, len, data);
}
void   cclan_chat_rooms__get_clan_chat_room_info__request__free_unpacked
                     (CClanChatRoomsGetClanChatRoomInfoRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cclan_chat_rooms__get_clan_chat_room_info__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cclan_chat_rooms__get_clan_chat_room_info__response__get_packed_size
                     (const CClanChatRoomsGetClanChatRoomInfoResponse *message)
{
  assert(message->descriptor == &cclan_chat_rooms__get_clan_chat_room_info__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cclan_chat_rooms__get_clan_chat_room_info__response__pack
                     (const CClanChatRoomsGetClanChatRoomInfoResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cclan_chat_rooms__get_clan_chat_room_info__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cclan_chat_rooms__get_clan_chat_room_info__response__pack_to_buffer
                     (const CClanChatRoomsGetClanChatRoomInfoResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cclan_chat_rooms__get_clan_chat_room_info__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CClanChatRoomsGetClanChatRoomInfoResponse *
       cclan_chat_rooms__get_clan_chat_room_info__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CClanChatRoomsGetClanChatRoomInfoResponse *)
     protobuf_c_message_unpack (&cclan_chat_rooms__get_clan_chat_room_info__response__descriptor,
                                allocator, len, data);
}
void   cclan_chat_rooms__get_clan_chat_room_info__response__free_unpacked
                     (CClanChatRoomsGetClanChatRoomInfoResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cclan_chat_rooms__get_clan_chat_room_info__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cclan_chat_rooms__set_clan_chat_room_private__request__get_packed_size
                     (const CClanChatRoomsSetClanChatRoomPrivateRequest *message)
{
  assert(message->descriptor == &cclan_chat_rooms__set_clan_chat_room_private__request__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cclan_chat_rooms__set_clan_chat_room_private__request__pack
                     (const CClanChatRoomsSetClanChatRoomPrivateRequest *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cclan_chat_rooms__set_clan_chat_room_private__request__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cclan_chat_rooms__set_clan_chat_room_private__request__pack_to_buffer
                     (const CClanChatRoomsSetClanChatRoomPrivateRequest *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cclan_chat_rooms__set_clan_chat_room_private__request__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CClanChatRoomsSetClanChatRoomPrivateRequest *
       cclan_chat_rooms__set_clan_chat_room_private__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CClanChatRoomsSetClanChatRoomPrivateRequest *)
     protobuf_c_message_unpack (&cclan_chat_rooms__set_clan_chat_room_private__request__descriptor,
                                allocator, len, data);
}
void   cclan_chat_rooms__set_clan_chat_room_private__request__free_unpacked
                     (CClanChatRoomsSetClanChatRoomPrivateRequest *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cclan_chat_rooms__set_clan_chat_room_private__request__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cclan_chat_rooms__set_clan_chat_room_private__response__get_packed_size
                     (const CClanChatRoomsSetClanChatRoomPrivateResponse *message)
{
  assert(message->descriptor == &cclan_chat_rooms__set_clan_chat_room_private__response__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cclan_chat_rooms__set_clan_chat_room_private__response__pack
                     (const CClanChatRoomsSetClanChatRoomPrivateResponse *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cclan_chat_rooms__set_clan_chat_room_private__response__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cclan_chat_rooms__set_clan_chat_room_private__response__pack_to_buffer
                     (const CClanChatRoomsSetClanChatRoomPrivateResponse *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cclan_chat_rooms__set_clan_chat_room_private__response__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CClanChatRoomsSetClanChatRoomPrivateResponse *
       cclan_chat_rooms__set_clan_chat_room_private__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CClanChatRoomsSetClanChatRoomPrivateResponse *)
     protobuf_c_message_unpack (&cclan_chat_rooms__set_clan_chat_room_private__response__descriptor,
                                allocator, len, data);
}
void   cclan_chat_rooms__set_clan_chat_room_private__response__free_unpacked
                     (CClanChatRoomsSetClanChatRoomPrivateResponse *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cclan_chat_rooms__set_clan_chat_room_private__response__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_mentions__get_packed_size
                     (const CChatMentions *message)
{
  assert(message->descriptor == &cchat_mentions__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_mentions__pack
                     (const CChatMentions *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_mentions__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_mentions__pack_to_buffer
                     (const CChatMentions *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_mentions__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatMentions *
       cchat_mentions__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatMentions *)
     protobuf_c_message_unpack (&cchat_mentions__descriptor,
                                allocator, len, data);
}
void   cchat_mentions__free_unpacked
                     (CChatMentions *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_mentions__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__incoming_chat_message__notification__get_packed_size
                     (const CChatRoomIncomingChatMessageNotification *message)
{
  assert(message->descriptor == &cchat_room__incoming_chat_message__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__incoming_chat_message__notification__pack
                     (const CChatRoomIncomingChatMessageNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__incoming_chat_message__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__incoming_chat_message__notification__pack_to_buffer
                     (const CChatRoomIncomingChatMessageNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__incoming_chat_message__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomIncomingChatMessageNotification *
       cchat_room__incoming_chat_message__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomIncomingChatMessageNotification *)
     protobuf_c_message_unpack (&cchat_room__incoming_chat_message__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__incoming_chat_message__notification__free_unpacked
                     (CChatRoomIncomingChatMessageNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__incoming_chat_message__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__chat_message_modified__notification__get_packed_size
                     (const CChatRoomChatMessageModifiedNotification *message)
{
  assert(message->descriptor == &cchat_room__chat_message_modified__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__chat_message_modified__notification__pack
                     (const CChatRoomChatMessageModifiedNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__chat_message_modified__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__chat_message_modified__notification__pack_to_buffer
                     (const CChatRoomChatMessageModifiedNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__chat_message_modified__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomChatMessageModifiedNotification *
       cchat_room__chat_message_modified__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomChatMessageModifiedNotification *)
     protobuf_c_message_unpack (&cchat_room__chat_message_modified__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__chat_message_modified__notification__free_unpacked
                     (CChatRoomChatMessageModifiedNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__chat_message_modified__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__member_state_change__notification__get_packed_size
                     (const CChatRoomMemberStateChangeNotification *message)
{
  assert(message->descriptor == &cchat_room__member_state_change__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__member_state_change__notification__pack
                     (const CChatRoomMemberStateChangeNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__member_state_change__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__member_state_change__notification__pack_to_buffer
                     (const CChatRoomMemberStateChangeNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__member_state_change__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomMemberStateChangeNotification *
       cchat_room__member_state_change__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomMemberStateChangeNotification *)
     protobuf_c_message_unpack (&cchat_room__member_state_change__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__member_state_change__notification__free_unpacked
                     (CChatRoomMemberStateChangeNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__member_state_change__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__chat_room_header_state__notification__get_packed_size
                     (const CChatRoomChatRoomHeaderStateNotification *message)
{
  assert(message->descriptor == &cchat_room__chat_room_header_state__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__chat_room_header_state__notification__pack
                     (const CChatRoomChatRoomHeaderStateNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__chat_room_header_state__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__chat_room_header_state__notification__pack_to_buffer
                     (const CChatRoomChatRoomHeaderStateNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__chat_room_header_state__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomChatRoomHeaderStateNotification *
       cchat_room__chat_room_header_state__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomChatRoomHeaderStateNotification *)
     protobuf_c_message_unpack (&cchat_room__chat_room_header_state__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__chat_room_header_state__notification__free_unpacked
                     (CChatRoomChatRoomHeaderStateNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__chat_room_header_state__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__chat_room_group_rooms_change__notification__get_packed_size
                     (const CChatRoomChatRoomGroupRoomsChangeNotification *message)
{
  assert(message->descriptor == &cchat_room__chat_room_group_rooms_change__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__chat_room_group_rooms_change__notification__pack
                     (const CChatRoomChatRoomGroupRoomsChangeNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__chat_room_group_rooms_change__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__chat_room_group_rooms_change__notification__pack_to_buffer
                     (const CChatRoomChatRoomGroupRoomsChangeNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__chat_room_group_rooms_change__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomChatRoomGroupRoomsChangeNotification *
       cchat_room__chat_room_group_rooms_change__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomChatRoomGroupRoomsChangeNotification *)
     protobuf_c_message_unpack (&cchat_room__chat_room_group_rooms_change__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__chat_room_group_rooms_change__notification__free_unpacked
                     (CChatRoomChatRoomGroupRoomsChangeNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__chat_room_group_rooms_change__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__get_packed_size
                     (const CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification *message)
{
  assert(message->descriptor == &cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__pack
                     (const CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__pack_to_buffer
                     (const CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification *
       cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification *)
     protobuf_c_message_unpack (&cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__free_unpacked
                     (CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t chat_room_client__notify_chat_group_user_state_changed__notification__get_packed_size
                     (const ChatRoomClientNotifyChatGroupUserStateChangedNotification *message)
{
  assert(message->descriptor == &chat_room_client__notify_chat_group_user_state_changed__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t chat_room_client__notify_chat_group_user_state_changed__notification__pack
                     (const ChatRoomClientNotifyChatGroupUserStateChangedNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &chat_room_client__notify_chat_group_user_state_changed__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t chat_room_client__notify_chat_group_user_state_changed__notification__pack_to_buffer
                     (const ChatRoomClientNotifyChatGroupUserStateChangedNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &chat_room_client__notify_chat_group_user_state_changed__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ChatRoomClientNotifyChatGroupUserStateChangedNotification *
       chat_room_client__notify_chat_group_user_state_changed__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ChatRoomClientNotifyChatGroupUserStateChangedNotification *)
     protobuf_c_message_unpack (&chat_room_client__notify_chat_group_user_state_changed__notification__descriptor,
                                allocator, len, data);
}
void   chat_room_client__notify_chat_group_user_state_changed__notification__free_unpacked
                     (ChatRoomClientNotifyChatGroupUserStateChangedNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &chat_room_client__notify_chat_group_user_state_changed__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t chat_room_client__notify_chat_room_disconnect__notification__get_packed_size
                     (const ChatRoomClientNotifyChatRoomDisconnectNotification *message)
{
  assert(message->descriptor == &chat_room_client__notify_chat_room_disconnect__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t chat_room_client__notify_chat_room_disconnect__notification__pack
                     (const ChatRoomClientNotifyChatRoomDisconnectNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &chat_room_client__notify_chat_room_disconnect__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t chat_room_client__notify_chat_room_disconnect__notification__pack_to_buffer
                     (const ChatRoomClientNotifyChatRoomDisconnectNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &chat_room_client__notify_chat_room_disconnect__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
ChatRoomClientNotifyChatRoomDisconnectNotification *
       chat_room_client__notify_chat_room_disconnect__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (ChatRoomClientNotifyChatRoomDisconnectNotification *)
     protobuf_c_message_unpack (&chat_room_client__notify_chat_room_disconnect__notification__descriptor,
                                allocator, len, data);
}
void   chat_room_client__notify_chat_room_disconnect__notification__free_unpacked
                     (ChatRoomClientNotifyChatRoomDisconnectNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &chat_room_client__notify_chat_room_disconnect__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_member_list_view__get_packed_size
                     (const CChatRoomMemberListView *message)
{
  assert(message->descriptor == &cchat_room_member_list_view__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_member_list_view__pack
                     (const CChatRoomMemberListView *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_member_list_view__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_member_list_view__pack_to_buffer
                     (const CChatRoomMemberListView *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_member_list_view__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomMemberListView *
       cchat_room_member_list_view__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomMemberListView *)
     protobuf_c_message_unpack (&cchat_room_member_list_view__descriptor,
                                allocator, len, data);
}
void   cchat_room_member_list_view__free_unpacked
                     (CChatRoomMemberListView *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_member_list_view__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_member_summary_counts__get_packed_size
                     (const CChatRoomMemberSummaryCounts *message)
{
  assert(message->descriptor == &cchat_room_member_summary_counts__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_member_summary_counts__pack
                     (const CChatRoomMemberSummaryCounts *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_member_summary_counts__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_member_summary_counts__pack_to_buffer
                     (const CChatRoomMemberSummaryCounts *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_member_summary_counts__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomMemberSummaryCounts *
       cchat_room_member_summary_counts__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomMemberSummaryCounts *)
     protobuf_c_message_unpack (&cchat_room_member_summary_counts__descriptor,
                                allocator, len, data);
}
void   cchat_room_member_summary_counts__free_unpacked
                     (CChatRoomMemberSummaryCounts *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_member_summary_counts__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room_client__member_list_view_updated__notification__get_packed_size
                     (const CChatRoomClientMemberListViewUpdatedNotification *message)
{
  assert(message->descriptor == &cchat_room_client__member_list_view_updated__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room_client__member_list_view_updated__notification__pack
                     (const CChatRoomClientMemberListViewUpdatedNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room_client__member_list_view_updated__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room_client__member_list_view_updated__notification__pack_to_buffer
                     (const CChatRoomClientMemberListViewUpdatedNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room_client__member_list_view_updated__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomClientMemberListViewUpdatedNotification *
       cchat_room_client__member_list_view_updated__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomClientMemberListViewUpdatedNotification *)
     protobuf_c_message_unpack (&cchat_room_client__member_list_view_updated__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room_client__member_list_view_updated__notification__free_unpacked
                     (CChatRoomClientMemberListViewUpdatedNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room_client__member_list_view_updated__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_room__message_reaction__notification__get_packed_size
                     (const CChatRoomMessageReactionNotification *message)
{
  assert(message->descriptor == &cchat_room__message_reaction__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_room__message_reaction__notification__pack
                     (const CChatRoomMessageReactionNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_room__message_reaction__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_room__message_reaction__notification__pack_to_buffer
                     (const CChatRoomMessageReactionNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_room__message_reaction__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatRoomMessageReactionNotification *
       cchat_room__message_reaction__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatRoomMessageReactionNotification *)
     protobuf_c_message_unpack (&cchat_room__message_reaction__notification__descriptor,
                                allocator, len, data);
}
void   cchat_room__message_reaction__notification__free_unpacked
                     (CChatRoomMessageReactionNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_room__message_reaction__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_usability__client_usability_metrics__notification__get_packed_size
                     (const CChatUsabilityClientUsabilityMetricsNotification *message)
{
  assert(message->descriptor == &cchat_usability__client_usability_metrics__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_usability__client_usability_metrics__notification__pack
                     (const CChatUsabilityClientUsabilityMetricsNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_usability__client_usability_metrics__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_usability__client_usability_metrics__notification__pack_to_buffer
                     (const CChatUsabilityClientUsabilityMetricsNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_usability__client_usability_metrics__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatUsabilityClientUsabilityMetricsNotification *
       cchat_usability__client_usability_metrics__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatUsabilityClientUsabilityMetricsNotification *)
     protobuf_c_message_unpack (&cchat_usability__client_usability_metrics__notification__descriptor,
                                allocator, len, data);
}
void   cchat_usability__client_usability_metrics__notification__free_unpacked
                     (CChatUsabilityClientUsabilityMetricsNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_usability__client_usability_metrics__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t cchat_usability__request_client_usability_metrics__notification__get_packed_size
                     (const CChatUsabilityRequestClientUsabilityMetricsNotification *message)
{
  assert(message->descriptor == &cchat_usability__request_client_usability_metrics__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t cchat_usability__request_client_usability_metrics__notification__pack
                     (const CChatUsabilityRequestClientUsabilityMetricsNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &cchat_usability__request_client_usability_metrics__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t cchat_usability__request_client_usability_metrics__notification__pack_to_buffer
                     (const CChatUsabilityRequestClientUsabilityMetricsNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &cchat_usability__request_client_usability_metrics__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CChatUsabilityRequestClientUsabilityMetricsNotification *
       cchat_usability__request_client_usability_metrics__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CChatUsabilityRequestClientUsabilityMetricsNotification *)
     protobuf_c_message_unpack (&cchat_usability__request_client_usability_metrics__notification__descriptor,
                                allocator, len, data);
}
void   cchat_usability__request_client_usability_metrics__notification__free_unpacked
                     (CChatUsabilityRequestClientUsabilityMetricsNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &cchat_usability__request_client_usability_metrics__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

#define cchat__request_friend_persona_states__request__field_descriptors NULL
#define cchat__request_friend_persona_states__request__field_indices_by_name NULL
#define cchat__request_friend_persona_states__request__number_ranges NULL
const ProtobufCMessageDescriptor cchat__request_friend_persona_states__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChat_RequestFriendPersonaStates_Request",
  "CChatRequestFriendPersonaStatesRequest",
  "CChatRequestFriendPersonaStatesRequest",
  "",
  sizeof(CChatRequestFriendPersonaStatesRequest),
  0,
  cchat__request_friend_persona_states__request__field_descriptors,
  cchat__request_friend_persona_states__request__field_indices_by_name,
  0,  cchat__request_friend_persona_states__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat__request_friend_persona_states__response__field_descriptors NULL
#define cchat__request_friend_persona_states__response__field_indices_by_name NULL
#define cchat__request_friend_persona_states__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat__request_friend_persona_states__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChat_RequestFriendPersonaStates_Response",
  "CChatRequestFriendPersonaStatesResponse",
  "CChatRequestFriendPersonaStatesResponse",
  "",
  sizeof(CChatRequestFriendPersonaStatesResponse),
  0,
  cchat__request_friend_persona_states__response__field_descriptors,
  cchat__request_friend_persona_states__response__field_indices_by_name,
  0,  cchat__request_friend_persona_states__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__create_chat_room_group__request__field_descriptors[6] =
{
  {
    "steamid_partner",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomCreateChatRoomGroupRequest, has_steamid_partner),
    offsetof(CChatRoomCreateChatRoomGroupRequest, steamid_partner),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_invited",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomCreateChatRoomGroupRequest, has_steamid_invited),
    offsetof(CChatRoomCreateChatRoomGroupRequest, steamid_invited),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomCreateChatRoomGroupRequest, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_invitees",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomCreateChatRoomGroupRequest, n_steamid_invitees),
    offsetof(CChatRoomCreateChatRoomGroupRequest, steamid_invitees),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_accountid",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomCreateChatRoomGroupRequest, has_watching_broadcast_accountid),
    offsetof(CChatRoomCreateChatRoomGroupRequest, watching_broadcast_accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_channel_id",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomCreateChatRoomGroupRequest, has_watching_broadcast_channel_id),
    offsetof(CChatRoomCreateChatRoomGroupRequest, watching_broadcast_channel_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__create_chat_room_group__request__field_indices_by_name[] = {
  2,   /* field[2] = name */
  1,   /* field[1] = steamid_invited */
  3,   /* field[3] = steamid_invitees */
  0,   /* field[0] = steamid_partner */
  4,   /* field[4] = watching_broadcast_accountid */
  5,   /* field[5] = watching_broadcast_channel_id */
};
static const ProtobufCIntRange cchat_room__create_chat_room_group__request__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 6, 4 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor cchat_room__create_chat_room_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_CreateChatRoomGroup_Request",
  "CChatRoomCreateChatRoomGroupRequest",
  "CChatRoomCreateChatRoomGroupRequest",
  "",
  sizeof(CChatRoomCreateChatRoomGroupRequest),
  6,
  cchat_room__create_chat_room_group__request__field_descriptors,
  cchat_room__create_chat_room_group__request__field_indices_by_name,
  2,  cchat_room__create_chat_room_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_role__field_descriptors[3] =
{
  {
    "role_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRole, has_role_id),
    offsetof(CChatRole, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRole, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRole, has_ordinal),
    offsetof(CChatRole, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_role__field_indices_by_name[] = {
  1,   /* field[1] = name */
  2,   /* field[2] = ordinal */
  0,   /* field[0] = role_id */
};
static const ProtobufCIntRange cchat_role__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_role__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRole",
  "CChatRole",
  "CChatRole",
  "",
  sizeof(CChatRole),
  3,
  cchat_role__field_descriptors,
  cchat_role__field_indices_by_name,
  1,  cchat_role__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_role_actions__field_descriptors[12] =
{
  {
    "role_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoleActions, has_role_id),
    offsetof(CChatRoleActions, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_create_rename_delete_channel",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_create_rename_delete_channel),
    offsetof(CChatRoleActions, can_create_rename_delete_channel),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_kick",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_kick),
    offsetof(CChatRoleActions, can_kick),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_ban",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_ban),
    offsetof(CChatRoleActions, can_ban),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_invite",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_invite),
    offsetof(CChatRoleActions, can_invite),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_change_tagline_avatar_name",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_change_tagline_avatar_name),
    offsetof(CChatRoleActions, can_change_tagline_avatar_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_chat",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_chat),
    offsetof(CChatRoleActions, can_chat),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_view_history",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_view_history),
    offsetof(CChatRoleActions, can_view_history),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_change_group_roles",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_change_group_roles),
    offsetof(CChatRoleActions, can_change_group_roles),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_change_user_roles",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_change_user_roles),
    offsetof(CChatRoleActions, can_change_user_roles),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_mention_all",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_mention_all),
    offsetof(CChatRoleActions, can_mention_all),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "can_set_watching_broadcast",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoleActions, has_can_set_watching_broadcast),
    offsetof(CChatRoleActions, can_set_watching_broadcast),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_role_actions__field_indices_by_name[] = {
  3,   /* field[3] = can_ban */
  8,   /* field[8] = can_change_group_roles */
  5,   /* field[5] = can_change_tagline_avatar_name */
  9,   /* field[9] = can_change_user_roles */
  6,   /* field[6] = can_chat */
  1,   /* field[1] = can_create_rename_delete_channel */
  4,   /* field[4] = can_invite */
  2,   /* field[2] = can_kick */
  10,   /* field[10] = can_mention_all */
  11,   /* field[11] = can_set_watching_broadcast */
  7,   /* field[7] = can_view_history */
  0,   /* field[0] = role_id */
};
static const ProtobufCIntRange cchat_role_actions__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 12 }
};
const ProtobufCMessageDescriptor cchat_role_actions__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoleActions",
  "CChatRoleActions",
  "CChatRoleActions",
  "",
  sizeof(CChatRoleActions),
  12,
  cchat_role_actions__field_descriptors,
  cchat_role_actions__field_indices_by_name,
  1,  cchat_role_actions__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_party_beacon__field_descriptors[4] =
{
  {
    "app_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatPartyBeacon, has_app_id),
    offsetof(CChatPartyBeacon, app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_owner",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatPartyBeacon, has_steamid_owner),
    offsetof(CChatPartyBeacon, steamid_owner),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "beacon_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatPartyBeacon, has_beacon_id),
    offsetof(CChatPartyBeacon, beacon_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_metadata",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatPartyBeacon, game_metadata),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_party_beacon__field_indices_by_name[] = {
  0,   /* field[0] = app_id */
  2,   /* field[2] = beacon_id */
  3,   /* field[3] = game_metadata */
  1,   /* field[1] = steamid_owner */
};
static const ProtobufCIntRange cchat_party_beacon__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_party_beacon__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatPartyBeacon",
  "CChatPartyBeacon",
  "CChatPartyBeacon",
  "",
  sizeof(CChatPartyBeacon),
  4,
  cchat_party_beacon__field_descriptors,
  cchat_party_beacon__field_indices_by_name,
  1,  cchat_party_beacon__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_group_header_state__field_descriptors[16] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGroupHeaderState, has_chat_group_id),
    offsetof(CChatRoomGroupHeaderState, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGroupHeaderState, chat_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "clanid",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGroupHeaderState, has_clanid),
    offsetof(CChatRoomGroupHeaderState, clanid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accountid_owner",
    14,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGroupHeaderState, has_accountid_owner),
    offsetof(CChatRoomGroupHeaderState, accountid_owner),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "tagline",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGroupHeaderState, tagline),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "avatar_sha",
    16,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CChatRoomGroupHeaderState, has_avatar_sha),
    offsetof(CChatRoomGroupHeaderState, avatar_sha),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "default_role_id",
    17,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGroupHeaderState, has_default_role_id),
    offsetof(CChatRoomGroupHeaderState, default_role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "roles",
    18,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGroupHeaderState, n_roles),
    offsetof(CChatRoomGroupHeaderState, roles),
    &cchat_role__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_actions",
    19,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGroupHeaderState, n_role_actions),
    offsetof(CChatRoomGroupHeaderState, role_actions),
    &cchat_role_actions__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_accountid",
    20,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGroupHeaderState, has_watching_broadcast_accountid),
    offsetof(CChatRoomGroupHeaderState, watching_broadcast_accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid",
    21,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGroupHeaderState, has_appid),
    offsetof(CChatRoomGroupHeaderState, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "party_beacons",
    22,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGroupHeaderState, n_party_beacons),
    offsetof(CChatRoomGroupHeaderState, party_beacons),
    &cchat_party_beacon__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_channel_id",
    23,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGroupHeaderState, has_watching_broadcast_channel_id),
    offsetof(CChatRoomGroupHeaderState, watching_broadcast_channel_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "active_minigame_id",
    24,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGroupHeaderState, has_active_minigame_id),
    offsetof(CChatRoomGroupHeaderState, active_minigame_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "avatar_ugc_url",
    25,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGroupHeaderState, avatar_ugc_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "disabled",
    26,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomGroupHeaderState, has_disabled),
    offsetof(CChatRoomGroupHeaderState, disabled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_group_header_state__field_indices_by_name[] = {
  3,   /* field[3] = accountid_owner */
  13,   /* field[13] = active_minigame_id */
  10,   /* field[10] = appid */
  5,   /* field[5] = avatar_sha */
  14,   /* field[14] = avatar_ugc_url */
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_name */
  2,   /* field[2] = clanid */
  6,   /* field[6] = default_role_id */
  15,   /* field[15] = disabled */
  11,   /* field[11] = party_beacons */
  8,   /* field[8] = role_actions */
  7,   /* field[7] = roles */
  4,   /* field[4] = tagline */
  9,   /* field[9] = watching_broadcast_accountid */
  12,   /* field[12] = watching_broadcast_channel_id */
};
static const ProtobufCIntRange cchat_room_group_header_state__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 13, 2 },
  { 0, 16 }
};
const ProtobufCMessageDescriptor cchat_room_group_header_state__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomGroupHeaderState",
  "CChatRoomGroupHeaderState",
  "CChatRoomGroupHeaderState",
  "",
  sizeof(CChatRoomGroupHeaderState),
  16,
  cchat_room_group_header_state__field_descriptors,
  cchat_room_group_header_state__field_indices_by_name,
  2,  cchat_room_group_header_state__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomJoinState cchat_room_member__state__default_value = ECHAT_ROOM_JOIN_STATE__k_EChatRoomJoinState_Default;
static const EChatRoomGroupRank cchat_room_member__rank__default_value = ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Default;
static const ProtobufCFieldDescriptor cchat_room_member__field_descriptors[5] =
{
  {
    "accountid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomMember, has_accountid),
    offsetof(CChatRoomMember, accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "state",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomMember, has_state),
    offsetof(CChatRoomMember, state),
    &echat_room_join_state__descriptor,
    &cchat_room_member__state__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "rank",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomMember, has_rank),
    offsetof(CChatRoomMember, rank),
    &echat_room_group_rank__descriptor,
    &cchat_room_member__rank__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_kick_expire",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomMember, has_time_kick_expire),
    offsetof(CChatRoomMember, time_kick_expire),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_ids",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomMember, n_role_ids),
    offsetof(CChatRoomMember, role_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_member__field_indices_by_name[] = {
  0,   /* field[0] = accountid */
  2,   /* field[2] = rank */
  4,   /* field[4] = role_ids */
  1,   /* field[1] = state */
  3,   /* field[3] = time_kick_expire */
};
static const ProtobufCIntRange cchat_room_member__number_ranges[3 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 6, 3 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cchat_room_member__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomMember",
  "CChatRoomMember",
  "CChatRoomMember",
  "",
  sizeof(CChatRoomMember),
  5,
  cchat_room_member__field_descriptors,
  cchat_room_member__field_indices_by_name,
  3,  cchat_room_member__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_state__field_descriptors[8] =
{
  {
    "chat_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomState, has_chat_id),
    offsetof(CChatRoomState, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomState, chat_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "voice_allowed",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomState, has_voice_allowed),
    offsetof(CChatRoomState, voice_allowed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "members_in_voice",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomState, n_members_in_voice),
    offsetof(CChatRoomState, members_in_voice),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_last_message",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomState, has_time_last_message),
    offsetof(CChatRoomState, time_last_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sort_order",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomState, has_sort_order),
    offsetof(CChatRoomState, sort_order),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_message",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomState, last_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accountid_last_message",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomState, has_accountid_last_message),
    offsetof(CChatRoomState, accountid_last_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_state__field_indices_by_name[] = {
  7,   /* field[7] = accountid_last_message */
  0,   /* field[0] = chat_id */
  1,   /* field[1] = chat_name */
  6,   /* field[6] = last_message */
  3,   /* field[3] = members_in_voice */
  5,   /* field[5] = sort_order */
  4,   /* field[4] = time_last_message */
  2,   /* field[2] = voice_allowed */
};
static const ProtobufCIntRange cchat_room_state__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cchat_room_state__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomState",
  "CChatRoomState",
  "CChatRoomState",
  "",
  sizeof(CChatRoomState),
  8,
  cchat_room_state__field_descriptors,
  cchat_room_state__field_indices_by_name,
  1,  cchat_room_state__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_group_state__field_descriptors[5] =
{
  {
    "header_state",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGroupState, header_state),
    &cchat_room_group_header_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "members",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGroupState, n_members),
    offsetof(CChatRoomGroupState, members),
    &cchat_room_member__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "default_chat_id",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGroupState, has_default_chat_id),
    offsetof(CChatRoomGroupState, default_chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_rooms",
    5,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGroupState, n_chat_rooms),
    offsetof(CChatRoomGroupState, chat_rooms),
    &cchat_room_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "kicked",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGroupState, n_kicked),
    offsetof(CChatRoomGroupState, kicked),
    &cchat_room_member__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_group_state__field_indices_by_name[] = {
  3,   /* field[3] = chat_rooms */
  2,   /* field[2] = default_chat_id */
  0,   /* field[0] = header_state */
  4,   /* field[4] = kicked */
  1,   /* field[1] = members */
};
static const ProtobufCIntRange cchat_room_group_state__number_ranges[3 + 1] =
{
  { 1, 0 },
  { 4, 2 },
  { 7, 4 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cchat_room_group_state__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomGroupState",
  "CChatRoomGroupState",
  "CChatRoomGroupState",
  "",
  sizeof(CChatRoomGroupState),
  5,
  cchat_room_group_state__field_descriptors,
  cchat_room_group_state__field_indices_by_name,
  3,  cchat_room_group_state__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomNotificationLevel cuser_chat_room_state__desktop_notification_level__default_value = ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid;
static const EChatRoomNotificationLevel cuser_chat_room_state__mobile_notification_level__default_value = ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid;
static const protobuf_c_boolean cuser_chat_room_state__unread_indicator_muted__default_value = 0;
static const ProtobufCFieldDescriptor cuser_chat_room_state__field_descriptors[8] =
{
  {
    "chat_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CUserChatRoomState, has_chat_id),
    offsetof(CUserChatRoomState, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_joined",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CUserChatRoomState, has_time_joined),
    offsetof(CUserChatRoomState, time_joined),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_last_ack",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CUserChatRoomState, has_time_last_ack),
    offsetof(CUserChatRoomState, time_last_ack),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "desktop_notification_level",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CUserChatRoomState, has_desktop_notification_level),
    offsetof(CUserChatRoomState, desktop_notification_level),
    &echat_room_notification_level__descriptor,
    &cuser_chat_room_state__desktop_notification_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "mobile_notification_level",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CUserChatRoomState, has_mobile_notification_level),
    offsetof(CUserChatRoomState, mobile_notification_level),
    &echat_room_notification_level__descriptor,
    &cuser_chat_room_state__mobile_notification_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_last_mention",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CUserChatRoomState, has_time_last_mention),
    offsetof(CUserChatRoomState, time_last_mention),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "unread_indicator_muted",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CUserChatRoomState, has_unread_indicator_muted),
    offsetof(CUserChatRoomState, unread_indicator_muted),
    NULL,
    &cuser_chat_room_state__unread_indicator_muted__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_first_unread",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CUserChatRoomState, has_time_first_unread),
    offsetof(CUserChatRoomState, time_first_unread),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cuser_chat_room_state__field_indices_by_name[] = {
  0,   /* field[0] = chat_id */
  3,   /* field[3] = desktop_notification_level */
  4,   /* field[4] = mobile_notification_level */
  7,   /* field[7] = time_first_unread */
  1,   /* field[1] = time_joined */
  2,   /* field[2] = time_last_ack */
  5,   /* field[5] = time_last_mention */
  6,   /* field[6] = unread_indicator_muted */
};
static const ProtobufCIntRange cuser_chat_room_state__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cuser_chat_room_state__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CUserChatRoomState",
  "CUserChatRoomState",
  "CUserChatRoomState",
  "",
  sizeof(CUserChatRoomState),
  8,
  cuser_chat_room_state__field_descriptors,
  cuser_chat_room_state__field_indices_by_name,
  1,  cuser_chat_room_state__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomNotificationLevel cuser_chat_room_group_state__desktop_notification_level__default_value = ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid;
static const EChatRoomNotificationLevel cuser_chat_room_group_state__mobile_notification_level__default_value = ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid;
static const protobuf_c_boolean cuser_chat_room_group_state__unread_indicator_muted__default_value = 0;
static const ProtobufCFieldDescriptor cuser_chat_room_group_state__field_descriptors[7] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CUserChatRoomGroupState, has_chat_group_id),
    offsetof(CUserChatRoomGroupState, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_joined",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CUserChatRoomGroupState, has_time_joined),
    offsetof(CUserChatRoomGroupState, time_joined),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "user_chat_room_state",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CUserChatRoomGroupState, n_user_chat_room_state),
    offsetof(CUserChatRoomGroupState, user_chat_room_state),
    &cuser_chat_room_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "desktop_notification_level",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CUserChatRoomGroupState, has_desktop_notification_level),
    offsetof(CUserChatRoomGroupState, desktop_notification_level),
    &echat_room_notification_level__descriptor,
    &cuser_chat_room_group_state__desktop_notification_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "mobile_notification_level",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CUserChatRoomGroupState, has_mobile_notification_level),
    offsetof(CUserChatRoomGroupState, mobile_notification_level),
    &echat_room_notification_level__descriptor,
    &cuser_chat_room_group_state__mobile_notification_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_last_group_ack",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CUserChatRoomGroupState, has_time_last_group_ack),
    offsetof(CUserChatRoomGroupState, time_last_group_ack),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "unread_indicator_muted",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CUserChatRoomGroupState, has_unread_indicator_muted),
    offsetof(CUserChatRoomGroupState, unread_indicator_muted),
    NULL,
    &cuser_chat_room_group_state__unread_indicator_muted__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cuser_chat_room_group_state__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  3,   /* field[3] = desktop_notification_level */
  4,   /* field[4] = mobile_notification_level */
  1,   /* field[1] = time_joined */
  5,   /* field[5] = time_last_group_ack */
  6,   /* field[6] = unread_indicator_muted */
  2,   /* field[2] = user_chat_room_state */
};
static const ProtobufCIntRange cuser_chat_room_group_state__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cuser_chat_room_group_state__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CUserChatRoomGroupState",
  "CUserChatRoomGroupState",
  "CUserChatRoomGroupState",
  "",
  sizeof(CUserChatRoomGroupState),
  7,
  cuser_chat_room_group_state__field_descriptors,
  cuser_chat_room_group_state__field_indices_by_name,
  1,  cuser_chat_room_group_state__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__create_chat_room_group__response__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomCreateChatRoomGroupResponse, has_chat_group_id),
    offsetof(CChatRoomCreateChatRoomGroupResponse, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "state",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomCreateChatRoomGroupResponse, state),
    &cchat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "user_chat_state",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomCreateChatRoomGroupResponse, user_chat_state),
    &cuser_chat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__create_chat_room_group__response__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = state */
  2,   /* field[2] = user_chat_state */
};
static const ProtobufCIntRange cchat_room__create_chat_room_group__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__create_chat_room_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_CreateChatRoomGroup_Response",
  "CChatRoomCreateChatRoomGroupResponse",
  "CChatRoomCreateChatRoomGroupResponse",
  "",
  sizeof(CChatRoomCreateChatRoomGroupResponse),
  3,
  cchat_room__create_chat_room_group__response__field_descriptors,
  cchat_room__create_chat_room_group__response__field_indices_by_name,
  1,  cchat_room__create_chat_room_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__save_chat_room_group__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSaveChatRoomGroupRequest, has_chat_group_id),
    offsetof(CChatRoomSaveChatRoomGroupRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSaveChatRoomGroupRequest, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__save_chat_room_group__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = name */
};
static const ProtobufCIntRange cchat_room__save_chat_room_group__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__save_chat_room_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SaveChatRoomGroup_Request",
  "CChatRoomSaveChatRoomGroupRequest",
  "CChatRoomSaveChatRoomGroupRequest",
  "",
  sizeof(CChatRoomSaveChatRoomGroupRequest),
  2,
  cchat_room__save_chat_room_group__request__field_descriptors,
  cchat_room__save_chat_room_group__request__field_indices_by_name,
  1,  cchat_room__save_chat_room_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__save_chat_room_group__response__field_descriptors NULL
#define cchat_room__save_chat_room_group__response__field_indices_by_name NULL
#define cchat_room__save_chat_room_group__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__save_chat_room_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SaveChatRoomGroup_Response",
  "CChatRoomSaveChatRoomGroupResponse",
  "CChatRoomSaveChatRoomGroupResponse",
  "",
  sizeof(CChatRoomSaveChatRoomGroupResponse),
  0,
  cchat_room__save_chat_room_group__response__field_descriptors,
  cchat_room__save_chat_room_group__response__field_indices_by_name,
  0,  cchat_room__save_chat_room_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__rename_chat_room_group__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomRenameChatRoomGroupRequest, has_chat_group_id),
    offsetof(CChatRoomRenameChatRoomGroupRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomRenameChatRoomGroupRequest, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__rename_chat_room_group__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = name */
};
static const ProtobufCIntRange cchat_room__rename_chat_room_group__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__rename_chat_room_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_RenameChatRoomGroup_Request",
  "CChatRoomRenameChatRoomGroupRequest",
  "CChatRoomRenameChatRoomGroupRequest",
  "",
  sizeof(CChatRoomRenameChatRoomGroupRequest),
  2,
  cchat_room__rename_chat_room_group__request__field_descriptors,
  cchat_room__rename_chat_room_group__request__field_indices_by_name,
  1,  cchat_room__rename_chat_room_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__rename_chat_room_group__response__field_descriptors[1] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomRenameChatRoomGroupResponse, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__rename_chat_room_group__response__field_indices_by_name[] = {
  0,   /* field[0] = name */
};
static const ProtobufCIntRange cchat_room__rename_chat_room_group__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__rename_chat_room_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_RenameChatRoomGroup_Response",
  "CChatRoomRenameChatRoomGroupResponse",
  "CChatRoomRenameChatRoomGroupResponse",
  "",
  sizeof(CChatRoomRenameChatRoomGroupResponse),
  1,
  cchat_room__rename_chat_room_group__response__field_descriptors,
  cchat_room__rename_chat_room_group__response__field_indices_by_name,
  1,  cchat_room__rename_chat_room_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_chat_room_group_tagline__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetChatRoomGroupTaglineRequest, has_chat_group_id),
    offsetof(CChatRoomSetChatRoomGroupTaglineRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "tagline",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSetChatRoomGroupTaglineRequest, tagline),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_chat_room_group_tagline__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = tagline */
};
static const ProtobufCIntRange cchat_room__set_chat_room_group_tagline__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__set_chat_room_group_tagline__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetChatRoomGroupTagline_Request",
  "CChatRoomSetChatRoomGroupTaglineRequest",
  "CChatRoomSetChatRoomGroupTaglineRequest",
  "",
  sizeof(CChatRoomSetChatRoomGroupTaglineRequest),
  2,
  cchat_room__set_chat_room_group_tagline__request__field_descriptors,
  cchat_room__set_chat_room_group_tagline__request__field_indices_by_name,
  1,  cchat_room__set_chat_room_group_tagline__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__set_chat_room_group_tagline__response__field_descriptors NULL
#define cchat_room__set_chat_room_group_tagline__response__field_indices_by_name NULL
#define cchat_room__set_chat_room_group_tagline__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__set_chat_room_group_tagline__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetChatRoomGroupTagline_Response",
  "CChatRoomSetChatRoomGroupTaglineResponse",
  "CChatRoomSetChatRoomGroupTaglineResponse",
  "",
  sizeof(CChatRoomSetChatRoomGroupTaglineResponse),
  0,
  cchat_room__set_chat_room_group_tagline__response__field_descriptors,
  cchat_room__set_chat_room_group_tagline__response__field_indices_by_name,
  0,  cchat_room__set_chat_room_group_tagline__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_chat_room_group_avatar__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetChatRoomGroupAvatarRequest, has_chat_group_id),
    offsetof(CChatRoomSetChatRoomGroupAvatarRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "avatar_sha",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CChatRoomSetChatRoomGroupAvatarRequest, has_avatar_sha),
    offsetof(CChatRoomSetChatRoomGroupAvatarRequest, avatar_sha),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_chat_room_group_avatar__request__field_indices_by_name[] = {
  1,   /* field[1] = avatar_sha */
  0,   /* field[0] = chat_group_id */
};
static const ProtobufCIntRange cchat_room__set_chat_room_group_avatar__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__set_chat_room_group_avatar__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetChatRoomGroupAvatar_Request",
  "CChatRoomSetChatRoomGroupAvatarRequest",
  "CChatRoomSetChatRoomGroupAvatarRequest",
  "",
  sizeof(CChatRoomSetChatRoomGroupAvatarRequest),
  2,
  cchat_room__set_chat_room_group_avatar__request__field_descriptors,
  cchat_room__set_chat_room_group_avatar__request__field_indices_by_name,
  1,  cchat_room__set_chat_room_group_avatar__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__set_chat_room_group_avatar__response__field_descriptors NULL
#define cchat_room__set_chat_room_group_avatar__response__field_indices_by_name NULL
#define cchat_room__set_chat_room_group_avatar__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__set_chat_room_group_avatar__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetChatRoomGroupAvatar_Response",
  "CChatRoomSetChatRoomGroupAvatarResponse",
  "CChatRoomSetChatRoomGroupAvatarResponse",
  "",
  sizeof(CChatRoomSetChatRoomGroupAvatarResponse),
  0,
  cchat_room__set_chat_room_group_avatar__response__field_descriptors,
  cchat_room__set_chat_room_group_avatar__response__field_indices_by_name,
  0,  cchat_room__set_chat_room_group_avatar__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_chat_room_group_watching_broadcast__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetChatRoomGroupWatchingBroadcastRequest, has_chat_group_id),
    offsetof(CChatRoomSetChatRoomGroupWatchingBroadcastRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_accountid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomSetChatRoomGroupWatchingBroadcastRequest, has_watching_broadcast_accountid),
    offsetof(CChatRoomSetChatRoomGroupWatchingBroadcastRequest, watching_broadcast_accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_channel_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetChatRoomGroupWatchingBroadcastRequest, has_watching_broadcast_channel_id),
    offsetof(CChatRoomSetChatRoomGroupWatchingBroadcastRequest, watching_broadcast_channel_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_chat_room_group_watching_broadcast__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = watching_broadcast_accountid */
  2,   /* field[2] = watching_broadcast_channel_id */
};
static const ProtobufCIntRange cchat_room__set_chat_room_group_watching_broadcast__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__set_chat_room_group_watching_broadcast__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetChatRoomGroupWatchingBroadcast_Request",
  "CChatRoomSetChatRoomGroupWatchingBroadcastRequest",
  "CChatRoomSetChatRoomGroupWatchingBroadcastRequest",
  "",
  sizeof(CChatRoomSetChatRoomGroupWatchingBroadcastRequest),
  3,
  cchat_room__set_chat_room_group_watching_broadcast__request__field_descriptors,
  cchat_room__set_chat_room_group_watching_broadcast__request__field_indices_by_name,
  1,  cchat_room__set_chat_room_group_watching_broadcast__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__set_chat_room_group_watching_broadcast__response__field_descriptors NULL
#define cchat_room__set_chat_room_group_watching_broadcast__response__field_indices_by_name NULL
#define cchat_room__set_chat_room_group_watching_broadcast__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__set_chat_room_group_watching_broadcast__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetChatRoomGroupWatchingBroadcast_Response",
  "CChatRoomSetChatRoomGroupWatchingBroadcastResponse",
  "CChatRoomSetChatRoomGroupWatchingBroadcastResponse",
  "",
  sizeof(CChatRoomSetChatRoomGroupWatchingBroadcastResponse),
  0,
  cchat_room__set_chat_room_group_watching_broadcast__response__field_descriptors,
  cchat_room__set_chat_room_group_watching_broadcast__response__field_indices_by_name,
  0,  cchat_room__set_chat_room_group_watching_broadcast__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__join_mini_game_for_chat_room_group__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinMiniGameForChatRoomGroupRequest, has_chat_group_id),
    offsetof(CChatRoomJoinMiniGameForChatRoomGroupRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinMiniGameForChatRoomGroupRequest, has_chat_id),
    offsetof(CChatRoomJoinMiniGameForChatRoomGroupRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__join_mini_game_for_chat_room_group__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
};
static const ProtobufCIntRange cchat_room__join_mini_game_for_chat_room_group__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__join_mini_game_for_chat_room_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_JoinMiniGameForChatRoomGroup_Request",
  "CChatRoomJoinMiniGameForChatRoomGroupRequest",
  "CChatRoomJoinMiniGameForChatRoomGroupRequest",
  "",
  sizeof(CChatRoomJoinMiniGameForChatRoomGroupRequest),
  2,
  cchat_room__join_mini_game_for_chat_room_group__request__field_descriptors,
  cchat_room__join_mini_game_for_chat_room_group__request__field_indices_by_name,
  1,  cchat_room__join_mini_game_for_chat_room_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__join_mini_game_for_chat_room_group__response__field_descriptors[1] =
{
  {
    "minigame_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinMiniGameForChatRoomGroupResponse, has_minigame_id),
    offsetof(CChatRoomJoinMiniGameForChatRoomGroupResponse, minigame_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__join_mini_game_for_chat_room_group__response__field_indices_by_name[] = {
  0,   /* field[0] = minigame_id */
};
static const ProtobufCIntRange cchat_room__join_mini_game_for_chat_room_group__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__join_mini_game_for_chat_room_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_JoinMiniGameForChatRoomGroup_Response",
  "CChatRoomJoinMiniGameForChatRoomGroupResponse",
  "CChatRoomJoinMiniGameForChatRoomGroupResponse",
  "",
  sizeof(CChatRoomJoinMiniGameForChatRoomGroupResponse),
  1,
  cchat_room__join_mini_game_for_chat_room_group__response__field_descriptors,
  cchat_room__join_mini_game_for_chat_room_group__response__field_indices_by_name,
  1,  cchat_room__join_mini_game_for_chat_room_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__end_mini_game_for_chat_room_group__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomEndMiniGameForChatRoomGroupRequest, has_chat_group_id),
    offsetof(CChatRoomEndMiniGameForChatRoomGroupRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomEndMiniGameForChatRoomGroupRequest, has_chat_id),
    offsetof(CChatRoomEndMiniGameForChatRoomGroupRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "minigame_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomEndMiniGameForChatRoomGroupRequest, has_minigame_id),
    offsetof(CChatRoomEndMiniGameForChatRoomGroupRequest, minigame_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__end_mini_game_for_chat_room_group__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  2,   /* field[2] = minigame_id */
};
static const ProtobufCIntRange cchat_room__end_mini_game_for_chat_room_group__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__end_mini_game_for_chat_room_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_EndMiniGameForChatRoomGroup_Request",
  "CChatRoomEndMiniGameForChatRoomGroupRequest",
  "CChatRoomEndMiniGameForChatRoomGroupRequest",
  "",
  sizeof(CChatRoomEndMiniGameForChatRoomGroupRequest),
  3,
  cchat_room__end_mini_game_for_chat_room_group__request__field_descriptors,
  cchat_room__end_mini_game_for_chat_room_group__request__field_indices_by_name,
  1,  cchat_room__end_mini_game_for_chat_room_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__end_mini_game_for_chat_room_group__response__field_descriptors NULL
#define cchat_room__end_mini_game_for_chat_room_group__response__field_indices_by_name NULL
#define cchat_room__end_mini_game_for_chat_room_group__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__end_mini_game_for_chat_room_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_EndMiniGameForChatRoomGroup_Response",
  "CChatRoomEndMiniGameForChatRoomGroupResponse",
  "CChatRoomEndMiniGameForChatRoomGroupResponse",
  "",
  sizeof(CChatRoomEndMiniGameForChatRoomGroupResponse),
  0,
  cchat_room__end_mini_game_for_chat_room_group__response__field_descriptors,
  cchat_room__end_mini_game_for_chat_room_group__response__field_indices_by_name,
  0,  cchat_room__end_mini_game_for_chat_room_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__mute_user__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomMuteUserRequest, has_chat_group_id),
    offsetof(CChatRoomMuteUserRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomMuteUserRequest, has_steamid),
    offsetof(CChatRoomMuteUserRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "expiration",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMuteUserRequest, has_expiration),
    offsetof(CChatRoomMuteUserRequest, expiration),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__mute_user__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = expiration */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cchat_room__mute_user__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__mute_user__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_MuteUser_Request",
  "CChatRoomMuteUserRequest",
  "CChatRoomMuteUserRequest",
  "",
  sizeof(CChatRoomMuteUserRequest),
  3,
  cchat_room__mute_user__request__field_descriptors,
  cchat_room__mute_user__request__field_indices_by_name,
  1,  cchat_room__mute_user__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__mute_user__response__field_descriptors NULL
#define cchat_room__mute_user__response__field_indices_by_name NULL
#define cchat_room__mute_user__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__mute_user__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_MuteUser_Response",
  "CChatRoomMuteUserResponse",
  "CChatRoomMuteUserResponse",
  "",
  sizeof(CChatRoomMuteUserResponse),
  0,
  cchat_room__mute_user__response__field_descriptors,
  cchat_room__mute_user__response__field_indices_by_name,
  0,  cchat_room__mute_user__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__kick_user__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomKickUserRequest, has_chat_group_id),
    offsetof(CChatRoomKickUserRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomKickUserRequest, has_steamid),
    offsetof(CChatRoomKickUserRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "expiration",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomKickUserRequest, has_expiration),
    offsetof(CChatRoomKickUserRequest, expiration),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__kick_user__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = expiration */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cchat_room__kick_user__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__kick_user__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_KickUser_Request",
  "CChatRoomKickUserRequest",
  "CChatRoomKickUserRequest",
  "",
  sizeof(CChatRoomKickUserRequest),
  3,
  cchat_room__kick_user__request__field_descriptors,
  cchat_room__kick_user__request__field_indices_by_name,
  1,  cchat_room__kick_user__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__kick_user__response__field_descriptors NULL
#define cchat_room__kick_user__response__field_indices_by_name NULL
#define cchat_room__kick_user__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__kick_user__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_KickUser_Response",
  "CChatRoomKickUserResponse",
  "CChatRoomKickUserResponse",
  "",
  sizeof(CChatRoomKickUserResponse),
  0,
  cchat_room__kick_user__response__field_descriptors,
  cchat_room__kick_user__response__field_indices_by_name,
  0,  cchat_room__kick_user__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_user_ban_state__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetUserBanStateRequest, has_chat_group_id),
    offsetof(CChatRoomSetUserBanStateRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomSetUserBanStateRequest, has_steamid),
    offsetof(CChatRoomSetUserBanStateRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ban_state",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomSetUserBanStateRequest, has_ban_state),
    offsetof(CChatRoomSetUserBanStateRequest, ban_state),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_user_ban_state__request__field_indices_by_name[] = {
  2,   /* field[2] = ban_state */
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cchat_room__set_user_ban_state__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__set_user_ban_state__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetUserBanState_Request",
  "CChatRoomSetUserBanStateRequest",
  "CChatRoomSetUserBanStateRequest",
  "",
  sizeof(CChatRoomSetUserBanStateRequest),
  3,
  cchat_room__set_user_ban_state__request__field_descriptors,
  cchat_room__set_user_ban_state__request__field_indices_by_name,
  1,  cchat_room__set_user_ban_state__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__set_user_ban_state__response__field_descriptors NULL
#define cchat_room__set_user_ban_state__response__field_indices_by_name NULL
#define cchat_room__set_user_ban_state__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__set_user_ban_state__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetUserBanState_Response",
  "CChatRoomSetUserBanStateResponse",
  "CChatRoomSetUserBanStateResponse",
  "",
  sizeof(CChatRoomSetUserBanStateResponse),
  0,
  cchat_room__set_user_ban_state__response__field_descriptors,
  cchat_room__set_user_ban_state__response__field_indices_by_name,
  0,  cchat_room__set_user_ban_state__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__revoke_invite__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomRevokeInviteRequest, has_chat_group_id),
    offsetof(CChatRoomRevokeInviteRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomRevokeInviteRequest, has_steamid),
    offsetof(CChatRoomRevokeInviteRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__revoke_invite__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cchat_room__revoke_invite__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__revoke_invite__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_RevokeInvite_Request",
  "CChatRoomRevokeInviteRequest",
  "CChatRoomRevokeInviteRequest",
  "",
  sizeof(CChatRoomRevokeInviteRequest),
  2,
  cchat_room__revoke_invite__request__field_descriptors,
  cchat_room__revoke_invite__request__field_indices_by_name,
  1,  cchat_room__revoke_invite__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__revoke_invite__response__field_descriptors NULL
#define cchat_room__revoke_invite__response__field_indices_by_name NULL
#define cchat_room__revoke_invite__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__revoke_invite__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_RevokeInvite_Response",
  "CChatRoomRevokeInviteResponse",
  "CChatRoomRevokeInviteResponse",
  "",
  sizeof(CChatRoomRevokeInviteResponse),
  0,
  cchat_room__revoke_invite__response__field_descriptors,
  cchat_room__revoke_invite__response__field_indices_by_name,
  0,  cchat_room__revoke_invite__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__create_role__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomCreateRoleRequest, has_chat_group_id),
    offsetof(CChatRoomCreateRoleRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomCreateRoleRequest, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__create_role__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = name */
};
static const ProtobufCIntRange cchat_room__create_role__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__create_role__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_CreateRole_Request",
  "CChatRoomCreateRoleRequest",
  "CChatRoomCreateRoleRequest",
  "",
  sizeof(CChatRoomCreateRoleRequest),
  2,
  cchat_room__create_role__request__field_descriptors,
  cchat_room__create_role__request__field_indices_by_name,
  1,  cchat_room__create_role__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__create_role__response__field_descriptors[1] =
{
  {
    "actions",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomCreateRoleResponse, actions),
    &cchat_role_actions__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__create_role__response__field_indices_by_name[] = {
  0,   /* field[0] = actions */
};
static const ProtobufCIntRange cchat_room__create_role__response__number_ranges[1 + 1] =
{
  { 2, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__create_role__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_CreateRole_Response",
  "CChatRoomCreateRoleResponse",
  "CChatRoomCreateRoleResponse",
  "",
  sizeof(CChatRoomCreateRoleResponse),
  1,
  cchat_room__create_role__response__field_descriptors,
  cchat_room__create_role__response__field_indices_by_name,
  1,  cchat_room__create_role__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_roles__request__field_descriptors[1] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetRolesRequest, has_chat_group_id),
    offsetof(CChatRoomGetRolesRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_roles__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
};
static const ProtobufCIntRange cchat_room__get_roles__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_roles__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetRoles_Request",
  "CChatRoomGetRolesRequest",
  "CChatRoomGetRolesRequest",
  "",
  sizeof(CChatRoomGetRolesRequest),
  1,
  cchat_room__get_roles__request__field_descriptors,
  cchat_room__get_roles__request__field_indices_by_name,
  1,  cchat_room__get_roles__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_roles__response__field_descriptors[1] =
{
  {
    "roles",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetRolesResponse, n_roles),
    offsetof(CChatRoomGetRolesResponse, roles),
    &cchat_role__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_roles__response__field_indices_by_name[] = {
  0,   /* field[0] = roles */
};
static const ProtobufCIntRange cchat_room__get_roles__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_roles__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetRoles_Response",
  "CChatRoomGetRolesResponse",
  "CChatRoomGetRolesResponse",
  "",
  sizeof(CChatRoomGetRolesResponse),
  1,
  cchat_room__get_roles__response__field_descriptors,
  cchat_room__get_roles__response__field_indices_by_name,
  1,  cchat_room__get_roles__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__rename_role__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomRenameRoleRequest, has_chat_group_id),
    offsetof(CChatRoomRenameRoleRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomRenameRoleRequest, has_role_id),
    offsetof(CChatRoomRenameRoleRequest, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomRenameRoleRequest, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__rename_role__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = name */
  1,   /* field[1] = role_id */
};
static const ProtobufCIntRange cchat_room__rename_role__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__rename_role__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_RenameRole_Request",
  "CChatRoomRenameRoleRequest",
  "CChatRoomRenameRoleRequest",
  "",
  sizeof(CChatRoomRenameRoleRequest),
  3,
  cchat_room__rename_role__request__field_descriptors,
  cchat_room__rename_role__request__field_indices_by_name,
  1,  cchat_room__rename_role__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__rename_role__response__field_descriptors NULL
#define cchat_room__rename_role__response__field_indices_by_name NULL
#define cchat_room__rename_role__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__rename_role__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_RenameRole_Response",
  "CChatRoomRenameRoleResponse",
  "CChatRoomRenameRoleResponse",
  "",
  sizeof(CChatRoomRenameRoleResponse),
  0,
  cchat_room__rename_role__response__field_descriptors,
  cchat_room__rename_role__response__field_indices_by_name,
  0,  cchat_room__rename_role__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__reorder_role__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomReorderRoleRequest, has_chat_group_id),
    offsetof(CChatRoomReorderRoleRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomReorderRoleRequest, has_role_id),
    offsetof(CChatRoomReorderRoleRequest, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomReorderRoleRequest, has_ordinal),
    offsetof(CChatRoomReorderRoleRequest, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__reorder_role__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = ordinal */
  1,   /* field[1] = role_id */
};
static const ProtobufCIntRange cchat_room__reorder_role__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__reorder_role__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ReorderRole_Request",
  "CChatRoomReorderRoleRequest",
  "CChatRoomReorderRoleRequest",
  "",
  sizeof(CChatRoomReorderRoleRequest),
  3,
  cchat_room__reorder_role__request__field_descriptors,
  cchat_room__reorder_role__request__field_indices_by_name,
  1,  cchat_room__reorder_role__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__reorder_role__response__field_descriptors NULL
#define cchat_room__reorder_role__response__field_indices_by_name NULL
#define cchat_room__reorder_role__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__reorder_role__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ReorderRole_Response",
  "CChatRoomReorderRoleResponse",
  "CChatRoomReorderRoleResponse",
  "",
  sizeof(CChatRoomReorderRoleResponse),
  0,
  cchat_room__reorder_role__response__field_descriptors,
  cchat_room__reorder_role__response__field_indices_by_name,
  0,  cchat_room__reorder_role__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__delete_role__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteRoleRequest, has_chat_group_id),
    offsetof(CChatRoomDeleteRoleRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteRoleRequest, has_role_id),
    offsetof(CChatRoomDeleteRoleRequest, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__delete_role__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = role_id */
};
static const ProtobufCIntRange cchat_room__delete_role__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__delete_role__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteRole_Request",
  "CChatRoomDeleteRoleRequest",
  "CChatRoomDeleteRoleRequest",
  "",
  sizeof(CChatRoomDeleteRoleRequest),
  2,
  cchat_room__delete_role__request__field_descriptors,
  cchat_room__delete_role__request__field_indices_by_name,
  1,  cchat_room__delete_role__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__delete_role__response__field_descriptors NULL
#define cchat_room__delete_role__response__field_indices_by_name NULL
#define cchat_room__delete_role__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__delete_role__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteRole_Response",
  "CChatRoomDeleteRoleResponse",
  "CChatRoomDeleteRoleResponse",
  "",
  sizeof(CChatRoomDeleteRoleResponse),
  0,
  cchat_room__delete_role__response__field_descriptors,
  cchat_room__delete_role__response__field_indices_by_name,
  0,  cchat_room__delete_role__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_role_actions__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetRoleActionsRequest, has_chat_group_id),
    offsetof(CChatRoomGetRoleActionsRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetRoleActionsRequest, has_role_id),
    offsetof(CChatRoomGetRoleActionsRequest, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_role_actions__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = role_id */
};
static const ProtobufCIntRange cchat_room__get_role_actions__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__get_role_actions__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetRoleActions_Request",
  "CChatRoomGetRoleActionsRequest",
  "CChatRoomGetRoleActionsRequest",
  "",
  sizeof(CChatRoomGetRoleActionsRequest),
  2,
  cchat_room__get_role_actions__request__field_descriptors,
  cchat_room__get_role_actions__request__field_indices_by_name,
  1,  cchat_room__get_role_actions__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_role_actions__response__field_descriptors[1] =
{
  {
    "actions",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetRoleActionsResponse, n_actions),
    offsetof(CChatRoomGetRoleActionsResponse, actions),
    &cchat_role_actions__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_role_actions__response__field_indices_by_name[] = {
  0,   /* field[0] = actions */
};
static const ProtobufCIntRange cchat_room__get_role_actions__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_role_actions__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetRoleActions_Response",
  "CChatRoomGetRoleActionsResponse",
  "CChatRoomGetRoleActionsResponse",
  "",
  sizeof(CChatRoomGetRoleActionsResponse),
  1,
  cchat_room__get_role_actions__response__field_descriptors,
  cchat_room__get_role_actions__response__field_indices_by_name,
  1,  cchat_room__get_role_actions__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__replace_role_actions__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomReplaceRoleActionsRequest, has_chat_group_id),
    offsetof(CChatRoomReplaceRoleActionsRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomReplaceRoleActionsRequest, has_role_id),
    offsetof(CChatRoomReplaceRoleActionsRequest, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "actions",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomReplaceRoleActionsRequest, actions),
    &cchat_role_actions__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__replace_role_actions__request__field_indices_by_name[] = {
  2,   /* field[2] = actions */
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = role_id */
};
static const ProtobufCIntRange cchat_room__replace_role_actions__request__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 4, 2 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__replace_role_actions__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ReplaceRoleActions_Request",
  "CChatRoomReplaceRoleActionsRequest",
  "CChatRoomReplaceRoleActionsRequest",
  "",
  sizeof(CChatRoomReplaceRoleActionsRequest),
  3,
  cchat_room__replace_role_actions__request__field_descriptors,
  cchat_room__replace_role_actions__request__field_indices_by_name,
  2,  cchat_room__replace_role_actions__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__replace_role_actions__response__field_descriptors NULL
#define cchat_room__replace_role_actions__response__field_indices_by_name NULL
#define cchat_room__replace_role_actions__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__replace_role_actions__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ReplaceRoleActions_Response",
  "CChatRoomReplaceRoleActionsResponse",
  "CChatRoomReplaceRoleActionsResponse",
  "",
  sizeof(CChatRoomReplaceRoleActionsResponse),
  0,
  cchat_room__replace_role_actions__response__field_descriptors,
  cchat_room__replace_role_actions__response__field_indices_by_name,
  0,  cchat_room__replace_role_actions__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__add_role_to_user__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomAddRoleToUserRequest, has_chat_group_id),
    offsetof(CChatRoomAddRoleToUserRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomAddRoleToUserRequest, has_role_id),
    offsetof(CChatRoomAddRoleToUserRequest, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomAddRoleToUserRequest, has_steamid),
    offsetof(CChatRoomAddRoleToUserRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__add_role_to_user__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = role_id */
  2,   /* field[2] = steamid */
};
static const ProtobufCIntRange cchat_room__add_role_to_user__request__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__add_role_to_user__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_AddRoleToUser_Request",
  "CChatRoomAddRoleToUserRequest",
  "CChatRoomAddRoleToUserRequest",
  "",
  sizeof(CChatRoomAddRoleToUserRequest),
  3,
  cchat_room__add_role_to_user__request__field_descriptors,
  cchat_room__add_role_to_user__request__field_indices_by_name,
  2,  cchat_room__add_role_to_user__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__add_role_to_user__response__field_descriptors NULL
#define cchat_room__add_role_to_user__response__field_indices_by_name NULL
#define cchat_room__add_role_to_user__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__add_role_to_user__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_AddRoleToUser_Response",
  "CChatRoomAddRoleToUserResponse",
  "CChatRoomAddRoleToUserResponse",
  "",
  sizeof(CChatRoomAddRoleToUserResponse),
  0,
  cchat_room__add_role_to_user__response__field_descriptors,
  cchat_room__add_role_to_user__response__field_indices_by_name,
  0,  cchat_room__add_role_to_user__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_roles_for_user__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetRolesForUserRequest, has_chat_group_id),
    offsetof(CChatRoomGetRolesForUserRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomGetRolesForUserRequest, has_steamid),
    offsetof(CChatRoomGetRolesForUserRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_roles_for_user__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cchat_room__get_roles_for_user__request__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__get_roles_for_user__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetRolesForUser_Request",
  "CChatRoomGetRolesForUserRequest",
  "CChatRoomGetRolesForUserRequest",
  "",
  sizeof(CChatRoomGetRolesForUserRequest),
  2,
  cchat_room__get_roles_for_user__request__field_descriptors,
  cchat_room__get_roles_for_user__request__field_indices_by_name,
  2,  cchat_room__get_roles_for_user__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_roles_for_user__response__field_descriptors[1] =
{
  {
    "role_ids",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetRolesForUserResponse, n_role_ids),
    offsetof(CChatRoomGetRolesForUserResponse, role_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_roles_for_user__response__field_indices_by_name[] = {
  0,   /* field[0] = role_ids */
};
static const ProtobufCIntRange cchat_room__get_roles_for_user__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_roles_for_user__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetRolesForUser_Response",
  "CChatRoomGetRolesForUserResponse",
  "CChatRoomGetRolesForUserResponse",
  "",
  sizeof(CChatRoomGetRolesForUserResponse),
  1,
  cchat_room__get_roles_for_user__response__field_descriptors,
  cchat_room__get_roles_for_user__response__field_indices_by_name,
  1,  cchat_room__get_roles_for_user__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__delete_role_from_user__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteRoleFromUserRequest, has_chat_group_id),
    offsetof(CChatRoomDeleteRoleFromUserRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteRoleFromUserRequest, has_role_id),
    offsetof(CChatRoomDeleteRoleFromUserRequest, role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomDeleteRoleFromUserRequest, has_steamid),
    offsetof(CChatRoomDeleteRoleFromUserRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__delete_role_from_user__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = role_id */
  2,   /* field[2] = steamid */
};
static const ProtobufCIntRange cchat_room__delete_role_from_user__request__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__delete_role_from_user__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteRoleFromUser_Request",
  "CChatRoomDeleteRoleFromUserRequest",
  "CChatRoomDeleteRoleFromUserRequest",
  "",
  sizeof(CChatRoomDeleteRoleFromUserRequest),
  3,
  cchat_room__delete_role_from_user__request__field_descriptors,
  cchat_room__delete_role_from_user__request__field_indices_by_name,
  2,  cchat_room__delete_role_from_user__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__delete_role_from_user__response__field_descriptors NULL
#define cchat_room__delete_role_from_user__response__field_indices_by_name NULL
#define cchat_room__delete_role_from_user__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__delete_role_from_user__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteRoleFromUser_Response",
  "CChatRoomDeleteRoleFromUserResponse",
  "CChatRoomDeleteRoleFromUserResponse",
  "",
  sizeof(CChatRoomDeleteRoleFromUserResponse),
  0,
  cchat_room__delete_role_from_user__response__field_descriptors,
  cchat_room__delete_role_from_user__response__field_indices_by_name,
  0,  cchat_room__delete_role_from_user__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__join_chat_room_group__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinChatRoomGroupRequest, has_chat_group_id),
    offsetof(CChatRoomJoinChatRoomGroupRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "invite_code",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomJoinChatRoomGroupRequest, invite_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinChatRoomGroupRequest, has_chat_id),
    offsetof(CChatRoomJoinChatRoomGroupRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__join_chat_room_group__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = chat_id */
  1,   /* field[1] = invite_code */
};
static const ProtobufCIntRange cchat_room__join_chat_room_group__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__join_chat_room_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_JoinChatRoomGroup_Request",
  "CChatRoomJoinChatRoomGroupRequest",
  "CChatRoomJoinChatRoomGroupRequest",
  "",
  sizeof(CChatRoomJoinChatRoomGroupRequest),
  3,
  cchat_room__join_chat_room_group__request__field_descriptors,
  cchat_room__join_chat_room_group__request__field_indices_by_name,
  1,  cchat_room__join_chat_room_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__join_chat_room_group__response__field_descriptors[4] =
{
  {
    "state",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomJoinChatRoomGroupResponse, state),
    &cchat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "user_chat_state",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomJoinChatRoomGroupResponse, user_chat_state),
    &cuser_chat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "join_chat_id",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinChatRoomGroupResponse, has_join_chat_id),
    offsetof(CChatRoomJoinChatRoomGroupResponse, join_chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_expire",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomJoinChatRoomGroupResponse, has_time_expire),
    offsetof(CChatRoomJoinChatRoomGroupResponse, time_expire),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__join_chat_room_group__response__field_indices_by_name[] = {
  2,   /* field[2] = join_chat_id */
  0,   /* field[0] = state */
  3,   /* field[3] = time_expire */
  1,   /* field[1] = user_chat_state */
};
static const ProtobufCIntRange cchat_room__join_chat_room_group__response__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 3, 1 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__join_chat_room_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_JoinChatRoomGroup_Response",
  "CChatRoomJoinChatRoomGroupResponse",
  "CChatRoomJoinChatRoomGroupResponse",
  "",
  sizeof(CChatRoomJoinChatRoomGroupResponse),
  4,
  cchat_room__join_chat_room_group__response__field_descriptors,
  cchat_room__join_chat_room_group__response__field_indices_by_name,
  2,  cchat_room__join_chat_room_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__invite_friend_to_chat_room_group__request__field_descriptors[4] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomInviteFriendToChatRoomGroupRequest, has_chat_group_id),
    offsetof(CChatRoomInviteFriendToChatRoomGroupRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomInviteFriendToChatRoomGroupRequest, has_steamid),
    offsetof(CChatRoomInviteFriendToChatRoomGroupRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomInviteFriendToChatRoomGroupRequest, has_chat_id),
    offsetof(CChatRoomInviteFriendToChatRoomGroupRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "skip_friendsui_check",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomInviteFriendToChatRoomGroupRequest, has_skip_friendsui_check),
    offsetof(CChatRoomInviteFriendToChatRoomGroupRequest, skip_friendsui_check),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__invite_friend_to_chat_room_group__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = chat_id */
  3,   /* field[3] = skip_friendsui_check */
  1,   /* field[1] = steamid */
};
static const ProtobufCIntRange cchat_room__invite_friend_to_chat_room_group__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__invite_friend_to_chat_room_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_InviteFriendToChatRoomGroup_Request",
  "CChatRoomInviteFriendToChatRoomGroupRequest",
  "CChatRoomInviteFriendToChatRoomGroupRequest",
  "",
  sizeof(CChatRoomInviteFriendToChatRoomGroupRequest),
  4,
  cchat_room__invite_friend_to_chat_room_group__request__field_descriptors,
  cchat_room__invite_friend_to_chat_room_group__request__field_indices_by_name,
  1,  cchat_room__invite_friend_to_chat_room_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__invite_friend_to_chat_room_group__response__field_descriptors NULL
#define cchat_room__invite_friend_to_chat_room_group__response__field_indices_by_name NULL
#define cchat_room__invite_friend_to_chat_room_group__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__invite_friend_to_chat_room_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_InviteFriendToChatRoomGroup_Response",
  "CChatRoomInviteFriendToChatRoomGroupResponse",
  "CChatRoomInviteFriendToChatRoomGroupResponse",
  "",
  sizeof(CChatRoomInviteFriendToChatRoomGroupResponse),
  0,
  cchat_room__invite_friend_to_chat_room_group__response__field_descriptors,
  cchat_room__invite_friend_to_chat_room_group__response__field_indices_by_name,
  0,  cchat_room__invite_friend_to_chat_room_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__leave_chat_room_group__request__field_descriptors[1] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomLeaveChatRoomGroupRequest, has_chat_group_id),
    offsetof(CChatRoomLeaveChatRoomGroupRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__leave_chat_room_group__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
};
static const ProtobufCIntRange cchat_room__leave_chat_room_group__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__leave_chat_room_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_LeaveChatRoomGroup_Request",
  "CChatRoomLeaveChatRoomGroupRequest",
  "CChatRoomLeaveChatRoomGroupRequest",
  "",
  sizeof(CChatRoomLeaveChatRoomGroupRequest),
  1,
  cchat_room__leave_chat_room_group__request__field_descriptors,
  cchat_room__leave_chat_room_group__request__field_indices_by_name,
  1,  cchat_room__leave_chat_room_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__leave_chat_room_group__response__field_descriptors NULL
#define cchat_room__leave_chat_room_group__response__field_indices_by_name NULL
#define cchat_room__leave_chat_room_group__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__leave_chat_room_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_LeaveChatRoomGroup_Response",
  "CChatRoomLeaveChatRoomGroupResponse",
  "CChatRoomLeaveChatRoomGroupResponse",
  "",
  sizeof(CChatRoomLeaveChatRoomGroupResponse),
  0,
  cchat_room__leave_chat_room_group__response__field_descriptors,
  cchat_room__leave_chat_room_group__response__field_indices_by_name,
  0,  cchat_room__leave_chat_room_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__create_chat_room__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomCreateChatRoomRequest, has_chat_group_id),
    offsetof(CChatRoomCreateChatRoomRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomCreateChatRoomRequest, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "allow_voice",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomCreateChatRoomRequest, has_allow_voice),
    offsetof(CChatRoomCreateChatRoomRequest, allow_voice),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__create_chat_room__request__field_indices_by_name[] = {
  2,   /* field[2] = allow_voice */
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = name */
};
static const ProtobufCIntRange cchat_room__create_chat_room__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__create_chat_room__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_CreateChatRoom_Request",
  "CChatRoomCreateChatRoomRequest",
  "CChatRoomCreateChatRoomRequest",
  "",
  sizeof(CChatRoomCreateChatRoomRequest),
  3,
  cchat_room__create_chat_room__request__field_descriptors,
  cchat_room__create_chat_room__request__field_indices_by_name,
  1,  cchat_room__create_chat_room__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__create_chat_room__response__field_descriptors[1] =
{
  {
    "chat_room",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomCreateChatRoomResponse, chat_room),
    &cchat_room_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__create_chat_room__response__field_indices_by_name[] = {
  0,   /* field[0] = chat_room */
};
static const ProtobufCIntRange cchat_room__create_chat_room__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__create_chat_room__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_CreateChatRoom_Response",
  "CChatRoomCreateChatRoomResponse",
  "CChatRoomCreateChatRoomResponse",
  "",
  sizeof(CChatRoomCreateChatRoomResponse),
  1,
  cchat_room__create_chat_room__response__field_descriptors,
  cchat_room__create_chat_room__response__field_indices_by_name,
  1,  cchat_room__create_chat_room__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__delete_chat_room__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteChatRoomRequest, has_chat_group_id),
    offsetof(CChatRoomDeleteChatRoomRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteChatRoomRequest, has_chat_id),
    offsetof(CChatRoomDeleteChatRoomRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__delete_chat_room__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
};
static const ProtobufCIntRange cchat_room__delete_chat_room__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__delete_chat_room__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteChatRoom_Request",
  "CChatRoomDeleteChatRoomRequest",
  "CChatRoomDeleteChatRoomRequest",
  "",
  sizeof(CChatRoomDeleteChatRoomRequest),
  2,
  cchat_room__delete_chat_room__request__field_descriptors,
  cchat_room__delete_chat_room__request__field_indices_by_name,
  1,  cchat_room__delete_chat_room__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__delete_chat_room__response__field_descriptors NULL
#define cchat_room__delete_chat_room__response__field_indices_by_name NULL
#define cchat_room__delete_chat_room__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__delete_chat_room__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteChatRoom_Response",
  "CChatRoomDeleteChatRoomResponse",
  "CChatRoomDeleteChatRoomResponse",
  "",
  sizeof(CChatRoomDeleteChatRoomResponse),
  0,
  cchat_room__delete_chat_room__response__field_descriptors,
  cchat_room__delete_chat_room__response__field_indices_by_name,
  0,  cchat_room__delete_chat_room__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__rename_chat_room__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomRenameChatRoomRequest, has_chat_group_id),
    offsetof(CChatRoomRenameChatRoomRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomRenameChatRoomRequest, has_chat_id),
    offsetof(CChatRoomRenameChatRoomRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomRenameChatRoomRequest, name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__rename_chat_room__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  2,   /* field[2] = name */
};
static const ProtobufCIntRange cchat_room__rename_chat_room__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__rename_chat_room__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_RenameChatRoom_Request",
  "CChatRoomRenameChatRoomRequest",
  "CChatRoomRenameChatRoomRequest",
  "",
  sizeof(CChatRoomRenameChatRoomRequest),
  3,
  cchat_room__rename_chat_room__request__field_descriptors,
  cchat_room__rename_chat_room__request__field_indices_by_name,
  1,  cchat_room__rename_chat_room__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__rename_chat_room__response__field_descriptors NULL
#define cchat_room__rename_chat_room__response__field_indices_by_name NULL
#define cchat_room__rename_chat_room__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__rename_chat_room__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_RenameChatRoom_Response",
  "CChatRoomRenameChatRoomResponse",
  "CChatRoomRenameChatRoomResponse",
  "",
  sizeof(CChatRoomRenameChatRoomResponse),
  0,
  cchat_room__rename_chat_room__response__field_descriptors,
  cchat_room__rename_chat_room__response__field_indices_by_name,
  0,  cchat_room__rename_chat_room__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__reorder_chat_room__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomReorderChatRoomRequest, has_chat_group_id),
    offsetof(CChatRoomReorderChatRoomRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomReorderChatRoomRequest, has_chat_id),
    offsetof(CChatRoomReorderChatRoomRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "move_after_chat_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomReorderChatRoomRequest, has_move_after_chat_id),
    offsetof(CChatRoomReorderChatRoomRequest, move_after_chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__reorder_chat_room__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  2,   /* field[2] = move_after_chat_id */
};
static const ProtobufCIntRange cchat_room__reorder_chat_room__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__reorder_chat_room__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ReorderChatRoom_Request",
  "CChatRoomReorderChatRoomRequest",
  "CChatRoomReorderChatRoomRequest",
  "",
  sizeof(CChatRoomReorderChatRoomRequest),
  3,
  cchat_room__reorder_chat_room__request__field_descriptors,
  cchat_room__reorder_chat_room__request__field_indices_by_name,
  1,  cchat_room__reorder_chat_room__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__reorder_chat_room__response__field_descriptors NULL
#define cchat_room__reorder_chat_room__response__field_indices_by_name NULL
#define cchat_room__reorder_chat_room__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__reorder_chat_room__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ReorderChatRoom_Response",
  "CChatRoomReorderChatRoomResponse",
  "CChatRoomReorderChatRoomResponse",
  "",
  sizeof(CChatRoomReorderChatRoomResponse),
  0,
  cchat_room__reorder_chat_room__response__field_descriptors,
  cchat_room__reorder_chat_room__response__field_indices_by_name,
  0,  cchat_room__reorder_chat_room__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__send_chat_message__request__field_descriptors[4] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSendChatMessageRequest, has_chat_group_id),
    offsetof(CChatRoomSendChatMessageRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSendChatMessageRequest, has_chat_id),
    offsetof(CChatRoomSendChatMessageRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSendChatMessageRequest, message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "echo_to_sender",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomSendChatMessageRequest, has_echo_to_sender),
    offsetof(CChatRoomSendChatMessageRequest, echo_to_sender),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__send_chat_message__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  3,   /* field[3] = echo_to_sender */
  2,   /* field[2] = message */
};
static const ProtobufCIntRange cchat_room__send_chat_message__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__send_chat_message__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SendChatMessage_Request",
  "CChatRoomSendChatMessageRequest",
  "CChatRoomSendChatMessageRequest",
  "",
  sizeof(CChatRoomSendChatMessageRequest),
  4,
  cchat_room__send_chat_message__request__field_descriptors,
  cchat_room__send_chat_message__request__field_indices_by_name,
  1,  cchat_room__send_chat_message__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__send_chat_message__response__field_descriptors[4] =
{
  {
    "modified_message",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSendChatMessageResponse, modified_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_timestamp",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomSendChatMessageResponse, has_server_timestamp),
    offsetof(CChatRoomSendChatMessageResponse, server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomSendChatMessageResponse, has_ordinal),
    offsetof(CChatRoomSendChatMessageResponse, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message_without_bb_code",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSendChatMessageResponse, message_without_bb_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__send_chat_message__response__field_indices_by_name[] = {
  3,   /* field[3] = message_without_bb_code */
  0,   /* field[0] = modified_message */
  2,   /* field[2] = ordinal */
  1,   /* field[1] = server_timestamp */
};
static const ProtobufCIntRange cchat_room__send_chat_message__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__send_chat_message__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SendChatMessage_Response",
  "CChatRoomSendChatMessageResponse",
  "CChatRoomSendChatMessageResponse",
  "",
  sizeof(CChatRoomSendChatMessageResponse),
  4,
  cchat_room__send_chat_message__response__field_descriptors,
  cchat_room__send_chat_message__response__field_indices_by_name,
  1,  cchat_room__send_chat_message__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__join_voice_chat__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinVoiceChatRequest, has_chat_group_id),
    offsetof(CChatRoomJoinVoiceChatRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinVoiceChatRequest, has_chat_id),
    offsetof(CChatRoomJoinVoiceChatRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__join_voice_chat__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
};
static const ProtobufCIntRange cchat_room__join_voice_chat__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__join_voice_chat__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_JoinVoiceChat_Request",
  "CChatRoomJoinVoiceChatRequest",
  "CChatRoomJoinVoiceChatRequest",
  "",
  sizeof(CChatRoomJoinVoiceChatRequest),
  2,
  cchat_room__join_voice_chat__request__field_descriptors,
  cchat_room__join_voice_chat__request__field_indices_by_name,
  1,  cchat_room__join_voice_chat__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__join_voice_chat__response__field_descriptors[1] =
{
  {
    "voice_chatid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomJoinVoiceChatResponse, has_voice_chatid),
    offsetof(CChatRoomJoinVoiceChatResponse, voice_chatid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__join_voice_chat__response__field_indices_by_name[] = {
  0,   /* field[0] = voice_chatid */
};
static const ProtobufCIntRange cchat_room__join_voice_chat__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__join_voice_chat__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_JoinVoiceChat_Response",
  "CChatRoomJoinVoiceChatResponse",
  "CChatRoomJoinVoiceChatResponse",
  "",
  sizeof(CChatRoomJoinVoiceChatResponse),
  1,
  cchat_room__join_voice_chat__response__field_descriptors,
  cchat_room__join_voice_chat__response__field_indices_by_name,
  1,  cchat_room__join_voice_chat__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__leave_voice_chat__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomLeaveVoiceChatRequest, has_chat_group_id),
    offsetof(CChatRoomLeaveVoiceChatRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomLeaveVoiceChatRequest, has_chat_id),
    offsetof(CChatRoomLeaveVoiceChatRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__leave_voice_chat__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
};
static const ProtobufCIntRange cchat_room__leave_voice_chat__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__leave_voice_chat__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_LeaveVoiceChat_Request",
  "CChatRoomLeaveVoiceChatRequest",
  "CChatRoomLeaveVoiceChatRequest",
  "",
  sizeof(CChatRoomLeaveVoiceChatRequest),
  2,
  cchat_room__leave_voice_chat__request__field_descriptors,
  cchat_room__leave_voice_chat__request__field_indices_by_name,
  1,  cchat_room__leave_voice_chat__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__leave_voice_chat__response__field_descriptors NULL
#define cchat_room__leave_voice_chat__response__field_indices_by_name NULL
#define cchat_room__leave_voice_chat__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__leave_voice_chat__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_LeaveVoiceChat_Response",
  "CChatRoomLeaveVoiceChatResponse",
  "CChatRoomLeaveVoiceChatResponse",
  "",
  sizeof(CChatRoomLeaveVoiceChatResponse),
  0,
  cchat_room__leave_voice_chat__response__field_descriptors,
  cchat_room__leave_voice_chat__response__field_indices_by_name,
  0,  cchat_room__leave_voice_chat__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_message_history__request__field_descriptors[7] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetMessageHistoryRequest, has_chat_group_id),
    offsetof(CChatRoomGetMessageHistoryRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetMessageHistoryRequest, has_chat_id),
    offsetof(CChatRoomGetMessageHistoryRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_time",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryRequest, has_last_time),
    offsetof(CChatRoomGetMessageHistoryRequest, last_time),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "last_ordinal",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryRequest, has_last_ordinal),
    offsetof(CChatRoomGetMessageHistoryRequest, last_ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "start_time",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryRequest, has_start_time),
    offsetof(CChatRoomGetMessageHistoryRequest, start_time),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "start_ordinal",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryRequest, has_start_ordinal),
    offsetof(CChatRoomGetMessageHistoryRequest, start_ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "max_count",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryRequest, has_max_count),
    offsetof(CChatRoomGetMessageHistoryRequest, max_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_message_history__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  3,   /* field[3] = last_ordinal */
  2,   /* field[2] = last_time */
  6,   /* field[6] = max_count */
  5,   /* field[5] = start_ordinal */
  4,   /* field[4] = start_time */
};
static const ProtobufCIntRange cchat_room__get_message_history__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cchat_room__get_message_history__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetMessageHistory_Request",
  "CChatRoomGetMessageHistoryRequest",
  "CChatRoomGetMessageHistoryRequest",
  "",
  sizeof(CChatRoomGetMessageHistoryRequest),
  7,
  cchat_room__get_message_history__request__field_descriptors,
  cchat_room__get_message_history__request__field_indices_by_name,
  1,  cchat_room__get_message_history__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomServerMessage server_message__message__default_value = ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_Invalid;
static const ProtobufCFieldDescriptor server_message__field_descriptors[3] =
{
  {
    "message",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(ServerMessage, has_message),
    offsetof(ServerMessage, message),
    &echat_room_server_message__descriptor,
    &server_message__message__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "string_param",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(ServerMessage, string_param),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accountid_param",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(ServerMessage, has_accountid_param),
    offsetof(ServerMessage, accountid_param),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned server_message__field_indices_by_name[] = {
  2,   /* field[2] = accountid_param */
  0,   /* field[0] = message */
  1,   /* field[1] = string_param */
};
static const ProtobufCIntRange server_message__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor server_message__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ServerMessage",
  "ServerMessage",
  "ServerMessage",
  "",
  sizeof(ServerMessage),
  3,
  server_message__field_descriptors,
  server_message__field_indices_by_name,
  1,  server_message__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomMessageReactionType cchat_room__get_message_history__response__chat_message__message_reaction__reaction_type__default_value = ECHAT_ROOM_MESSAGE_REACTION_TYPE__k_EChatRoomMessageReactionType_Invalid;
static const ProtobufCFieldDescriptor cchat_room__get_message_history__response__chat_message__message_reaction__field_descriptors[4] =
{
  {
    "reaction_type",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction, has_reaction_type),
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction, reaction_type),
    &echat_room_message_reaction_type__descriptor,
    &cchat_room__get_message_history__response__chat_message__message_reaction__reaction_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reaction",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction, reaction),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "num_reactors",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction, has_num_reactors),
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction, num_reactors),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "has_user_reacted",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction, has_has_user_reacted),
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction, has_user_reacted),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_message_history__response__chat_message__message_reaction__field_indices_by_name[] = {
  3,   /* field[3] = has_user_reacted */
  2,   /* field[2] = num_reactors */
  1,   /* field[1] = reaction */
  0,   /* field[0] = reaction_type */
};
static const ProtobufCIntRange cchat_room__get_message_history__response__chat_message__message_reaction__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__get_message_history__response__chat_message__message_reaction__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction",
  "MessageReaction",
  "CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction",
  "",
  sizeof(CChatRoomGetMessageHistoryResponse__ChatMessage__MessageReaction),
  4,
  cchat_room__get_message_history__response__chat_message__message_reaction__field_descriptors,
  cchat_room__get_message_history__response__chat_message__message_reaction__field_indices_by_name,
  1,  cchat_room__get_message_history__response__chat_message__message_reaction__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_message_history__response__chat_message__field_descriptors[7] =
{
  {
    "sender",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, has_sender),
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, sender),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_timestamp",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, has_server_timestamp),
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, has_ordinal),
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_message",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, server_message),
    &server_message__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deleted",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, has_deleted),
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, deleted),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reactions",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, n_reactions),
    offsetof(CChatRoomGetMessageHistoryResponse__ChatMessage, reactions),
    &cchat_room__get_message_history__response__chat_message__message_reaction__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_message_history__response__chat_message__field_indices_by_name[] = {
  5,   /* field[5] = deleted */
  2,   /* field[2] = message */
  3,   /* field[3] = ordinal */
  6,   /* field[6] = reactions */
  0,   /* field[0] = sender */
  4,   /* field[4] = server_message */
  1,   /* field[1] = server_timestamp */
};
static const ProtobufCIntRange cchat_room__get_message_history__response__chat_message__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cchat_room__get_message_history__response__chat_message__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetMessageHistory_Response.ChatMessage",
  "ChatMessage",
  "CChatRoomGetMessageHistoryResponse__ChatMessage",
  "",
  sizeof(CChatRoomGetMessageHistoryResponse__ChatMessage),
  7,
  cchat_room__get_message_history__response__chat_message__field_descriptors,
  cchat_room__get_message_history__response__chat_message__field_indices_by_name,
  1,  cchat_room__get_message_history__response__chat_message__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_message_history__response__field_descriptors[2] =
{
  {
    "messages",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetMessageHistoryResponse, n_messages),
    offsetof(CChatRoomGetMessageHistoryResponse, messages),
    &cchat_room__get_message_history__response__chat_message__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "more_available",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomGetMessageHistoryResponse, has_more_available),
    offsetof(CChatRoomGetMessageHistoryResponse, more_available),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_message_history__response__field_indices_by_name[] = {
  0,   /* field[0] = messages */
  1,   /* field[1] = more_available */
};
static const ProtobufCIntRange cchat_room__get_message_history__response__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 4, 1 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__get_message_history__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetMessageHistory_Response",
  "CChatRoomGetMessageHistoryResponse",
  "CChatRoomGetMessageHistoryResponse",
  "",
  sizeof(CChatRoomGetMessageHistoryResponse),
  2,
  cchat_room__get_message_history__response__field_descriptors,
  cchat_room__get_message_history__response__field_indices_by_name,
  2,  cchat_room__get_message_history__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__get_my_chat_room_groups__request__field_descriptors NULL
#define cchat_room__get_my_chat_room_groups__request__field_indices_by_name NULL
#define cchat_room__get_my_chat_room_groups__request__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__get_my_chat_room_groups__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetMyChatRoomGroups_Request",
  "CChatRoomGetMyChatRoomGroupsRequest",
  "CChatRoomGetMyChatRoomGroupsRequest",
  "",
  sizeof(CChatRoomGetMyChatRoomGroupsRequest),
  0,
  cchat_room__get_my_chat_room_groups__request__field_descriptors,
  cchat_room__get_my_chat_room_groups__request__field_indices_by_name,
  0,  cchat_room__get_my_chat_room_groups__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomGroupRank cchat_room__get_chat_room_group_summary__response__rank__default_value = ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Default;
static const ProtobufCFieldDescriptor cchat_room__get_chat_room_group_summary__response__field_descriptors[22] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_chat_group_id),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_group_name",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, chat_group_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "active_member_count",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_active_member_count),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, active_member_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "active_voice_member_count",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_active_voice_member_count),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, active_voice_member_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "default_chat_id",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_default_chat_id),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, default_chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_rooms",
    6,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, n_chat_rooms),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, chat_rooms),
    &cchat_room_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "clanid",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_clanid),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, clanid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_group_tagline",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, chat_group_tagline),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accountid_owner",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_accountid_owner),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, accountid_owner),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "top_members",
    10,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, n_top_members),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, top_members),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_group_avatar_sha",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_chat_group_avatar_sha),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, chat_group_avatar_sha),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "rank",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_rank),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, rank),
    &echat_room_group_rank__descriptor,
    &cchat_room__get_chat_room_group_summary__response__rank__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "default_role_id",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_default_role_id),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, default_role_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_ids",
    14,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, n_role_ids),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, role_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "role_actions",
    15,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, n_role_actions),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, role_actions),
    &cchat_role_actions__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_accountid",
    16,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_watching_broadcast_accountid),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, watching_broadcast_accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "appid",
    17,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_appid),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, appid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "party_beacons",
    18,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, n_party_beacons),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, party_beacons),
    &cchat_party_beacon__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "watching_broadcast_channel_id",
    19,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_watching_broadcast_channel_id),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, watching_broadcast_channel_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "active_minigame_id",
    20,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_active_minigame_id),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, active_minigame_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "avatar_ugc_url",
    21,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, avatar_ugc_url),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "disabled",
    22,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, has_disabled),
    offsetof(CChatRoomGetChatRoomGroupSummaryResponse, disabled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_chat_room_group_summary__response__field_indices_by_name[] = {
  8,   /* field[8] = accountid_owner */
  2,   /* field[2] = active_member_count */
  19,   /* field[19] = active_minigame_id */
  3,   /* field[3] = active_voice_member_count */
  16,   /* field[16] = appid */
  20,   /* field[20] = avatar_ugc_url */
  10,   /* field[10] = chat_group_avatar_sha */
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_group_name */
  7,   /* field[7] = chat_group_tagline */
  5,   /* field[5] = chat_rooms */
  6,   /* field[6] = clanid */
  4,   /* field[4] = default_chat_id */
  12,   /* field[12] = default_role_id */
  21,   /* field[21] = disabled */
  17,   /* field[17] = party_beacons */
  11,   /* field[11] = rank */
  14,   /* field[14] = role_actions */
  13,   /* field[13] = role_ids */
  9,   /* field[9] = top_members */
  15,   /* field[15] = watching_broadcast_accountid */
  18,   /* field[18] = watching_broadcast_channel_id */
};
static const ProtobufCIntRange cchat_room__get_chat_room_group_summary__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 22 }
};
const ProtobufCMessageDescriptor cchat_room__get_chat_room_group_summary__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetChatRoomGroupSummary_Response",
  "CChatRoomGetChatRoomGroupSummaryResponse",
  "CChatRoomGetChatRoomGroupSummaryResponse",
  "",
  sizeof(CChatRoomGetChatRoomGroupSummaryResponse),
  22,
  cchat_room__get_chat_room_group_summary__response__field_descriptors,
  cchat_room__get_chat_room_group_summary__response__field_indices_by_name,
  1,  cchat_room__get_chat_room_group_summary__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_summary_pair__field_descriptors[2] =
{
  {
    "user_chat_group_state",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSummaryPair, user_chat_group_state),
    &cuser_chat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "group_summary",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSummaryPair, group_summary),
    &cchat_room__get_chat_room_group_summary__response__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_summary_pair__field_indices_by_name[] = {
  1,   /* field[1] = group_summary */
  0,   /* field[0] = user_chat_group_state */
};
static const ProtobufCIntRange cchat_room_summary_pair__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room_summary_pair__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomSummaryPair",
  "CChatRoomSummaryPair",
  "CChatRoomSummaryPair",
  "",
  sizeof(CChatRoomSummaryPair),
  2,
  cchat_room_summary_pair__field_descriptors,
  cchat_room_summary_pair__field_indices_by_name,
  1,  cchat_room_summary_pair__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_my_chat_room_groups__response__field_descriptors[1] =
{
  {
    "chat_room_groups",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetMyChatRoomGroupsResponse, n_chat_room_groups),
    offsetof(CChatRoomGetMyChatRoomGroupsResponse, chat_room_groups),
    &cchat_room_summary_pair__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_my_chat_room_groups__response__field_indices_by_name[] = {
  0,   /* field[0] = chat_room_groups */
};
static const ProtobufCIntRange cchat_room__get_my_chat_room_groups__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_my_chat_room_groups__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetMyChatRoomGroups_Response",
  "CChatRoomGetMyChatRoomGroupsResponse",
  "CChatRoomGetMyChatRoomGroupsResponse",
  "",
  sizeof(CChatRoomGetMyChatRoomGroupsResponse),
  1,
  cchat_room__get_my_chat_room_groups__response__field_descriptors,
  cchat_room__get_my_chat_room_groups__response__field_indices_by_name,
  1,  cchat_room__get_my_chat_room_groups__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_chat_room_group_state__request__field_descriptors[1] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetChatRoomGroupStateRequest, has_chat_group_id),
    offsetof(CChatRoomGetChatRoomGroupStateRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_chat_room_group_state__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
};
static const ProtobufCIntRange cchat_room__get_chat_room_group_state__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_chat_room_group_state__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetChatRoomGroupState_Request",
  "CChatRoomGetChatRoomGroupStateRequest",
  "CChatRoomGetChatRoomGroupStateRequest",
  "",
  sizeof(CChatRoomGetChatRoomGroupStateRequest),
  1,
  cchat_room__get_chat_room_group_state__request__field_descriptors,
  cchat_room__get_chat_room_group_state__request__field_indices_by_name,
  1,  cchat_room__get_chat_room_group_state__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_chat_room_group_state__response__field_descriptors[1] =
{
  {
    "state",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetChatRoomGroupStateResponse, state),
    &cchat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_chat_room_group_state__response__field_indices_by_name[] = {
  0,   /* field[0] = state */
};
static const ProtobufCIntRange cchat_room__get_chat_room_group_state__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_chat_room_group_state__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetChatRoomGroupState_Response",
  "CChatRoomGetChatRoomGroupStateResponse",
  "CChatRoomGetChatRoomGroupStateResponse",
  "",
  sizeof(CChatRoomGetChatRoomGroupStateResponse),
  1,
  cchat_room__get_chat_room_group_state__response__field_descriptors,
  cchat_room__get_chat_room_group_state__response__field_indices_by_name,
  1,  cchat_room__get_chat_room_group_state__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_chat_room_group_summary__request__field_descriptors[1] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetChatRoomGroupSummaryRequest, has_chat_group_id),
    offsetof(CChatRoomGetChatRoomGroupSummaryRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_chat_room_group_summary__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
};
static const ProtobufCIntRange cchat_room__get_chat_room_group_summary__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_chat_room_group_summary__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetChatRoomGroupSummary_Request",
  "CChatRoomGetChatRoomGroupSummaryRequest",
  "CChatRoomGetChatRoomGroupSummaryRequest",
  "",
  sizeof(CChatRoomGetChatRoomGroupSummaryRequest),
  1,
  cchat_room__get_chat_room_group_summary__request__field_descriptors,
  cchat_room__get_chat_room_group_summary__request__field_indices_by_name,
  1,  cchat_room__get_chat_room_group_summary__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_app_chat_room_group_force_active__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetAppChatRoomGroupForceActiveRequest, has_chat_group_id),
    offsetof(CChatRoomSetAppChatRoomGroupForceActiveRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "requesting_app_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomSetAppChatRoomGroupForceActiveRequest, has_requesting_app_id),
    offsetof(CChatRoomSetAppChatRoomGroupForceActiveRequest, requesting_app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_app_chat_room_group_force_active__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = requesting_app_id */
};
static const ProtobufCIntRange cchat_room__set_app_chat_room_group_force_active__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__set_app_chat_room_group_force_active__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetAppChatRoomGroupForceActive_Request",
  "CChatRoomSetAppChatRoomGroupForceActiveRequest",
  "CChatRoomSetAppChatRoomGroupForceActiveRequest",
  "",
  sizeof(CChatRoomSetAppChatRoomGroupForceActiveRequest),
  2,
  cchat_room__set_app_chat_room_group_force_active__request__field_descriptors,
  cchat_room__set_app_chat_room_group_force_active__request__field_indices_by_name,
  1,  cchat_room__set_app_chat_room_group_force_active__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_app_chat_room_group_force_active__response__field_descriptors[2] =
{
  {
    "result",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomSetAppChatRoomGroupForceActiveResponse, has_result),
    offsetof(CChatRoomSetAppChatRoomGroupForceActiveResponse, result),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accounts_in_channel",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomSetAppChatRoomGroupForceActiveResponse, n_accounts_in_channel),
    offsetof(CChatRoomSetAppChatRoomGroupForceActiveResponse, accounts_in_channel),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_app_chat_room_group_force_active__response__field_indices_by_name[] = {
  1,   /* field[1] = accounts_in_channel */
  0,   /* field[0] = result */
};
static const ProtobufCIntRange cchat_room__set_app_chat_room_group_force_active__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__set_app_chat_room_group_force_active__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetAppChatRoomGroupForceActive_Response",
  "CChatRoomSetAppChatRoomGroupForceActiveResponse",
  "CChatRoomSetAppChatRoomGroupForceActiveResponse",
  "",
  sizeof(CChatRoomSetAppChatRoomGroupForceActiveResponse),
  2,
  cchat_room__set_app_chat_room_group_force_active__response__field_descriptors,
  cchat_room__set_app_chat_room_group_force_active__response__field_indices_by_name,
  1,  cchat_room__set_app_chat_room_group_force_active__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_app_chat_room_group_stop_force_active__notification__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetAppChatRoomGroupStopForceActiveNotification, has_chat_group_id),
    offsetof(CChatRoomSetAppChatRoomGroupStopForceActiveNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "requesting_app_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomSetAppChatRoomGroupStopForceActiveNotification, has_requesting_app_id),
    offsetof(CChatRoomSetAppChatRoomGroupStopForceActiveNotification, requesting_app_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_app_chat_room_group_stop_force_active__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = requesting_app_id */
};
static const ProtobufCIntRange cchat_room__set_app_chat_room_group_stop_force_active__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__set_app_chat_room_group_stop_force_active__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetAppChatRoomGroupStopForceActive_Notification",
  "CChatRoomSetAppChatRoomGroupStopForceActiveNotification",
  "CChatRoomSetAppChatRoomGroupStopForceActiveNotification",
  "",
  sizeof(CChatRoomSetAppChatRoomGroupStopForceActiveNotification),
  2,
  cchat_room__set_app_chat_room_group_stop_force_active__notification__field_descriptors,
  cchat_room__set_app_chat_room_group_stop_force_active__notification__field_indices_by_name,
  1,  cchat_room__set_app_chat_room_group_stop_force_active__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__ack_chat_message__notification__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomAckChatMessageNotification, has_chat_group_id),
    offsetof(CChatRoomAckChatMessageNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomAckChatMessageNotification, has_chat_id),
    offsetof(CChatRoomAckChatMessageNotification, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "timestamp",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomAckChatMessageNotification, has_timestamp),
    offsetof(CChatRoomAckChatMessageNotification, timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__ack_chat_message__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  2,   /* field[2] = timestamp */
};
static const ProtobufCIntRange cchat_room__ack_chat_message__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__ack_chat_message__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_AckChatMessage_Notification",
  "CChatRoomAckChatMessageNotification",
  "CChatRoomAckChatMessageNotification",
  "",
  sizeof(CChatRoomAckChatMessageNotification),
  3,
  cchat_room__ack_chat_message__notification__field_descriptors,
  cchat_room__ack_chat_message__notification__field_indices_by_name,
  1,  cchat_room__ack_chat_message__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__create_invite_link__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomCreateInviteLinkRequest, has_chat_group_id),
    offsetof(CChatRoomCreateInviteLinkRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "seconds_valid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomCreateInviteLinkRequest, has_seconds_valid),
    offsetof(CChatRoomCreateInviteLinkRequest, seconds_valid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomCreateInviteLinkRequest, has_chat_id),
    offsetof(CChatRoomCreateInviteLinkRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__create_invite_link__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = chat_id */
  1,   /* field[1] = seconds_valid */
};
static const ProtobufCIntRange cchat_room__create_invite_link__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__create_invite_link__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_CreateInviteLink_Request",
  "CChatRoomCreateInviteLinkRequest",
  "CChatRoomCreateInviteLinkRequest",
  "",
  sizeof(CChatRoomCreateInviteLinkRequest),
  3,
  cchat_room__create_invite_link__request__field_descriptors,
  cchat_room__create_invite_link__request__field_indices_by_name,
  1,  cchat_room__create_invite_link__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__create_invite_link__response__field_descriptors[2] =
{
  {
    "invite_code",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomCreateInviteLinkResponse, invite_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "seconds_valid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomCreateInviteLinkResponse, has_seconds_valid),
    offsetof(CChatRoomCreateInviteLinkResponse, seconds_valid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__create_invite_link__response__field_indices_by_name[] = {
  0,   /* field[0] = invite_code */
  1,   /* field[1] = seconds_valid */
};
static const ProtobufCIntRange cchat_room__create_invite_link__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__create_invite_link__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_CreateInviteLink_Response",
  "CChatRoomCreateInviteLinkResponse",
  "CChatRoomCreateInviteLinkResponse",
  "",
  sizeof(CChatRoomCreateInviteLinkResponse),
  2,
  cchat_room__create_invite_link__response__field_descriptors,
  cchat_room__create_invite_link__response__field_indices_by_name,
  1,  cchat_room__create_invite_link__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_link_info__request__field_descriptors[1] =
{
  {
    "invite_code",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetInviteLinkInfoRequest, invite_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_link_info__request__field_indices_by_name[] = {
  0,   /* field[0] = invite_code */
};
static const ProtobufCIntRange cchat_room__get_invite_link_info__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_link_info__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteLinkInfo_Request",
  "CChatRoomGetInviteLinkInfoRequest",
  "CChatRoomGetInviteLinkInfoRequest",
  "",
  sizeof(CChatRoomGetInviteLinkInfoRequest),
  1,
  cchat_room__get_invite_link_info__request__field_descriptors,
  cchat_room__get_invite_link_info__request__field_indices_by_name,
  1,  cchat_room__get_invite_link_info__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_link_info__response__field_descriptors[7] =
{
  {
    "steamid_sender",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomGetInviteLinkInfoResponse, has_steamid_sender),
    offsetof(CChatRoomGetInviteLinkInfoResponse, steamid_sender),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_expires",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetInviteLinkInfoResponse, has_time_expires),
    offsetof(CChatRoomGetInviteLinkInfoResponse, time_expires),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetInviteLinkInfoResponse, has_chat_id),
    offsetof(CChatRoomGetInviteLinkInfoResponse, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "group_summary",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetInviteLinkInfoResponse, group_summary),
    &cchat_room__get_chat_room_group_summary__response__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "user_chat_group_state",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetInviteLinkInfoResponse, user_chat_group_state),
    &cuser_chat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_kick_expire",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetInviteLinkInfoResponse, has_time_kick_expire),
    offsetof(CChatRoomGetInviteLinkInfoResponse, time_kick_expire),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "banned",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomGetInviteLinkInfoResponse, has_banned),
    offsetof(CChatRoomGetInviteLinkInfoResponse, banned),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_link_info__response__field_indices_by_name[] = {
  6,   /* field[6] = banned */
  2,   /* field[2] = chat_id */
  3,   /* field[3] = group_summary */
  0,   /* field[0] = steamid_sender */
  1,   /* field[1] = time_expires */
  5,   /* field[5] = time_kick_expire */
  4,   /* field[4] = user_chat_group_state */
};
static const ProtobufCIntRange cchat_room__get_invite_link_info__response__number_ranges[3 + 1] =
{
  { 3, 0 },
  { 6, 2 },
  { 8, 3 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_link_info__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteLinkInfo_Response",
  "CChatRoomGetInviteLinkInfoResponse",
  "CChatRoomGetInviteLinkInfoResponse",
  "",
  sizeof(CChatRoomGetInviteLinkInfoResponse),
  7,
  cchat_room__get_invite_link_info__response__field_descriptors,
  cchat_room__get_invite_link_info__response__field_indices_by_name,
  3,  cchat_room__get_invite_link_info__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_info__request__field_descriptors[4] =
{
  {
    "steamid_invitee",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomGetInviteInfoRequest, has_steamid_invitee),
    offsetof(CChatRoomGetInviteInfoRequest, steamid_invitee),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_group_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetInviteInfoRequest, has_chat_group_id),
    offsetof(CChatRoomGetInviteInfoRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetInviteInfoRequest, has_chat_id),
    offsetof(CChatRoomGetInviteInfoRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "invite_code",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetInviteInfoRequest, invite_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_info__request__field_indices_by_name[] = {
  1,   /* field[1] = chat_group_id */
  2,   /* field[2] = chat_id */
  3,   /* field[3] = invite_code */
  0,   /* field[0] = steamid_invitee */
};
static const ProtobufCIntRange cchat_room__get_invite_info__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_info__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteInfo_Request",
  "CChatRoomGetInviteInfoRequest",
  "CChatRoomGetInviteInfoRequest",
  "",
  sizeof(CChatRoomGetInviteInfoRequest),
  4,
  cchat_room__get_invite_info__request__field_descriptors,
  cchat_room__get_invite_info__request__field_indices_by_name,
  1,  cchat_room__get_invite_info__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_info__response__field_descriptors[3] =
{
  {
    "group_summary",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetInviteInfoResponse, group_summary),
    &cchat_room__get_chat_room_group_summary__response__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_kick_expire",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetInviteInfoResponse, has_time_kick_expire),
    offsetof(CChatRoomGetInviteInfoResponse, time_kick_expire),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "banned",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomGetInviteInfoResponse, has_banned),
    offsetof(CChatRoomGetInviteInfoResponse, banned),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_info__response__field_indices_by_name[] = {
  2,   /* field[2] = banned */
  0,   /* field[0] = group_summary */
  1,   /* field[1] = time_kick_expire */
};
static const ProtobufCIntRange cchat_room__get_invite_info__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_info__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteInfo_Response",
  "CChatRoomGetInviteInfoResponse",
  "CChatRoomGetInviteInfoResponse",
  "",
  sizeof(CChatRoomGetInviteInfoResponse),
  3,
  cchat_room__get_invite_info__response__field_descriptors,
  cchat_room__get_invite_info__response__field_indices_by_name,
  1,  cchat_room__get_invite_info__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_links_for_group__request__field_descriptors[1] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetInviteLinksForGroupRequest, has_chat_group_id),
    offsetof(CChatRoomGetInviteLinksForGroupRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_links_for_group__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
};
static const ProtobufCIntRange cchat_room__get_invite_links_for_group__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_links_for_group__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteLinksForGroup_Request",
  "CChatRoomGetInviteLinksForGroupRequest",
  "CChatRoomGetInviteLinksForGroupRequest",
  "",
  sizeof(CChatRoomGetInviteLinksForGroupRequest),
  1,
  cchat_room__get_invite_links_for_group__request__field_descriptors,
  cchat_room__get_invite_links_for_group__request__field_indices_by_name,
  1,  cchat_room__get_invite_links_for_group__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_links_for_group__response__link_info__field_descriptors[4] =
{
  {
    "invite_code",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetInviteLinksForGroupResponse__LinkInfo, invite_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_creator",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomGetInviteLinksForGroupResponse__LinkInfo, has_steamid_creator),
    offsetof(CChatRoomGetInviteLinksForGroupResponse__LinkInfo, steamid_creator),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_expires",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetInviteLinksForGroupResponse__LinkInfo, has_time_expires),
    offsetof(CChatRoomGetInviteLinksForGroupResponse__LinkInfo, time_expires),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetInviteLinksForGroupResponse__LinkInfo, has_chat_id),
    offsetof(CChatRoomGetInviteLinksForGroupResponse__LinkInfo, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_links_for_group__response__link_info__field_indices_by_name[] = {
  3,   /* field[3] = chat_id */
  0,   /* field[0] = invite_code */
  1,   /* field[1] = steamid_creator */
  2,   /* field[2] = time_expires */
};
static const ProtobufCIntRange cchat_room__get_invite_links_for_group__response__link_info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_links_for_group__response__link_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteLinksForGroup_Response.LinkInfo",
  "LinkInfo",
  "CChatRoomGetInviteLinksForGroupResponse__LinkInfo",
  "",
  sizeof(CChatRoomGetInviteLinksForGroupResponse__LinkInfo),
  4,
  cchat_room__get_invite_links_for_group__response__link_info__field_descriptors,
  cchat_room__get_invite_links_for_group__response__link_info__field_indices_by_name,
  1,  cchat_room__get_invite_links_for_group__response__link_info__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_links_for_group__response__field_descriptors[1] =
{
  {
    "invite_links",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetInviteLinksForGroupResponse, n_invite_links),
    offsetof(CChatRoomGetInviteLinksForGroupResponse, invite_links),
    &cchat_room__get_invite_links_for_group__response__link_info__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_links_for_group__response__field_indices_by_name[] = {
  0,   /* field[0] = invite_links */
};
static const ProtobufCIntRange cchat_room__get_invite_links_for_group__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_links_for_group__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteLinksForGroup_Response",
  "CChatRoomGetInviteLinksForGroupResponse",
  "CChatRoomGetInviteLinksForGroupResponse",
  "",
  sizeof(CChatRoomGetInviteLinksForGroupResponse),
  1,
  cchat_room__get_invite_links_for_group__response__field_descriptors,
  cchat_room__get_invite_links_for_group__response__field_indices_by_name,
  1,  cchat_room__get_invite_links_for_group__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_ban_list__request__field_descriptors[1] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetBanListRequest, has_chat_group_id),
    offsetof(CChatRoomGetBanListRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_ban_list__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
};
static const ProtobufCIntRange cchat_room__get_ban_list__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_ban_list__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetBanList_Request",
  "CChatRoomGetBanListRequest",
  "CChatRoomGetBanListRequest",
  "",
  sizeof(CChatRoomGetBanListRequest),
  1,
  cchat_room__get_ban_list__request__field_descriptors,
  cchat_room__get_ban_list__request__field_indices_by_name,
  1,  cchat_room__get_ban_list__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_ban_list__response__ban_info__field_descriptors[4] =
{
  {
    "accountid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetBanListResponse__BanInfo, has_accountid),
    offsetof(CChatRoomGetBanListResponse__BanInfo, accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accountid_actor",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetBanListResponse__BanInfo, has_accountid_actor),
    offsetof(CChatRoomGetBanListResponse__BanInfo, accountid_actor),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_banned",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetBanListResponse__BanInfo, has_time_banned),
    offsetof(CChatRoomGetBanListResponse__BanInfo, time_banned),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ban_reason",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetBanListResponse__BanInfo, ban_reason),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_ban_list__response__ban_info__field_indices_by_name[] = {
  0,   /* field[0] = accountid */
  1,   /* field[1] = accountid_actor */
  3,   /* field[3] = ban_reason */
  2,   /* field[2] = time_banned */
};
static const ProtobufCIntRange cchat_room__get_ban_list__response__ban_info__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__get_ban_list__response__ban_info__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetBanList_Response.BanInfo",
  "BanInfo",
  "CChatRoomGetBanListResponse__BanInfo",
  "",
  sizeof(CChatRoomGetBanListResponse__BanInfo),
  4,
  cchat_room__get_ban_list__response__ban_info__field_descriptors,
  cchat_room__get_ban_list__response__ban_info__field_indices_by_name,
  1,  cchat_room__get_ban_list__response__ban_info__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_ban_list__response__field_descriptors[1] =
{
  {
    "bans",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetBanListResponse, n_bans),
    offsetof(CChatRoomGetBanListResponse, bans),
    &cchat_room__get_ban_list__response__ban_info__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_ban_list__response__field_indices_by_name[] = {
  0,   /* field[0] = bans */
};
static const ProtobufCIntRange cchat_room__get_ban_list__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_ban_list__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetBanList_Response",
  "CChatRoomGetBanListResponse",
  "CChatRoomGetBanListResponse",
  "",
  sizeof(CChatRoomGetBanListResponse),
  1,
  cchat_room__get_ban_list__response__field_descriptors,
  cchat_room__get_ban_list__response__field_indices_by_name,
  1,  cchat_room__get_ban_list__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_list__request__field_descriptors[1] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetInviteListRequest, has_chat_group_id),
    offsetof(CChatRoomGetInviteListRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_list__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
};
static const ProtobufCIntRange cchat_room__get_invite_list__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_list__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteList_Request",
  "CChatRoomGetInviteListRequest",
  "CChatRoomGetInviteListRequest",
  "",
  sizeof(CChatRoomGetInviteListRequest),
  1,
  cchat_room__get_invite_list__request__field_descriptors,
  cchat_room__get_invite_list__request__field_indices_by_name,
  1,  cchat_room__get_invite_list__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_group_invite__field_descriptors[3] =
{
  {
    "accountid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGroupInvite, has_accountid),
    offsetof(CChatRoomGroupInvite, accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accountid_actor",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGroupInvite, has_accountid_actor),
    offsetof(CChatRoomGroupInvite, accountid_actor),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "time_invited",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGroupInvite, has_time_invited),
    offsetof(CChatRoomGroupInvite, time_invited),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_group_invite__field_indices_by_name[] = {
  0,   /* field[0] = accountid */
  1,   /* field[1] = accountid_actor */
  2,   /* field[2] = time_invited */
};
static const ProtobufCIntRange cchat_room_group_invite__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room_group_invite__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomGroupInvite",
  "CChatRoomGroupInvite",
  "CChatRoomGroupInvite",
  "",
  sizeof(CChatRoomGroupInvite),
  3,
  cchat_room_group_invite__field_descriptors,
  cchat_room_group_invite__field_indices_by_name,
  1,  cchat_room_group_invite__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_invite_list__response__field_descriptors[1] =
{
  {
    "invites",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomGetInviteListResponse, n_invites),
    offsetof(CChatRoomGetInviteListResponse, invites),
    &cchat_room_group_invite__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_invite_list__response__field_indices_by_name[] = {
  0,   /* field[0] = invites */
};
static const ProtobufCIntRange cchat_room__get_invite_list__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_invite_list__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetInviteList_Response",
  "CChatRoomGetInviteListResponse",
  "CChatRoomGetInviteListResponse",
  "",
  sizeof(CChatRoomGetInviteListResponse),
  1,
  cchat_room__get_invite_list__response__field_descriptors,
  cchat_room__get_invite_list__response__field_indices_by_name,
  1,  cchat_room__get_invite_list__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__delete_invite_link__request__field_descriptors[2] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteInviteLinkRequest, has_chat_group_id),
    offsetof(CChatRoomDeleteInviteLinkRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "invite_code",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomDeleteInviteLinkRequest, invite_code),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__delete_invite_link__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = invite_code */
};
static const ProtobufCIntRange cchat_room__delete_invite_link__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__delete_invite_link__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteInviteLink_Request",
  "CChatRoomDeleteInviteLinkRequest",
  "CChatRoomDeleteInviteLinkRequest",
  "",
  sizeof(CChatRoomDeleteInviteLinkRequest),
  2,
  cchat_room__delete_invite_link__request__field_descriptors,
  cchat_room__delete_invite_link__request__field_indices_by_name,
  1,  cchat_room__delete_invite_link__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__delete_invite_link__response__field_descriptors NULL
#define cchat_room__delete_invite_link__response__field_indices_by_name NULL
#define cchat_room__delete_invite_link__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__delete_invite_link__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteInviteLink_Response",
  "CChatRoomDeleteInviteLinkResponse",
  "CChatRoomDeleteInviteLinkResponse",
  "",
  sizeof(CChatRoomDeleteInviteLinkResponse),
  0,
  cchat_room__delete_invite_link__response__field_descriptors,
  cchat_room__delete_invite_link__response__field_indices_by_name,
  0,  cchat_room__delete_invite_link__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_session_active_chat_room_groups__request__field_descriptors[3] =
{
  {
    "chat_group_ids",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsRequest, n_chat_group_ids),
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsRequest, chat_group_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_groups_data_requested",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsRequest, n_chat_groups_data_requested),
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsRequest, chat_groups_data_requested),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "virtualize_members_threshold",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsRequest, has_virtualize_members_threshold),
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsRequest, virtualize_members_threshold),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_session_active_chat_room_groups__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_ids */
  1,   /* field[1] = chat_groups_data_requested */
  2,   /* field[2] = virtualize_members_threshold */
};
static const ProtobufCIntRange cchat_room__set_session_active_chat_room_groups__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__set_session_active_chat_room_groups__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetSessionActiveChatRoomGroups_Request",
  "CChatRoomSetSessionActiveChatRoomGroupsRequest",
  "CChatRoomSetSessionActiveChatRoomGroupsRequest",
  "",
  sizeof(CChatRoomSetSessionActiveChatRoomGroupsRequest),
  3,
  cchat_room__set_session_active_chat_room_groups__request__field_descriptors,
  cchat_room__set_session_active_chat_room_groups__request__field_indices_by_name,
  1,  cchat_room__set_session_active_chat_room_groups__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_session_active_chat_room_groups__response__field_descriptors[2] =
{
  {
    "chat_states",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsResponse, n_chat_states),
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsResponse, chat_states),
    &cchat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "virtualize_members_chat_group_ids",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsResponse, n_virtualize_members_chat_group_ids),
    offsetof(CChatRoomSetSessionActiveChatRoomGroupsResponse, virtualize_members_chat_group_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_session_active_chat_room_groups__response__field_indices_by_name[] = {
  0,   /* field[0] = chat_states */
  1,   /* field[1] = virtualize_members_chat_group_ids */
};
static const ProtobufCIntRange cchat_room__set_session_active_chat_room_groups__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__set_session_active_chat_room_groups__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetSessionActiveChatRoomGroups_Response",
  "CChatRoomSetSessionActiveChatRoomGroupsResponse",
  "CChatRoomSetSessionActiveChatRoomGroupsResponse",
  "",
  sizeof(CChatRoomSetSessionActiveChatRoomGroupsResponse),
  2,
  cchat_room__set_session_active_chat_room_groups__response__field_descriptors,
  cchat_room__set_session_active_chat_room_groups__response__field_indices_by_name,
  1,  cchat_room__set_session_active_chat_room_groups__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomNotificationLevel cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__desktop_notification_level__default_value = ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid;
static const EChatRoomNotificationLevel cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__mobile_notification_level__default_value = ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid;
static const ProtobufCFieldDescriptor cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__field_descriptors[3] =
{
  {
    "desktop_notification_level",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatGroupPreferences, has_desktop_notification_level),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatGroupPreferences, desktop_notification_level),
    &echat_room_notification_level__descriptor,
    &cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__desktop_notification_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "mobile_notification_level",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatGroupPreferences, has_mobile_notification_level),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatGroupPreferences, mobile_notification_level),
    &echat_room_notification_level__descriptor,
    &cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__mobile_notification_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "unread_indicator_muted",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatGroupPreferences, has_unread_indicator_muted),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatGroupPreferences, unread_indicator_muted),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__field_indices_by_name[] = {
  0,   /* field[0] = desktop_notification_level */
  1,   /* field[1] = mobile_notification_level */
  2,   /* field[2] = unread_indicator_muted */
};
static const ProtobufCIntRange cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences",
  "ChatGroupPreferences",
  "CChatRoomSetUserChatGroupPreferencesRequest__ChatGroupPreferences",
  "",
  sizeof(CChatRoomSetUserChatGroupPreferencesRequest__ChatGroupPreferences),
  3,
  cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__field_descriptors,
  cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__field_indices_by_name,
  1,  cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomNotificationLevel cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__desktop_notification_level__default_value = ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid;
static const EChatRoomNotificationLevel cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__mobile_notification_level__default_value = ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid;
static const ProtobufCFieldDescriptor cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__field_descriptors[4] =
{
  {
    "chat_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences, has_chat_id),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "desktop_notification_level",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences, has_desktop_notification_level),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences, desktop_notification_level),
    &echat_room_notification_level__descriptor,
    &cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__desktop_notification_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "mobile_notification_level",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences, has_mobile_notification_level),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences, mobile_notification_level),
    &echat_room_notification_level__descriptor,
    &cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__mobile_notification_level__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "unread_indicator_muted",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences, has_unread_indicator_muted),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences, unread_indicator_muted),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__field_indices_by_name[] = {
  0,   /* field[0] = chat_id */
  1,   /* field[1] = desktop_notification_level */
  2,   /* field[2] = mobile_notification_level */
  3,   /* field[3] = unread_indicator_muted */
};
static const ProtobufCIntRange cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences",
  "ChatRoomPreferences",
  "CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences",
  "",
  sizeof(CChatRoomSetUserChatGroupPreferencesRequest__ChatRoomPreferences),
  4,
  cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__field_descriptors,
  cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__field_indices_by_name,
  1,  cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__set_user_chat_group_preferences__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest, has_chat_group_id),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_group_preferences",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest, chat_group_preferences),
    &cchat_room__set_user_chat_group_preferences__request__chat_group_preferences__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_room_preferences",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest, n_chat_room_preferences),
    offsetof(CChatRoomSetUserChatGroupPreferencesRequest, chat_room_preferences),
    &cchat_room__set_user_chat_group_preferences__request__chat_room_preferences__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__set_user_chat_group_preferences__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_group_preferences */
  2,   /* field[2] = chat_room_preferences */
};
static const ProtobufCIntRange cchat_room__set_user_chat_group_preferences__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__set_user_chat_group_preferences__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetUserChatGroupPreferences_Request",
  "CChatRoomSetUserChatGroupPreferencesRequest",
  "CChatRoomSetUserChatGroupPreferencesRequest",
  "",
  sizeof(CChatRoomSetUserChatGroupPreferencesRequest),
  3,
  cchat_room__set_user_chat_group_preferences__request__field_descriptors,
  cchat_room__set_user_chat_group_preferences__request__field_indices_by_name,
  1,  cchat_room__set_user_chat_group_preferences__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__set_user_chat_group_preferences__response__field_descriptors NULL
#define cchat_room__set_user_chat_group_preferences__response__field_indices_by_name NULL
#define cchat_room__set_user_chat_group_preferences__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__set_user_chat_group_preferences__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SetUserChatGroupPreferences_Response",
  "CChatRoomSetUserChatGroupPreferencesResponse",
  "CChatRoomSetUserChatGroupPreferencesResponse",
  "",
  sizeof(CChatRoomSetUserChatGroupPreferencesResponse),
  0,
  cchat_room__set_user_chat_group_preferences__response__field_descriptors,
  cchat_room__set_user_chat_group_preferences__response__field_indices_by_name,
  0,  cchat_room__set_user_chat_group_preferences__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__delete_chat_messages__request__message__field_descriptors[2] =
{
  {
    "server_timestamp",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomDeleteChatMessagesRequest__Message, has_server_timestamp),
    offsetof(CChatRoomDeleteChatMessagesRequest__Message, server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomDeleteChatMessagesRequest__Message, has_ordinal),
    offsetof(CChatRoomDeleteChatMessagesRequest__Message, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__delete_chat_messages__request__message__field_indices_by_name[] = {
  1,   /* field[1] = ordinal */
  0,   /* field[0] = server_timestamp */
};
static const ProtobufCIntRange cchat_room__delete_chat_messages__request__message__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__delete_chat_messages__request__message__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteChatMessages_Request.Message",
  "Message",
  "CChatRoomDeleteChatMessagesRequest__Message",
  "",
  sizeof(CChatRoomDeleteChatMessagesRequest__Message),
  2,
  cchat_room__delete_chat_messages__request__message__field_descriptors,
  cchat_room__delete_chat_messages__request__message__field_indices_by_name,
  1,  cchat_room__delete_chat_messages__request__message__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__delete_chat_messages__request__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteChatMessagesRequest, has_chat_group_id),
    offsetof(CChatRoomDeleteChatMessagesRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomDeleteChatMessagesRequest, has_chat_id),
    offsetof(CChatRoomDeleteChatMessagesRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "messages",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomDeleteChatMessagesRequest, n_messages),
    offsetof(CChatRoomDeleteChatMessagesRequest, messages),
    &cchat_room__delete_chat_messages__request__message__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__delete_chat_messages__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  2,   /* field[2] = messages */
};
static const ProtobufCIntRange cchat_room__delete_chat_messages__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__delete_chat_messages__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteChatMessages_Request",
  "CChatRoomDeleteChatMessagesRequest",
  "CChatRoomDeleteChatMessagesRequest",
  "",
  sizeof(CChatRoomDeleteChatMessagesRequest),
  3,
  cchat_room__delete_chat_messages__request__field_descriptors,
  cchat_room__delete_chat_messages__request__field_indices_by_name,
  1,  cchat_room__delete_chat_messages__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
#define cchat_room__delete_chat_messages__response__field_descriptors NULL
#define cchat_room__delete_chat_messages__response__field_indices_by_name NULL
#define cchat_room__delete_chat_messages__response__number_ranges NULL
const ProtobufCMessageDescriptor cchat_room__delete_chat_messages__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_DeleteChatMessages_Response",
  "CChatRoomDeleteChatMessagesResponse",
  "CChatRoomDeleteChatMessagesResponse",
  "",
  sizeof(CChatRoomDeleteChatMessagesResponse),
  0,
  cchat_room__delete_chat_messages__response__field_descriptors,
  cchat_room__delete_chat_messages__response__field_indices_by_name,
  0,  cchat_room__delete_chat_messages__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__update_member_list_view__notification__field_descriptors[8] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomUpdateMemberListViewNotification, has_chat_group_id),
    offsetof(CChatRoomUpdateMemberListViewNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "view_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomUpdateMemberListViewNotification, has_view_id),
    offsetof(CChatRoomUpdateMemberListViewNotification, view_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "start",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomUpdateMemberListViewNotification, has_start),
    offsetof(CChatRoomUpdateMemberListViewNotification, start),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "end",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomUpdateMemberListViewNotification, has_end),
    offsetof(CChatRoomUpdateMemberListViewNotification, end),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_changenumber",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomUpdateMemberListViewNotification, has_client_changenumber),
    offsetof(CChatRoomUpdateMemberListViewNotification, client_changenumber),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "delete_view",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomUpdateMemberListViewNotification, has_delete_view),
    offsetof(CChatRoomUpdateMemberListViewNotification, delete_view),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona_subscribe_accountids",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomUpdateMemberListViewNotification, n_persona_subscribe_accountids),
    offsetof(CChatRoomUpdateMemberListViewNotification, persona_subscribe_accountids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona_unsubscribe_accountids",
    8,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomUpdateMemberListViewNotification, n_persona_unsubscribe_accountids),
    offsetof(CChatRoomUpdateMemberListViewNotification, persona_unsubscribe_accountids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__update_member_list_view__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  4,   /* field[4] = client_changenumber */
  5,   /* field[5] = delete_view */
  3,   /* field[3] = end */
  6,   /* field[6] = persona_subscribe_accountids */
  7,   /* field[7] = persona_unsubscribe_accountids */
  2,   /* field[2] = start */
  1,   /* field[1] = view_id */
};
static const ProtobufCIntRange cchat_room__update_member_list_view__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cchat_room__update_member_list_view__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_UpdateMemberListView_Notification",
  "CChatRoomUpdateMemberListViewNotification",
  "CChatRoomUpdateMemberListViewNotification",
  "",
  sizeof(CChatRoomUpdateMemberListViewNotification),
  8,
  cchat_room__update_member_list_view__notification__field_descriptors,
  cchat_room__update_member_list_view__notification__field_indices_by_name,
  1,  cchat_room__update_member_list_view__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__search_members__request__field_descriptors[4] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSearchMembersRequest, has_chat_group_id),
    offsetof(CChatRoomSearchMembersRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "search_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomSearchMembersRequest, has_search_id),
    offsetof(CChatRoomSearchMembersRequest, search_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "search_text",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSearchMembersRequest, search_text),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "max_results",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomSearchMembersRequest, has_max_results),
    offsetof(CChatRoomSearchMembersRequest, max_results),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__search_members__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  3,   /* field[3] = max_results */
  1,   /* field[1] = search_id */
  2,   /* field[2] = search_text */
};
static const ProtobufCIntRange cchat_room__search_members__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor cchat_room__search_members__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SearchMembers_Request",
  "CChatRoomSearchMembersRequest",
  "CChatRoomSearchMembersRequest",
  "",
  sizeof(CChatRoomSearchMembersRequest),
  4,
  cchat_room__search_members__request__field_descriptors,
  cchat_room__search_members__request__field_indices_by_name,
  1,  cchat_room__search_members__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__search_members__response__member_match__field_descriptors[2] =
{
  {
    "accountid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomSearchMembersResponse__MemberMatch, has_accountid),
    offsetof(CChatRoomSearchMembersResponse__MemberMatch, accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomSearchMembersResponse__MemberMatch, persona),
    &cmsg_client_persona_state__friend__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__search_members__response__member_match__field_indices_by_name[] = {
  0,   /* field[0] = accountid */
  1,   /* field[1] = persona */
};
static const ProtobufCIntRange cchat_room__search_members__response__member_match__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__search_members__response__member_match__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SearchMembers_Response.MemberMatch",
  "MemberMatch",
  "CChatRoomSearchMembersResponse__MemberMatch",
  "",
  sizeof(CChatRoomSearchMembersResponse__MemberMatch),
  2,
  cchat_room__search_members__response__member_match__field_descriptors,
  cchat_room__search_members__response__member_match__field_indices_by_name,
  1,  cchat_room__search_members__response__member_match__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__search_members__response__field_descriptors[2] =
{
  {
    "matching_members",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomSearchMembersResponse, n_matching_members),
    offsetof(CChatRoomSearchMembersResponse, matching_members),
    &cchat_room__search_members__response__member_match__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "status_flags",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomSearchMembersResponse, has_status_flags),
    offsetof(CChatRoomSearchMembersResponse, status_flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__search_members__response__field_indices_by_name[] = {
  0,   /* field[0] = matching_members */
  1,   /* field[1] = status_flags */
};
static const ProtobufCIntRange cchat_room__search_members__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__search_members__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_SearchMembers_Response",
  "CChatRoomSearchMembersResponse",
  "CChatRoomSearchMembersResponse",
  "",
  sizeof(CChatRoomSearchMembersResponse),
  2,
  cchat_room__search_members__response__field_descriptors,
  cchat_room__search_members__response__field_indices_by_name,
  1,  cchat_room__search_members__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomMessageReactionType cchat_room__update_message_reaction__request__reaction_type__default_value = ECHAT_ROOM_MESSAGE_REACTION_TYPE__k_EChatRoomMessageReactionType_Invalid;
static const ProtobufCFieldDescriptor cchat_room__update_message_reaction__request__field_descriptors[7] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomUpdateMessageReactionRequest, has_chat_group_id),
    offsetof(CChatRoomUpdateMessageReactionRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomUpdateMessageReactionRequest, has_chat_id),
    offsetof(CChatRoomUpdateMessageReactionRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_timestamp",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomUpdateMessageReactionRequest, has_server_timestamp),
    offsetof(CChatRoomUpdateMessageReactionRequest, server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomUpdateMessageReactionRequest, has_ordinal),
    offsetof(CChatRoomUpdateMessageReactionRequest, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reaction_type",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomUpdateMessageReactionRequest, has_reaction_type),
    offsetof(CChatRoomUpdateMessageReactionRequest, reaction_type),
    &echat_room_message_reaction_type__descriptor,
    &cchat_room__update_message_reaction__request__reaction_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reaction",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomUpdateMessageReactionRequest, reaction),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_add",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomUpdateMessageReactionRequest, has_is_add),
    offsetof(CChatRoomUpdateMessageReactionRequest, is_add),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__update_message_reaction__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  6,   /* field[6] = is_add */
  3,   /* field[3] = ordinal */
  5,   /* field[5] = reaction */
  4,   /* field[4] = reaction_type */
  2,   /* field[2] = server_timestamp */
};
static const ProtobufCIntRange cchat_room__update_message_reaction__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cchat_room__update_message_reaction__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_UpdateMessageReaction_Request",
  "CChatRoomUpdateMessageReactionRequest",
  "CChatRoomUpdateMessageReactionRequest",
  "",
  sizeof(CChatRoomUpdateMessageReactionRequest),
  7,
  cchat_room__update_message_reaction__request__field_descriptors,
  cchat_room__update_message_reaction__request__field_indices_by_name,
  1,  cchat_room__update_message_reaction__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__update_message_reaction__response__field_descriptors[1] =
{
  {
    "num_reactors",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomUpdateMessageReactionResponse, has_num_reactors),
    offsetof(CChatRoomUpdateMessageReactionResponse, num_reactors),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__update_message_reaction__response__field_indices_by_name[] = {
  0,   /* field[0] = num_reactors */
};
static const ProtobufCIntRange cchat_room__update_message_reaction__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__update_message_reaction__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_UpdateMessageReaction_Response",
  "CChatRoomUpdateMessageReactionResponse",
  "CChatRoomUpdateMessageReactionResponse",
  "",
  sizeof(CChatRoomUpdateMessageReactionResponse),
  1,
  cchat_room__update_message_reaction__response__field_descriptors,
  cchat_room__update_message_reaction__response__field_indices_by_name,
  1,  cchat_room__update_message_reaction__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomMessageReactionType cchat_room__get_message_reaction_reactors__request__reaction_type__default_value = ECHAT_ROOM_MESSAGE_REACTION_TYPE__k_EChatRoomMessageReactionType_Invalid;
static const ProtobufCFieldDescriptor cchat_room__get_message_reaction_reactors__request__field_descriptors[7] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetMessageReactionReactorsRequest, has_chat_group_id),
    offsetof(CChatRoomGetMessageReactionReactorsRequest, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomGetMessageReactionReactorsRequest, has_chat_id),
    offsetof(CChatRoomGetMessageReactionReactorsRequest, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_timestamp",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageReactionReactorsRequest, has_server_timestamp),
    offsetof(CChatRoomGetMessageReactionReactorsRequest, server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageReactionReactorsRequest, has_ordinal),
    offsetof(CChatRoomGetMessageReactionReactorsRequest, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reaction_type",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomGetMessageReactionReactorsRequest, has_reaction_type),
    offsetof(CChatRoomGetMessageReactionReactorsRequest, reaction_type),
    &echat_room_message_reaction_type__descriptor,
    &cchat_room__get_message_reaction_reactors__request__reaction_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reaction",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomGetMessageReactionReactorsRequest, reaction),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "limit",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageReactionReactorsRequest, has_limit),
    offsetof(CChatRoomGetMessageReactionReactorsRequest, limit),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_message_reaction_reactors__request__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  6,   /* field[6] = limit */
  3,   /* field[3] = ordinal */
  5,   /* field[5] = reaction */
  4,   /* field[4] = reaction_type */
  2,   /* field[2] = server_timestamp */
};
static const ProtobufCIntRange cchat_room__get_message_reaction_reactors__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cchat_room__get_message_reaction_reactors__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetMessageReactionReactors_Request",
  "CChatRoomGetMessageReactionReactorsRequest",
  "CChatRoomGetMessageReactionReactorsRequest",
  "",
  sizeof(CChatRoomGetMessageReactionReactorsRequest),
  7,
  cchat_room__get_message_reaction_reactors__request__field_descriptors,
  cchat_room__get_message_reaction_reactors__request__field_indices_by_name,
  1,  cchat_room__get_message_reaction_reactors__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__get_message_reaction_reactors__response__field_descriptors[1] =
{
  {
    "reactors",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomGetMessageReactionReactorsResponse, n_reactors),
    offsetof(CChatRoomGetMessageReactionReactorsResponse, reactors),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__get_message_reaction_reactors__response__field_indices_by_name[] = {
  0,   /* field[0] = reactors */
};
static const ProtobufCIntRange cchat_room__get_message_reaction_reactors__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__get_message_reaction_reactors__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_GetMessageReactionReactors_Response",
  "CChatRoomGetMessageReactionReactorsResponse",
  "CChatRoomGetMessageReactionReactorsResponse",
  "",
  sizeof(CChatRoomGetMessageReactionReactorsResponse),
  1,
  cchat_room__get_message_reaction_reactors__response__field_descriptors,
  cchat_room__get_message_reaction_reactors__response__field_indices_by_name,
  1,  cchat_room__get_message_reaction_reactors__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const protobuf_c_boolean cclan_chat_rooms__get_clan_chat_room_info__request__autocreate__default_value = 1;
static const ProtobufCFieldDescriptor cclan_chat_rooms__get_clan_chat_room_info__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CClanChatRoomsGetClanChatRoomInfoRequest, has_steamid),
    offsetof(CClanChatRoomsGetClanChatRoomInfoRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "autocreate",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CClanChatRoomsGetClanChatRoomInfoRequest, has_autocreate),
    offsetof(CClanChatRoomsGetClanChatRoomInfoRequest, autocreate),
    NULL,
    &cclan_chat_rooms__get_clan_chat_room_info__request__autocreate__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cclan_chat_rooms__get_clan_chat_room_info__request__field_indices_by_name[] = {
  1,   /* field[1] = autocreate */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cclan_chat_rooms__get_clan_chat_room_info__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cclan_chat_rooms__get_clan_chat_room_info__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CClanChatRooms_GetClanChatRoomInfo_Request",
  "CClanChatRoomsGetClanChatRoomInfoRequest",
  "CClanChatRoomsGetClanChatRoomInfoRequest",
  "",
  sizeof(CClanChatRoomsGetClanChatRoomInfoRequest),
  2,
  cclan_chat_rooms__get_clan_chat_room_info__request__field_descriptors,
  cclan_chat_rooms__get_clan_chat_room_info__request__field_indices_by_name,
  1,  cclan_chat_rooms__get_clan_chat_room_info__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cclan_chat_rooms__get_clan_chat_room_info__response__field_descriptors[1] =
{
  {
    "chat_group_summary",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CClanChatRoomsGetClanChatRoomInfoResponse, chat_group_summary),
    &cchat_room__get_chat_room_group_summary__response__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cclan_chat_rooms__get_clan_chat_room_info__response__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_summary */
};
static const ProtobufCIntRange cclan_chat_rooms__get_clan_chat_room_info__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cclan_chat_rooms__get_clan_chat_room_info__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CClanChatRooms_GetClanChatRoomInfo_Response",
  "CClanChatRoomsGetClanChatRoomInfoResponse",
  "CClanChatRoomsGetClanChatRoomInfoResponse",
  "",
  sizeof(CClanChatRoomsGetClanChatRoomInfoResponse),
  1,
  cclan_chat_rooms__get_clan_chat_room_info__response__field_descriptors,
  cclan_chat_rooms__get_clan_chat_room_info__response__field_indices_by_name,
  1,  cclan_chat_rooms__get_clan_chat_room_info__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cclan_chat_rooms__set_clan_chat_room_private__request__field_descriptors[2] =
{
  {
    "steamid",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CClanChatRoomsSetClanChatRoomPrivateRequest, has_steamid),
    offsetof(CClanChatRoomsSetClanChatRoomPrivateRequest, steamid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_room_private",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CClanChatRoomsSetClanChatRoomPrivateRequest, has_chat_room_private),
    offsetof(CClanChatRoomsSetClanChatRoomPrivateRequest, chat_room_private),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cclan_chat_rooms__set_clan_chat_room_private__request__field_indices_by_name[] = {
  1,   /* field[1] = chat_room_private */
  0,   /* field[0] = steamid */
};
static const ProtobufCIntRange cclan_chat_rooms__set_clan_chat_room_private__request__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cclan_chat_rooms__set_clan_chat_room_private__request__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CClanChatRooms_SetClanChatRoomPrivate_Request",
  "CClanChatRoomsSetClanChatRoomPrivateRequest",
  "CClanChatRoomsSetClanChatRoomPrivateRequest",
  "",
  sizeof(CClanChatRoomsSetClanChatRoomPrivateRequest),
  2,
  cclan_chat_rooms__set_clan_chat_room_private__request__field_descriptors,
  cclan_chat_rooms__set_clan_chat_room_private__request__field_indices_by_name,
  1,  cclan_chat_rooms__set_clan_chat_room_private__request__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cclan_chat_rooms__set_clan_chat_room_private__response__field_descriptors[1] =
{
  {
    "chat_room_private",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CClanChatRoomsSetClanChatRoomPrivateResponse, has_chat_room_private),
    offsetof(CClanChatRoomsSetClanChatRoomPrivateResponse, chat_room_private),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cclan_chat_rooms__set_clan_chat_room_private__response__field_indices_by_name[] = {
  0,   /* field[0] = chat_room_private */
};
static const ProtobufCIntRange cclan_chat_rooms__set_clan_chat_room_private__response__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cclan_chat_rooms__set_clan_chat_room_private__response__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CClanChatRooms_SetClanChatRoomPrivate_Response",
  "CClanChatRoomsSetClanChatRoomPrivateResponse",
  "CClanChatRoomsSetClanChatRoomPrivateResponse",
  "",
  sizeof(CClanChatRoomsSetClanChatRoomPrivateResponse),
  1,
  cclan_chat_rooms__set_clan_chat_room_private__response__field_descriptors,
  cclan_chat_rooms__set_clan_chat_room_private__response__field_indices_by_name,
  1,  cclan_chat_rooms__set_clan_chat_room_private__response__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_mentions__field_descriptors[3] =
{
  {
    "mention_all",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatMentions, has_mention_all),
    offsetof(CChatMentions, mention_all),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "mention_here",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatMentions, has_mention_here),
    offsetof(CChatMentions, mention_here),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "mention_accountids",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatMentions, n_mention_accountids),
    offsetof(CChatMentions, mention_accountids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_mentions__field_indices_by_name[] = {
  2,   /* field[2] = mention_accountids */
  0,   /* field[0] = mention_all */
  1,   /* field[1] = mention_here */
};
static const ProtobufCIntRange cchat_mentions__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_mentions__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatMentions",
  "CChatMentions",
  "CChatMentions",
  "",
  sizeof(CChatMentions),
  3,
  cchat_mentions__field_descriptors,
  cchat_mentions__field_indices_by_name,
  1,  cchat_mentions__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__incoming_chat_message__notification__field_descriptors[10] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomIncomingChatMessageNotification, has_chat_group_id),
    offsetof(CChatRoomIncomingChatMessageNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomIncomingChatMessageNotification, has_chat_id),
    offsetof(CChatRoomIncomingChatMessageNotification, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "steamid_sender",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomIncomingChatMessageNotification, has_steamid_sender),
    offsetof(CChatRoomIncomingChatMessageNotification, steamid_sender),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomIncomingChatMessageNotification, message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "timestamp",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomIncomingChatMessageNotification, has_timestamp),
    offsetof(CChatRoomIncomingChatMessageNotification, timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "mentions",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomIncomingChatMessageNotification, mentions),
    &cchat_mentions__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomIncomingChatMessageNotification, has_ordinal),
    offsetof(CChatRoomIncomingChatMessageNotification, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_message",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomIncomingChatMessageNotification, server_message),
    &server_message__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "message_no_bbcode",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomIncomingChatMessageNotification, message_no_bbcode),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_name",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomIncomingChatMessageNotification, chat_name),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__incoming_chat_message__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  9,   /* field[9] = chat_name */
  5,   /* field[5] = mentions */
  3,   /* field[3] = message */
  8,   /* field[8] = message_no_bbcode */
  6,   /* field[6] = ordinal */
  7,   /* field[7] = server_message */
  2,   /* field[2] = steamid_sender */
  4,   /* field[4] = timestamp */
};
static const ProtobufCIntRange cchat_room__incoming_chat_message__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 10 }
};
const ProtobufCMessageDescriptor cchat_room__incoming_chat_message__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_IncomingChatMessage_Notification",
  "CChatRoomIncomingChatMessageNotification",
  "CChatRoomIncomingChatMessageNotification",
  "",
  sizeof(CChatRoomIncomingChatMessageNotification),
  10,
  cchat_room__incoming_chat_message__notification__field_descriptors,
  cchat_room__incoming_chat_message__notification__field_indices_by_name,
  1,  cchat_room__incoming_chat_message__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__chat_message_modified__notification__chat_message__field_descriptors[3] =
{
  {
    "server_timestamp",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomChatMessageModifiedNotification__ChatMessage, has_server_timestamp),
    offsetof(CChatRoomChatMessageModifiedNotification__ChatMessage, server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomChatMessageModifiedNotification__ChatMessage, has_ordinal),
    offsetof(CChatRoomChatMessageModifiedNotification__ChatMessage, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "deleted",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomChatMessageModifiedNotification__ChatMessage, has_deleted),
    offsetof(CChatRoomChatMessageModifiedNotification__ChatMessage, deleted),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__chat_message_modified__notification__chat_message__field_indices_by_name[] = {
  2,   /* field[2] = deleted */
  1,   /* field[1] = ordinal */
  0,   /* field[0] = server_timestamp */
};
static const ProtobufCIntRange cchat_room__chat_message_modified__notification__chat_message__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__chat_message_modified__notification__chat_message__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ChatMessageModified_Notification.ChatMessage",
  "ChatMessage",
  "CChatRoomChatMessageModifiedNotification__ChatMessage",
  "",
  sizeof(CChatRoomChatMessageModifiedNotification__ChatMessage),
  3,
  cchat_room__chat_message_modified__notification__chat_message__field_descriptors,
  cchat_room__chat_message_modified__notification__chat_message__field_indices_by_name,
  1,  cchat_room__chat_message_modified__notification__chat_message__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__chat_message_modified__notification__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomChatMessageModifiedNotification, has_chat_group_id),
    offsetof(CChatRoomChatMessageModifiedNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomChatMessageModifiedNotification, has_chat_id),
    offsetof(CChatRoomChatMessageModifiedNotification, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "messages",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomChatMessageModifiedNotification, n_messages),
    offsetof(CChatRoomChatMessageModifiedNotification, messages),
    &cchat_room__chat_message_modified__notification__chat_message__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__chat_message_modified__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  2,   /* field[2] = messages */
};
static const ProtobufCIntRange cchat_room__chat_message_modified__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__chat_message_modified__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ChatMessageModified_Notification",
  "CChatRoomChatMessageModifiedNotification",
  "CChatRoomChatMessageModifiedNotification",
  "",
  sizeof(CChatRoomChatMessageModifiedNotification),
  3,
  cchat_room__chat_message_modified__notification__field_descriptors,
  cchat_room__chat_message_modified__notification__field_indices_by_name,
  1,  cchat_room__chat_message_modified__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomMemberStateChange cchat_room__member_state_change__notification__change__default_value = ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Invalid;
static const ProtobufCFieldDescriptor cchat_room__member_state_change__notification__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomMemberStateChangeNotification, has_chat_group_id),
    offsetof(CChatRoomMemberStateChangeNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "member",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomMemberStateChangeNotification, member),
    &cchat_room_member__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "change",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomMemberStateChangeNotification, has_change),
    offsetof(CChatRoomMemberStateChangeNotification, change),
    &echat_room_member_state_change__descriptor,
    &cchat_room__member_state_change__notification__change__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__member_state_change__notification__field_indices_by_name[] = {
  2,   /* field[2] = change */
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = member */
};
static const ProtobufCIntRange cchat_room__member_state_change__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__member_state_change__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_MemberStateChange_Notification",
  "CChatRoomMemberStateChangeNotification",
  "CChatRoomMemberStateChangeNotification",
  "",
  sizeof(CChatRoomMemberStateChangeNotification),
  3,
  cchat_room__member_state_change__notification__field_descriptors,
  cchat_room__member_state_change__notification__field_indices_by_name,
  1,  cchat_room__member_state_change__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__chat_room_header_state__notification__field_descriptors[1] =
{
  {
    "header_state",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomChatRoomHeaderStateNotification, header_state),
    &cchat_room_group_header_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__chat_room_header_state__notification__field_indices_by_name[] = {
  0,   /* field[0] = header_state */
};
static const ProtobufCIntRange cchat_room__chat_room_header_state__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_room__chat_room_header_state__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ChatRoomHeaderState_Notification",
  "CChatRoomChatRoomHeaderStateNotification",
  "CChatRoomChatRoomHeaderStateNotification",
  "",
  sizeof(CChatRoomChatRoomHeaderStateNotification),
  1,
  cchat_room__chat_room_header_state__notification__field_descriptors,
  cchat_room__chat_room_header_state__notification__field_indices_by_name,
  1,  cchat_room__chat_room_header_state__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__chat_room_group_rooms_change__notification__field_descriptors[3] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomChatRoomGroupRoomsChangeNotification, has_chat_group_id),
    offsetof(CChatRoomChatRoomGroupRoomsChangeNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "default_chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomChatRoomGroupRoomsChangeNotification, has_default_chat_id),
    offsetof(CChatRoomChatRoomGroupRoomsChangeNotification, default_chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_rooms",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomChatRoomGroupRoomsChangeNotification, n_chat_rooms),
    offsetof(CChatRoomChatRoomGroupRoomsChangeNotification, chat_rooms),
    &cchat_room_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__chat_room_group_rooms_change__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = chat_rooms */
  1,   /* field[1] = default_chat_id */
};
static const ProtobufCIntRange cchat_room__chat_room_group_rooms_change__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room__chat_room_group_rooms_change__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_ChatRoomGroupRoomsChange_Notification",
  "CChatRoomChatRoomGroupRoomsChangeNotification",
  "CChatRoomChatRoomGroupRoomsChangeNotification",
  "",
  sizeof(CChatRoomChatRoomGroupRoomsChangeNotification),
  3,
  cchat_room__chat_room_group_rooms_change__notification__field_descriptors,
  cchat_room__chat_room_group_rooms_change__notification__field_indices_by_name,
  1,  cchat_room__chat_room_group_rooms_change__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__field_descriptors[2] =
{
  {
    "chat_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification, has_chat_id),
    offsetof(CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_group_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification, has_chat_group_id),
    offsetof(CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__field_indices_by_name[] = {
  1,   /* field[1] = chat_group_id */
  0,   /* field[0] = chat_id */
};
static const ProtobufCIntRange cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification",
  "CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification",
  "CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification",
  "",
  sizeof(CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification),
  2,
  cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__field_descriptors,
  cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__field_indices_by_name,
  1,  cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomMemberStateChange chat_room_client__notify_chat_group_user_state_changed__notification__user_action__default_value = ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Invalid;
static const ProtobufCFieldDescriptor chat_room_client__notify_chat_group_user_state_changed__notification__field_descriptors[4] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(ChatRoomClientNotifyChatGroupUserStateChangedNotification, has_chat_group_id),
    offsetof(ChatRoomClientNotifyChatGroupUserStateChangedNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "user_chat_group_state",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(ChatRoomClientNotifyChatGroupUserStateChangedNotification, user_chat_group_state),
    &cuser_chat_room_group_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "group_summary",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(ChatRoomClientNotifyChatGroupUserStateChangedNotification, group_summary),
    &cchat_room__get_chat_room_group_summary__response__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "user_action",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(ChatRoomClientNotifyChatGroupUserStateChangedNotification, has_user_action),
    offsetof(ChatRoomClientNotifyChatGroupUserStateChangedNotification, user_action),
    &echat_room_member_state_change__descriptor,
    &chat_room_client__notify_chat_group_user_state_changed__notification__user_action__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned chat_room_client__notify_chat_group_user_state_changed__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  2,   /* field[2] = group_summary */
  3,   /* field[3] = user_action */
  1,   /* field[1] = user_chat_group_state */
};
static const ProtobufCIntRange chat_room_client__notify_chat_group_user_state_changed__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor chat_room_client__notify_chat_group_user_state_changed__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ChatRoomClient_NotifyChatGroupUserStateChanged_Notification",
  "ChatRoomClientNotifyChatGroupUserStateChangedNotification",
  "ChatRoomClientNotifyChatGroupUserStateChangedNotification",
  "",
  sizeof(ChatRoomClientNotifyChatGroupUserStateChangedNotification),
  4,
  chat_room_client__notify_chat_group_user_state_changed__notification__field_descriptors,
  chat_room_client__notify_chat_group_user_state_changed__notification__field_indices_by_name,
  1,  chat_room_client__notify_chat_group_user_state_changed__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor chat_room_client__notify_chat_room_disconnect__notification__field_descriptors[1] =
{
  {
    "chat_group_ids",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(ChatRoomClientNotifyChatRoomDisconnectNotification, n_chat_group_ids),
    offsetof(ChatRoomClientNotifyChatRoomDisconnectNotification, chat_group_ids),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned chat_room_client__notify_chat_room_disconnect__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_ids */
};
static const ProtobufCIntRange chat_room_client__notify_chat_room_disconnect__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor chat_room_client__notify_chat_room_disconnect__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "ChatRoomClient_NotifyChatRoomDisconnect_Notification",
  "ChatRoomClientNotifyChatRoomDisconnectNotification",
  "ChatRoomClientNotifyChatRoomDisconnectNotification",
  "",
  sizeof(ChatRoomClientNotifyChatRoomDisconnectNotification),
  1,
  chat_room_client__notify_chat_room_disconnect__notification__field_descriptors,
  chat_room_client__notify_chat_room_disconnect__notification__field_indices_by_name,
  1,  chat_room_client__notify_chat_room_disconnect__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_member_list_view__field_descriptors[5] =
{
  {
    "start",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMemberListView, has_start),
    offsetof(CChatRoomMemberListView, start),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "end",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMemberListView, has_end),
    offsetof(CChatRoomMemberListView, end),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "total_count",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMemberListView, has_total_count),
    offsetof(CChatRoomMemberListView, total_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_changenumber",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMemberListView, has_client_changenumber),
    offsetof(CChatRoomMemberListView, client_changenumber),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_changenumber",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMemberListView, has_server_changenumber),
    offsetof(CChatRoomMemberListView, server_changenumber),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_member_list_view__field_indices_by_name[] = {
  3,   /* field[3] = client_changenumber */
  1,   /* field[1] = end */
  4,   /* field[4] = server_changenumber */
  0,   /* field[0] = start */
  2,   /* field[2] = total_count */
};
static const ProtobufCIntRange cchat_room_member_list_view__number_ranges[1 + 1] =
{
  { 3, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cchat_room_member_list_view__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomMemberListView",
  "CChatRoomMemberListView",
  "CChatRoomMemberListView",
  "",
  sizeof(CChatRoomMemberListView),
  5,
  cchat_room_member_list_view__field_descriptors,
  cchat_room_member_list_view__field_indices_by_name,
  1,  cchat_room_member_list_view__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_member_summary_counts__field_descriptors[3] =
{
  {
    "ingame",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMemberSummaryCounts, has_ingame),
    offsetof(CChatRoomMemberSummaryCounts, ingame),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "online",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMemberSummaryCounts, has_online),
    offsetof(CChatRoomMemberSummaryCounts, online),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "offline",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomMemberSummaryCounts, has_offline),
    offsetof(CChatRoomMemberSummaryCounts, offline),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_member_summary_counts__field_indices_by_name[] = {
  0,   /* field[0] = ingame */
  2,   /* field[2] = offline */
  1,   /* field[1] = online */
};
static const ProtobufCIntRange cchat_room_member_summary_counts__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room_member_summary_counts__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomMemberSummaryCounts",
  "CChatRoomMemberSummaryCounts",
  "CChatRoomMemberSummaryCounts",
  "",
  sizeof(CChatRoomMemberSummaryCounts),
  3,
  cchat_room_member_summary_counts__field_descriptors,
  cchat_room_member_summary_counts__field_indices_by_name,
  1,  cchat_room_member_summary_counts__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_client__member_list_view_updated__notification__member_list_view_entry__field_descriptors[3] =
{
  {
    "rank",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatRoomClientMemberListViewUpdatedNotification__MemberListViewEntry, has_rank),
    offsetof(CChatRoomClientMemberListViewUpdatedNotification__MemberListViewEntry, rank),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "accountid",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomClientMemberListViewUpdatedNotification__MemberListViewEntry, has_accountid),
    offsetof(CChatRoomClientMemberListViewUpdatedNotification__MemberListViewEntry, accountid),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "persona",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomClientMemberListViewUpdatedNotification__MemberListViewEntry, persona),
    &cmsg_client_persona_state__friend__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_client__member_list_view_updated__notification__member_list_view_entry__field_indices_by_name[] = {
  1,   /* field[1] = accountid */
  2,   /* field[2] = persona */
  0,   /* field[0] = rank */
};
static const ProtobufCIntRange cchat_room_client__member_list_view_updated__notification__member_list_view_entry__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor cchat_room_client__member_list_view_updated__notification__member_list_view_entry__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry",
  "MemberListViewEntry",
  "CChatRoomClientMemberListViewUpdatedNotification__MemberListViewEntry",
  "",
  sizeof(CChatRoomClientMemberListViewUpdatedNotification__MemberListViewEntry),
  3,
  cchat_room_client__member_list_view_updated__notification__member_list_view_entry__field_descriptors,
  cchat_room_client__member_list_view_updated__notification__member_list_view_entry__field_indices_by_name,
  1,  cchat_room_client__member_list_view_updated__notification__member_list_view_entry__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_room_client__member_list_view_updated__notification__field_descriptors[7] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, has_chat_group_id),
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "view_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, has_view_id),
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, view_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "view",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, view),
    &cchat_room_member_list_view__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "members",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, n_members),
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, members),
    &cchat_room_client__member_list_view_updated__notification__member_list_view_entry__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "status_flags",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, has_status_flags),
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, status_flags),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "member_summary",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, member_summary),
    &cchat_room_member_summary_counts__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "subscribed_personas",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, n_subscribed_personas),
    offsetof(CChatRoomClientMemberListViewUpdatedNotification, subscribed_personas),
    &cmsg_client_persona_state__friend__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room_client__member_list_view_updated__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  5,   /* field[5] = member_summary */
  3,   /* field[3] = members */
  4,   /* field[4] = status_flags */
  6,   /* field[6] = subscribed_personas */
  2,   /* field[2] = view */
  1,   /* field[1] = view_id */
};
static const ProtobufCIntRange cchat_room_client__member_list_view_updated__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor cchat_room_client__member_list_view_updated__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoomClient_MemberListViewUpdated_Notification",
  "CChatRoomClientMemberListViewUpdatedNotification",
  "CChatRoomClientMemberListViewUpdatedNotification",
  "",
  sizeof(CChatRoomClientMemberListViewUpdatedNotification),
  7,
  cchat_room_client__member_list_view_updated__notification__field_descriptors,
  cchat_room_client__member_list_view_updated__notification__field_indices_by_name,
  1,  cchat_room_client__member_list_view_updated__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const EChatRoomMessageReactionType cchat_room__message_reaction__notification__reaction_type__default_value = ECHAT_ROOM_MESSAGE_REACTION_TYPE__k_EChatRoomMessageReactionType_Invalid;
static const ProtobufCFieldDescriptor cchat_room__message_reaction__notification__field_descriptors[8] =
{
  {
    "chat_group_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomMessageReactionNotification, has_chat_group_id),
    offsetof(CChatRoomMessageReactionNotification, chat_group_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_id",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(CChatRoomMessageReactionNotification, has_chat_id),
    offsetof(CChatRoomMessageReactionNotification, chat_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "server_timestamp",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomMessageReactionNotification, has_server_timestamp),
    offsetof(CChatRoomMessageReactionNotification, server_timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ordinal",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatRoomMessageReactionNotification, has_ordinal),
    offsetof(CChatRoomMessageReactionNotification, ordinal),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reactor",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FIXED64,
    offsetof(CChatRoomMessageReactionNotification, has_reactor),
    offsetof(CChatRoomMessageReactionNotification, reactor),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reaction_type",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(CChatRoomMessageReactionNotification, has_reaction_type),
    offsetof(CChatRoomMessageReactionNotification, reaction_type),
    &echat_room_message_reaction_type__descriptor,
    &cchat_room__message_reaction__notification__reaction_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "reaction",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(CChatRoomMessageReactionNotification, reaction),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "is_add",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatRoomMessageReactionNotification, has_is_add),
    offsetof(CChatRoomMessageReactionNotification, is_add),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_room__message_reaction__notification__field_indices_by_name[] = {
  0,   /* field[0] = chat_group_id */
  1,   /* field[1] = chat_id */
  7,   /* field[7] = is_add */
  3,   /* field[3] = ordinal */
  6,   /* field[6] = reaction */
  5,   /* field[5] = reaction_type */
  4,   /* field[4] = reactor */
  2,   /* field[2] = server_timestamp */
};
static const ProtobufCIntRange cchat_room__message_reaction__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cchat_room__message_reaction__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatRoom_MessageReaction_Notification",
  "CChatRoomMessageReactionNotification",
  "CChatRoomMessageReactionNotification",
  "",
  sizeof(CChatRoomMessageReactionNotification),
  8,
  cchat_room__message_reaction__notification__field_descriptors,
  cchat_room__message_reaction__notification__field_indices_by_name,
  1,  cchat_room__message_reaction__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_usability__client_usability_metrics__notification__settings__field_descriptors[25] =
{
  {
    "notifications_show_ingame",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_notifications_show_ingame),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, notifications_show_ingame),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "notifications_show_online",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_notifications_show_online),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, notifications_show_online),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "notifications_show_message",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_notifications_show_message),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, notifications_show_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "notifications_events_and_announcements",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_notifications_events_and_announcements),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, notifications_events_and_announcements),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sounds_play_ingame",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_sounds_play_ingame),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, sounds_play_ingame),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sounds_play_online",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_sounds_play_online),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, sounds_play_online),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sounds_play_message",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_sounds_play_message),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, sounds_play_message),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sounds_events_and_announcements",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_sounds_events_and_announcements),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, sounds_events_and_announcements),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "always_new_chat_window",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_always_new_chat_window),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, always_new_chat_window),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "force_alphabetic_friend_sorting",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_force_alphabetic_friend_sorting),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, force_alphabetic_friend_sorting),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_flash_mode",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_chat_flash_mode),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, chat_flash_mode),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "remember_open_chats",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_remember_open_chats),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, remember_open_chats),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "compact_quick_access",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_compact_quick_access),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, compact_quick_access),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "compact_friends_list",
    14,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_compact_friends_list),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, compact_friends_list),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "notifications_show_chat_room_notification",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_notifications_show_chat_room_notification),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, notifications_show_chat_room_notification),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sounds_play_chat_room_notification",
    16,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_sounds_play_chat_room_notification),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, sounds_play_chat_room_notification),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "hide_offline_friends_in_tag_groups",
    17,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_hide_offline_friends_in_tag_groups),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, hide_offline_friends_in_tag_groups),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "hide_categorized_friends",
    18,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_hide_categorized_friends),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, hide_categorized_friends),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "categorize_in_game_friends_by_game",
    19,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_categorize_in_game_friends_by_game),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, categorize_in_game_friends_by_game),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_font_size",
    20,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_chat_font_size),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, chat_font_size),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "use24hour_clock",
    21,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_use24hour_clock),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, use24hour_clock),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "do_not_disturb_mode",
    22,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_do_not_disturb_mode),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, do_not_disturb_mode),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "disable_embed_inlining",
    23,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_disable_embed_inlining),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, disable_embed_inlining),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sign_into_friends",
    24,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_sign_into_friends),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, sign_into_friends),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "animated_avatars",
    25,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, has_animated_avatars),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Settings, animated_avatars),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_usability__client_usability_metrics__notification__settings__field_indices_by_name[] = {
  8,   /* field[8] = always_new_chat_window */
  24,   /* field[24] = animated_avatars */
  18,   /* field[18] = categorize_in_game_friends_by_game */
  10,   /* field[10] = chat_flash_mode */
  19,   /* field[19] = chat_font_size */
  13,   /* field[13] = compact_friends_list */
  12,   /* field[12] = compact_quick_access */
  22,   /* field[22] = disable_embed_inlining */
  21,   /* field[21] = do_not_disturb_mode */
  9,   /* field[9] = force_alphabetic_friend_sorting */
  17,   /* field[17] = hide_categorized_friends */
  16,   /* field[16] = hide_offline_friends_in_tag_groups */
  3,   /* field[3] = notifications_events_and_announcements */
  14,   /* field[14] = notifications_show_chat_room_notification */
  0,   /* field[0] = notifications_show_ingame */
  2,   /* field[2] = notifications_show_message */
  1,   /* field[1] = notifications_show_online */
  11,   /* field[11] = remember_open_chats */
  23,   /* field[23] = sign_into_friends */
  7,   /* field[7] = sounds_events_and_announcements */
  15,   /* field[15] = sounds_play_chat_room_notification */
  4,   /* field[4] = sounds_play_ingame */
  6,   /* field[6] = sounds_play_message */
  5,   /* field[5] = sounds_play_online */
  20,   /* field[20] = use24hour_clock */
};
static const ProtobufCIntRange cchat_usability__client_usability_metrics__notification__settings__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 25 }
};
const ProtobufCMessageDescriptor cchat_usability__client_usability_metrics__notification__settings__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatUsability_ClientUsabilityMetrics_Notification.Settings",
  "Settings",
  "CChatUsabilityClientUsabilityMetricsNotification__Settings",
  "",
  sizeof(CChatUsabilityClientUsabilityMetricsNotification__Settings),
  25,
  cchat_usability__client_usability_metrics__notification__settings__field_descriptors,
  cchat_usability__client_usability_metrics__notification__settings__field_indices_by_name,
  1,  cchat_usability__client_usability_metrics__notification__settings__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_usability__client_usability_metrics__notification__voice_settings__field_descriptors[11] =
{
  {
    "voice_input_gain",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FLOAT,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_voice_input_gain),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, voice_input_gain),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "voice_output_gain",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_FLOAT,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_voice_output_gain),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, voice_output_gain),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "noise_gate_level",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_noise_gate_level),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, noise_gate_level),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "voice_use_echo_cancellation",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_voice_use_echo_cancellation),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, voice_use_echo_cancellation),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "voice_use_noise_cancellation",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_voice_use_noise_cancellation),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, voice_use_noise_cancellation),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "voice_use_auto_gain_control",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_voice_use_auto_gain_control),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, voice_use_auto_gain_control),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "selected_non_default_mic",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_selected_non_default_mic),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, selected_non_default_mic),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "selected_non_default_output",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_selected_non_default_output),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, selected_non_default_output),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "push_to_talk_enabled",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_push_to_talk_enabled),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, push_to_talk_enabled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "push_to_mute_enabled",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_push_to_mute_enabled),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, push_to_mute_enabled),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "play_ptt_sounds",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, has_play_ptt_sounds),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings, play_ptt_sounds),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_usability__client_usability_metrics__notification__voice_settings__field_indices_by_name[] = {
  2,   /* field[2] = noise_gate_level */
  10,   /* field[10] = play_ptt_sounds */
  9,   /* field[9] = push_to_mute_enabled */
  8,   /* field[8] = push_to_talk_enabled */
  6,   /* field[6] = selected_non_default_mic */
  7,   /* field[7] = selected_non_default_output */
  0,   /* field[0] = voice_input_gain */
  1,   /* field[1] = voice_output_gain */
  5,   /* field[5] = voice_use_auto_gain_control */
  3,   /* field[3] = voice_use_echo_cancellation */
  4,   /* field[4] = voice_use_noise_cancellation */
};
static const ProtobufCIntRange cchat_usability__client_usability_metrics__notification__voice_settings__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 11 }
};
const ProtobufCMessageDescriptor cchat_usability__client_usability_metrics__notification__voice_settings__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings",
  "VoiceSettings",
  "CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings",
  "",
  sizeof(CChatUsabilityClientUsabilityMetricsNotification__VoiceSettings),
  11,
  cchat_usability__client_usability_metrics__notification__voice_settings__field_descriptors,
  cchat_usability__client_usability_metrics__notification__voice_settings__field_indices_by_name,
  1,  cchat_usability__client_usability_metrics__notification__voice_settings__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_usability__client_usability_metrics__notification__uistate__category_collapse_state__field_descriptors[5] =
{
  {
    "in_game_collapsed",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, has_in_game_collapsed),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, in_game_collapsed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "online_collapsed",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, has_online_collapsed),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, online_collapsed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "offline_collapsed",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, has_offline_collapsed),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, offline_collapsed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_groups_collapsed",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, has_game_groups_collapsed),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, game_groups_collapsed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "categories_collapsed",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, has_categories_collapsed),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState, categories_collapsed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_usability__client_usability_metrics__notification__uistate__category_collapse_state__field_indices_by_name[] = {
  4,   /* field[4] = categories_collapsed */
  3,   /* field[3] = game_groups_collapsed */
  0,   /* field[0] = in_game_collapsed */
  2,   /* field[2] = offline_collapsed */
  1,   /* field[1] = online_collapsed */
};
static const ProtobufCIntRange cchat_usability__client_usability_metrics__notification__uistate__category_collapse_state__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 5 }
};
const ProtobufCMessageDescriptor cchat_usability__client_usability_metrics__notification__uistate__category_collapse_state__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState",
  "CategoryCollapseState",
  "CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState",
  "",
  sizeof(CChatUsabilityClientUsabilityMetricsNotification__UIState__CategoryCollapseState),
  5,
  cchat_usability__client_usability_metrics__notification__uistate__category_collapse_state__field_descriptors,
  cchat_usability__client_usability_metrics__notification__uistate__category_collapse_state__field_indices_by_name,
  1,  cchat_usability__client_usability_metrics__notification__uistate__category_collapse_state__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_usability__client_usability_metrics__notification__uistate__field_descriptors[16] =
{
  {
    "friends_list_height",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_friends_list_height),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, friends_list_height),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_list_width",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_friends_list_width),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, friends_list_width),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_list_docked",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_friends_list_docked),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, friends_list_docked),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_list_collapsed",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_friends_list_collapsed),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, friends_list_collapsed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_list_group_chats_height",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_friends_list_group_chats_height),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, friends_list_group_chats_height),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_list_visible",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_friends_list_visible),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, friends_list_visible),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_popups_opened",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_chat_popups_opened),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, chat_popups_opened),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "group_chat_tabs_opened",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_group_chat_tabs_opened),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, group_chat_tabs_opened),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friend_chat_tabs_opened",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_friend_chat_tabs_opened),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, friend_chat_tabs_opened),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_window_width",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_chat_window_width),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, chat_window_width),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "chat_window_height",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_chat_window_height),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, chat_window_height),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "category_collapse",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, category_collapse),
    &cchat_usability__client_usability_metrics__notification__uistate__category_collapse_state__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "group_chat_left_col_collapsed",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_group_chat_left_col_collapsed),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, group_chat_left_col_collapsed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "group_chat_right_col_collapsed",
    14,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_group_chat_right_col_collapsed),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, group_chat_right_col_collapsed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "in_one_on_one_voice_chat",
    15,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_in_one_on_one_voice_chat),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, in_one_on_one_voice_chat),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "in_group_voice_chat",
    16,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, has_in_group_voice_chat),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__UIState, in_group_voice_chat),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_usability__client_usability_metrics__notification__uistate__field_indices_by_name[] = {
  11,   /* field[11] = category_collapse */
  6,   /* field[6] = chat_popups_opened */
  10,   /* field[10] = chat_window_height */
  9,   /* field[9] = chat_window_width */
  8,   /* field[8] = friend_chat_tabs_opened */
  3,   /* field[3] = friends_list_collapsed */
  2,   /* field[2] = friends_list_docked */
  4,   /* field[4] = friends_list_group_chats_height */
  0,   /* field[0] = friends_list_height */
  5,   /* field[5] = friends_list_visible */
  1,   /* field[1] = friends_list_width */
  12,   /* field[12] = group_chat_left_col_collapsed */
  13,   /* field[13] = group_chat_right_col_collapsed */
  7,   /* field[7] = group_chat_tabs_opened */
  15,   /* field[15] = in_group_voice_chat */
  14,   /* field[14] = in_one_on_one_voice_chat */
};
static const ProtobufCIntRange cchat_usability__client_usability_metrics__notification__uistate__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 16 }
};
const ProtobufCMessageDescriptor cchat_usability__client_usability_metrics__notification__uistate__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatUsability_ClientUsabilityMetrics_Notification.UIState",
  "UIState",
  "CChatUsabilityClientUsabilityMetricsNotification__UIState",
  "",
  sizeof(CChatUsabilityClientUsabilityMetricsNotification__UIState),
  16,
  cchat_usability__client_usability_metrics__notification__uistate__field_descriptors,
  cchat_usability__client_usability_metrics__notification__uistate__field_indices_by_name,
  1,  cchat_usability__client_usability_metrics__notification__uistate__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_usability__client_usability_metrics__notification__metrics__field_descriptors[10] =
{
  {
    "friends_count",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_friends_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, friends_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_category_count",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_friends_category_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, friends_category_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_categorized_count",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_friends_categorized_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, friends_categorized_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_online_count",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_friends_online_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, friends_online_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_in_game_count",
    5,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_friends_in_game_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, friends_in_game_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_in_game_singleton_count",
    6,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_friends_in_game_singleton_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, friends_in_game_singleton_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "game_group_count",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_game_group_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, game_group_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "friends_favorite_count",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_friends_favorite_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, friends_favorite_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "group_chat_count",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_group_chat_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, group_chat_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "group_chat_favorite_count",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_INT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, has_group_chat_favorite_count),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification__Metrics, group_chat_favorite_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_usability__client_usability_metrics__notification__metrics__field_indices_by_name[] = {
  2,   /* field[2] = friends_categorized_count */
  1,   /* field[1] = friends_category_count */
  0,   /* field[0] = friends_count */
  7,   /* field[7] = friends_favorite_count */
  4,   /* field[4] = friends_in_game_count */
  5,   /* field[5] = friends_in_game_singleton_count */
  3,   /* field[3] = friends_online_count */
  6,   /* field[6] = game_group_count */
  8,   /* field[8] = group_chat_count */
  9,   /* field[9] = group_chat_favorite_count */
};
static const ProtobufCIntRange cchat_usability__client_usability_metrics__notification__metrics__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 10 }
};
const ProtobufCMessageDescriptor cchat_usability__client_usability_metrics__notification__metrics__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatUsability_ClientUsabilityMetrics_Notification.Metrics",
  "Metrics",
  "CChatUsabilityClientUsabilityMetricsNotification__Metrics",
  "",
  sizeof(CChatUsabilityClientUsabilityMetricsNotification__Metrics),
  10,
  cchat_usability__client_usability_metrics__notification__metrics__field_descriptors,
  cchat_usability__client_usability_metrics__notification__metrics__field_indices_by_name,
  1,  cchat_usability__client_usability_metrics__notification__metrics__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_usability__client_usability_metrics__notification__field_descriptors[8] =
{
  {
    "metrics_run_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, has_metrics_run_id),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, metrics_run_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "client_build",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, has_client_build),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, client_build),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "metrics_version",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, has_metrics_version),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, metrics_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "in_web",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, has_in_web),
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, in_web),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "settings",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, settings),
    &cchat_usability__client_usability_metrics__notification__settings__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "voice_settings",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, voice_settings),
    &cchat_usability__client_usability_metrics__notification__voice_settings__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ui_state",
    12,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, ui_state),
    &cchat_usability__client_usability_metrics__notification__uistate__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "metrics",
    13,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(CChatUsabilityClientUsabilityMetricsNotification, metrics),
    &cchat_usability__client_usability_metrics__notification__metrics__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_usability__client_usability_metrics__notification__field_indices_by_name[] = {
  1,   /* field[1] = client_build */
  3,   /* field[3] = in_web */
  7,   /* field[7] = metrics */
  0,   /* field[0] = metrics_run_id */
  2,   /* field[2] = metrics_version */
  4,   /* field[4] = settings */
  6,   /* field[6] = ui_state */
  5,   /* field[5] = voice_settings */
};
static const ProtobufCIntRange cchat_usability__client_usability_metrics__notification__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 10, 4 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor cchat_usability__client_usability_metrics__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatUsability_ClientUsabilityMetrics_Notification",
  "CChatUsabilityClientUsabilityMetricsNotification",
  "CChatUsabilityClientUsabilityMetricsNotification",
  "",
  sizeof(CChatUsabilityClientUsabilityMetricsNotification),
  8,
  cchat_usability__client_usability_metrics__notification__field_descriptors,
  cchat_usability__client_usability_metrics__notification__field_indices_by_name,
  2,  cchat_usability__client_usability_metrics__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor cchat_usability__request_client_usability_metrics__notification__field_descriptors[1] =
{
  {
    "metrics_run_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CChatUsabilityRequestClientUsabilityMetricsNotification, has_metrics_run_id),
    offsetof(CChatUsabilityRequestClientUsabilityMetricsNotification, metrics_run_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned cchat_usability__request_client_usability_metrics__notification__field_indices_by_name[] = {
  0,   /* field[0] = metrics_run_id */
};
static const ProtobufCIntRange cchat_usability__request_client_usability_metrics__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor cchat_usability__request_client_usability_metrics__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CChatUsability_RequestClientUsabilityMetrics_Notification",
  "CChatUsabilityRequestClientUsabilityMetricsNotification",
  "CChatUsabilityRequestClientUsabilityMetricsNotification",
  "",
  sizeof(CChatUsabilityRequestClientUsabilityMetricsNotification),
  1,
  cchat_usability__request_client_usability_metrics__notification__field_descriptors,
  cchat_usability__request_client_usability_metrics__notification__field_indices_by_name,
  1,  cchat_usability__request_client_usability_metrics__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCEnumValue echat_room_join_state__enum_values_by_number[4] =
{
  { "k_EChatRoomJoinState_Default", "ECHAT_ROOM_JOIN_STATE__k_EChatRoomJoinState_Default", 0 },
  { "k_EChatRoomJoinState_None", "ECHAT_ROOM_JOIN_STATE__k_EChatRoomJoinState_None", 1 },
  { "k_EChatRoomJoinState_Joined", "ECHAT_ROOM_JOIN_STATE__k_EChatRoomJoinState_Joined", 2 },
  { "k_EChatRoomJoinState_TestInvalid", "ECHAT_ROOM_JOIN_STATE__k_EChatRoomJoinState_TestInvalid", 99 },
};
static const ProtobufCIntRange echat_room_join_state__value_ranges[] = {
{0, 0},{99, 3},{0, 4}
};
static const ProtobufCEnumValueIndex echat_room_join_state__enum_values_by_name[4] =
{
  { "k_EChatRoomJoinState_Default", 0 },
  { "k_EChatRoomJoinState_Joined", 2 },
  { "k_EChatRoomJoinState_None", 1 },
  { "k_EChatRoomJoinState_TestInvalid", 3 },
};
const ProtobufCEnumDescriptor echat_room_join_state__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EChatRoomJoinState",
  "EChatRoomJoinState",
  "EChatRoomJoinState",
  "",
  4,
  echat_room_join_state__enum_values_by_number,
  4,
  echat_room_join_state__enum_values_by_name,
  2,
  echat_room_join_state__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue echat_room_group_rank__enum_values_by_number[8] =
{
  { "k_EChatRoomGroupRank_Default", "ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Default", 0 },
  { "k_EChatRoomGroupRank_Viewer", "ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Viewer", 10 },
  { "k_EChatRoomGroupRank_Guest", "ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Guest", 15 },
  { "k_EChatRoomGroupRank_Member", "ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Member", 20 },
  { "k_EChatRoomGroupRank_Moderator", "ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Moderator", 30 },
  { "k_EChatRoomGroupRank_Officer", "ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Officer", 40 },
  { "k_EChatRoomGroupRank_Owner", "ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_Owner", 50 },
  { "k_EChatRoomGroupRank_TestInvalid", "ECHAT_ROOM_GROUP_RANK__k_EChatRoomGroupRank_TestInvalid", 99 },
};
static const ProtobufCIntRange echat_room_group_rank__value_ranges[] = {
{0, 0},{10, 1},{15, 2},{20, 3},{30, 4},{40, 5},{50, 6},{99, 7},{0, 8}
};
static const ProtobufCEnumValueIndex echat_room_group_rank__enum_values_by_name[8] =
{
  { "k_EChatRoomGroupRank_Default", 0 },
  { "k_EChatRoomGroupRank_Guest", 2 },
  { "k_EChatRoomGroupRank_Member", 3 },
  { "k_EChatRoomGroupRank_Moderator", 4 },
  { "k_EChatRoomGroupRank_Officer", 5 },
  { "k_EChatRoomGroupRank_Owner", 6 },
  { "k_EChatRoomGroupRank_TestInvalid", 7 },
  { "k_EChatRoomGroupRank_Viewer", 1 },
};
const ProtobufCEnumDescriptor echat_room_group_rank__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EChatRoomGroupRank",
  "EChatRoomGroupRank",
  "EChatRoomGroupRank",
  "",
  8,
  echat_room_group_rank__enum_values_by_number,
  8,
  echat_room_group_rank__enum_values_by_name,
  8,
  echat_room_group_rank__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue echat_room_notification_level__enum_values_by_number[5] =
{
  { "k_EChatroomNotificationLevel_Invalid", "ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_Invalid", 0 },
  { "k_EChatroomNotificationLevel_None", "ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_None", 1 },
  { "k_EChatroomNotificationLevel_MentionMe", "ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_MentionMe", 2 },
  { "k_EChatroomNotificationLevel_MentionAll", "ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_MentionAll", 3 },
  { "k_EChatroomNotificationLevel_AllMessages", "ECHAT_ROOM_NOTIFICATION_LEVEL__k_EChatroomNotificationLevel_AllMessages", 4 },
};
static const ProtobufCIntRange echat_room_notification_level__value_ranges[] = {
{0, 0},{0, 5}
};
static const ProtobufCEnumValueIndex echat_room_notification_level__enum_values_by_name[5] =
{
  { "k_EChatroomNotificationLevel_AllMessages", 4 },
  { "k_EChatroomNotificationLevel_Invalid", 0 },
  { "k_EChatroomNotificationLevel_MentionAll", 3 },
  { "k_EChatroomNotificationLevel_MentionMe", 2 },
  { "k_EChatroomNotificationLevel_None", 1 },
};
const ProtobufCEnumDescriptor echat_room_notification_level__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EChatRoomNotificationLevel",
  "EChatRoomNotificationLevel",
  "EChatRoomNotificationLevel",
  "",
  5,
  echat_room_notification_level__enum_values_by_number,
  5,
  echat_room_notification_level__enum_values_by_name,
  1,
  echat_room_notification_level__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue echat_room_server_message__enum_values_by_number[10] =
{
  { "k_EChatRoomServerMsg_Invalid", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_Invalid", 0 },
  { "k_EChatRoomServerMsg_RenameChatRoom", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_RenameChatRoom", 1 },
  { "k_EChatRoomServerMsg_Joined", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_Joined", 2 },
  { "k_EChatRoomServerMsg_Parted", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_Parted", 3 },
  { "k_EChatRoomServerMsg_Kicked", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_Kicked", 4 },
  { "k_EChatRoomServerMsg_Invited", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_Invited", 5 },
  { "k_EChatRoomServerMsg_InviteDismissed", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_InviteDismissed", 8 },
  { "k_EChatRoomServerMsg_ChatRoomTaglineChanged", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_ChatRoomTaglineChanged", 9 },
  { "k_EChatRoomServerMsg_ChatRoomAvatarChanged", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_ChatRoomAvatarChanged", 10 },
  { "k_EChatRoomServerMsg_AppCustom", "ECHAT_ROOM_SERVER_MESSAGE__k_EChatRoomServerMsg_AppCustom", 11 },
};
static const ProtobufCIntRange echat_room_server_message__value_ranges[] = {
{0, 0},{8, 6},{0, 10}
};
static const ProtobufCEnumValueIndex echat_room_server_message__enum_values_by_name[10] =
{
  { "k_EChatRoomServerMsg_AppCustom", 9 },
  { "k_EChatRoomServerMsg_ChatRoomAvatarChanged", 8 },
  { "k_EChatRoomServerMsg_ChatRoomTaglineChanged", 7 },
  { "k_EChatRoomServerMsg_Invalid", 0 },
  { "k_EChatRoomServerMsg_InviteDismissed", 6 },
  { "k_EChatRoomServerMsg_Invited", 5 },
  { "k_EChatRoomServerMsg_Joined", 2 },
  { "k_EChatRoomServerMsg_Kicked", 4 },
  { "k_EChatRoomServerMsg_Parted", 3 },
  { "k_EChatRoomServerMsg_RenameChatRoom", 1 },
};
const ProtobufCEnumDescriptor echat_room_server_message__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EChatRoomServerMessage",
  "EChatRoomServerMessage",
  "EChatRoomServerMessage",
  "",
  10,
  echat_room_server_message__enum_values_by_number,
  10,
  echat_room_server_message__enum_values_by_name,
  2,
  echat_room_server_message__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue echat_room_message_reaction_type__enum_values_by_number[3] =
{
  { "k_EChatRoomMessageReactionType_Invalid", "ECHAT_ROOM_MESSAGE_REACTION_TYPE__k_EChatRoomMessageReactionType_Invalid", 0 },
  { "k_EChatRoomMessageReactionType_Emoticon", "ECHAT_ROOM_MESSAGE_REACTION_TYPE__k_EChatRoomMessageReactionType_Emoticon", 1 },
  { "k_EChatRoomMessageReactionType_Sticker", "ECHAT_ROOM_MESSAGE_REACTION_TYPE__k_EChatRoomMessageReactionType_Sticker", 2 },
};
static const ProtobufCIntRange echat_room_message_reaction_type__value_ranges[] = {
{0, 0},{0, 3}
};
static const ProtobufCEnumValueIndex echat_room_message_reaction_type__enum_values_by_name[3] =
{
  { "k_EChatRoomMessageReactionType_Emoticon", 1 },
  { "k_EChatRoomMessageReactionType_Invalid", 0 },
  { "k_EChatRoomMessageReactionType_Sticker", 2 },
};
const ProtobufCEnumDescriptor echat_room_message_reaction_type__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EChatRoomMessageReactionType",
  "EChatRoomMessageReactionType",
  "EChatRoomMessageReactionType",
  "",
  3,
  echat_room_message_reaction_type__enum_values_by_number,
  3,
  echat_room_message_reaction_type__enum_values_by_name,
  1,
  echat_room_message_reaction_type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue echat_room_member_state_change__enum_values_by_number[10] =
{
  { "k_EChatRoomMemberStateChange_Invalid", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Invalid", 0 },
  { "k_EChatRoomMemberStateChange_Joined", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Joined", 1 },
  { "k_EChatRoomMemberStateChange_Parted", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Parted", 2 },
  { "k_EChatRoomMemberStateChange_Kicked", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Kicked", 3 },
  { "k_EChatRoomMemberStateChange_Invited", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Invited", 4 },
  { "k_EChatRoomMemberStateChange_RankChanged", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_RankChanged", 7 },
  { "k_EChatRoomMemberStateChange_InviteDismissed", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_InviteDismissed", 8 },
  { "k_EChatRoomMemberStateChange_Muted", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Muted", 9 },
  { "k_EChatRoomMemberStateChange_Banned", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_Banned", 10 },
  { "k_EChatRoomMemberStateChange_RolesChanged", "ECHAT_ROOM_MEMBER_STATE_CHANGE__k_EChatRoomMemberStateChange_RolesChanged", 12 },
};
static const ProtobufCIntRange echat_room_member_state_change__value_ranges[] = {
{0, 0},{7, 5},{12, 9},{0, 10}
};
static const ProtobufCEnumValueIndex echat_room_member_state_change__enum_values_by_name[10] =
{
  { "k_EChatRoomMemberStateChange_Banned", 8 },
  { "k_EChatRoomMemberStateChange_Invalid", 0 },
  { "k_EChatRoomMemberStateChange_InviteDismissed", 6 },
  { "k_EChatRoomMemberStateChange_Invited", 4 },
  { "k_EChatRoomMemberStateChange_Joined", 1 },
  { "k_EChatRoomMemberStateChange_Kicked", 3 },
  { "k_EChatRoomMemberStateChange_Muted", 7 },
  { "k_EChatRoomMemberStateChange_Parted", 2 },
  { "k_EChatRoomMemberStateChange_RankChanged", 5 },
  { "k_EChatRoomMemberStateChange_RolesChanged", 9 },
};
const ProtobufCEnumDescriptor echat_room_member_state_change__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "EChatRoomMemberStateChange",
  "EChatRoomMemberStateChange",
  "EChatRoomMemberStateChange",
  "",
  10,
  echat_room_member_state_change__enum_values_by_number,
  10,
  echat_room_member_state_change__enum_values_by_name,
  3,
  echat_room_member_state_change__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCMethodDescriptor chat__method_descriptors[1] =
{
  { "RequestFriendPersonaStates", &cchat__request_friend_persona_states__request__descriptor, &cchat__request_friend_persona_states__response__descriptor },
};
const unsigned chat__method_indices_by_name[] = {
  0         /* RequestFriendPersonaStates */
};
const ProtobufCServiceDescriptor chat__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "Chat",
  "Chat",
  "Chat",
  "",
  1,
  chat__method_descriptors,
  chat__method_indices_by_name
};
void chat__request_friend_persona_states(ProtobufCService *service,
                                         const CChatRequestFriendPersonaStatesRequest *input,
                                         CChatRequestFriendPersonaStatesResponse_Closure closure,
                                         void *closure_data)
{
  assert(service->descriptor == &chat__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat__init (Chat_Service *service,
                 Chat_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &chat__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
static const ProtobufCMethodDescriptor chat_room__method_descriptors[53] =
{
  { "CreateChatRoomGroup", &cchat_room__create_chat_room_group__request__descriptor, &cchat_room__create_chat_room_group__response__descriptor },
  { "SaveChatRoomGroup", &cchat_room__save_chat_room_group__request__descriptor, &cchat_room__save_chat_room_group__response__descriptor },
  { "RenameChatRoomGroup", &cchat_room__rename_chat_room_group__request__descriptor, &cchat_room__rename_chat_room_group__response__descriptor },
  { "SetChatRoomGroupTagline", &cchat_room__set_chat_room_group_tagline__request__descriptor, &cchat_room__set_chat_room_group_tagline__response__descriptor },
  { "SetChatRoomGroupAvatar", &cchat_room__set_chat_room_group_avatar__request__descriptor, &cchat_room__set_chat_room_group_avatar__response__descriptor },
  { "SetChatRoomGroupWatchingBroadcast", &cchat_room__set_chat_room_group_watching_broadcast__request__descriptor, &cchat_room__set_chat_room_group_watching_broadcast__response__descriptor },
  { "JoinMiniGameForChatRoomGroup", &cchat_room__join_mini_game_for_chat_room_group__request__descriptor, &cchat_room__join_mini_game_for_chat_room_group__response__descriptor },
  { "EndMiniGameForChatRoomGroup", &cchat_room__end_mini_game_for_chat_room_group__request__descriptor, &cchat_room__end_mini_game_for_chat_room_group__response__descriptor },
  { "MuteUserInGroup", &cchat_room__mute_user__request__descriptor, &cchat_room__mute_user__response__descriptor },
  { "KickUserFromGroup", &cchat_room__kick_user__request__descriptor, &cchat_room__kick_user__response__descriptor },
  { "SetUserBanState", &cchat_room__set_user_ban_state__request__descriptor, &cchat_room__set_user_ban_state__response__descriptor },
  { "RevokeInviteToGroup", &cchat_room__revoke_invite__request__descriptor, &cchat_room__revoke_invite__response__descriptor },
  { "CreateRole", &cchat_room__create_role__request__descriptor, &cchat_room__create_role__response__descriptor },
  { "GetRoles", &cchat_room__get_roles__request__descriptor, &cchat_room__get_roles__response__descriptor },
  { "RenameRole", &cchat_room__rename_role__request__descriptor, &cchat_room__rename_role__response__descriptor },
  { "ReorderRole", &cchat_room__reorder_role__request__descriptor, &cchat_room__reorder_role__response__descriptor },
  { "DeleteRole", &cchat_room__delete_role__request__descriptor, &cchat_room__delete_role__response__descriptor },
  { "GetRoleActions", &cchat_room__get_role_actions__request__descriptor, &cchat_room__get_role_actions__response__descriptor },
  { "ReplaceRoleActions", &cchat_room__replace_role_actions__request__descriptor, &cchat_room__replace_role_actions__response__descriptor },
  { "AddRoleToUser", &cchat_room__add_role_to_user__request__descriptor, &cchat_room__add_role_to_user__response__descriptor },
  { "GetRolesForUser", &cchat_room__get_roles_for_user__request__descriptor, &cchat_room__get_roles_for_user__response__descriptor },
  { "DeleteRoleFromUser", &cchat_room__delete_role_from_user__request__descriptor, &cchat_room__delete_role_from_user__response__descriptor },
  { "JoinChatRoomGroup", &cchat_room__join_chat_room_group__request__descriptor, &cchat_room__join_chat_room_group__response__descriptor },
  { "InviteFriendToChatRoomGroup", &cchat_room__invite_friend_to_chat_room_group__request__descriptor, &cchat_room__invite_friend_to_chat_room_group__response__descriptor },
  { "LeaveChatRoomGroup", &cchat_room__leave_chat_room_group__request__descriptor, &cchat_room__leave_chat_room_group__response__descriptor },
  { "CreateChatRoom", &cchat_room__create_chat_room__request__descriptor, &cchat_room__create_chat_room__response__descriptor },
  { "DeleteChatRoom", &cchat_room__delete_chat_room__request__descriptor, &cchat_room__delete_chat_room__response__descriptor },
  { "RenameChatRoom", &cchat_room__rename_chat_room__request__descriptor, &cchat_room__rename_chat_room__response__descriptor },
  { "ReorderChatRoom", &cchat_room__reorder_chat_room__request__descriptor, &cchat_room__reorder_chat_room__response__descriptor },
  { "SendChatMessage", &cchat_room__send_chat_message__request__descriptor, &cchat_room__send_chat_message__response__descriptor },
  { "JoinVoiceChat", &cchat_room__join_voice_chat__request__descriptor, &cchat_room__join_voice_chat__response__descriptor },
  { "LeaveVoiceChat", &cchat_room__leave_voice_chat__request__descriptor, &cchat_room__leave_voice_chat__response__descriptor },
  { "GetMessageHistory", &cchat_room__get_message_history__request__descriptor, &cchat_room__get_message_history__response__descriptor },
  { "GetMyChatRoomGroups", &cchat_room__get_my_chat_room_groups__request__descriptor, &cchat_room__get_my_chat_room_groups__response__descriptor },
  { "GetChatRoomGroupState", &cchat_room__get_chat_room_group_state__request__descriptor, &cchat_room__get_chat_room_group_state__response__descriptor },
  { "GetChatRoomGroupSummary", &cchat_room__get_chat_room_group_summary__request__descriptor, &cchat_room__get_chat_room_group_summary__response__descriptor },
  { "SetAppChatRoomGroupForceActive", &cchat_room__set_app_chat_room_group_force_active__request__descriptor, &cchat_room__set_app_chat_room_group_force_active__response__descriptor },
  { "SetAppChatRoomGroupStopForceActive", &cchat_room__set_app_chat_room_group_stop_force_active__notification__descriptor, &no_response__descriptor },
  { "AckChatMessage", &cchat_room__ack_chat_message__notification__descriptor, &no_response__descriptor },
  { "CreateInviteLink", &cchat_room__create_invite_link__request__descriptor, &cchat_room__create_invite_link__response__descriptor },
  { "GetInviteLinkInfo", &cchat_room__get_invite_link_info__request__descriptor, &cchat_room__get_invite_link_info__response__descriptor },
  { "GetInviteInfo", &cchat_room__get_invite_info__request__descriptor, &cchat_room__get_invite_info__response__descriptor },
  { "GetInviteLinksForGroup", &cchat_room__get_invite_links_for_group__request__descriptor, &cchat_room__get_invite_links_for_group__response__descriptor },
  { "GetBanList", &cchat_room__get_ban_list__request__descriptor, &cchat_room__get_ban_list__response__descriptor },
  { "GetInviteList", &cchat_room__get_invite_list__request__descriptor, &cchat_room__get_invite_list__response__descriptor },
  { "DeleteInviteLink", &cchat_room__delete_invite_link__request__descriptor, &cchat_room__delete_invite_link__response__descriptor },
  { "SetSessionActiveChatRoomGroups", &cchat_room__set_session_active_chat_room_groups__request__descriptor, &cchat_room__set_session_active_chat_room_groups__response__descriptor },
  { "SetUserChatGroupPreferences", &cchat_room__set_user_chat_group_preferences__request__descriptor, &cchat_room__set_user_chat_group_preferences__response__descriptor },
  { "DeleteChatMessages", &cchat_room__delete_chat_messages__request__descriptor, &cchat_room__delete_chat_messages__response__descriptor },
  { "UpdateMemberListView", &cchat_room__update_member_list_view__notification__descriptor, &no_response__descriptor },
  { "SearchMembers", &cchat_room__search_members__request__descriptor, &cchat_room__search_members__response__descriptor },
  { "UpdateMessageReaction", &cchat_room__update_message_reaction__request__descriptor, &cchat_room__update_message_reaction__response__descriptor },
  { "GetMessageReactionReactors", &cchat_room__get_message_reaction_reactors__request__descriptor, &cchat_room__get_message_reaction_reactors__response__descriptor },
};
const unsigned chat_room__method_indices_by_name[] = {
  38,        /* AckChatMessage */
  19,        /* AddRoleToUser */
  25,        /* CreateChatRoom */
  0,        /* CreateChatRoomGroup */
  39,        /* CreateInviteLink */
  12,        /* CreateRole */
  48,        /* DeleteChatMessages */
  26,        /* DeleteChatRoom */
  45,        /* DeleteInviteLink */
  16,        /* DeleteRole */
  21,        /* DeleteRoleFromUser */
  7,        /* EndMiniGameForChatRoomGroup */
  43,        /* GetBanList */
  34,        /* GetChatRoomGroupState */
  35,        /* GetChatRoomGroupSummary */
  41,        /* GetInviteInfo */
  40,        /* GetInviteLinkInfo */
  42,        /* GetInviteLinksForGroup */
  44,        /* GetInviteList */
  32,        /* GetMessageHistory */
  52,        /* GetMessageReactionReactors */
  33,        /* GetMyChatRoomGroups */
  17,        /* GetRoleActions */
  13,        /* GetRoles */
  20,        /* GetRolesForUser */
  23,        /* InviteFriendToChatRoomGroup */
  22,        /* JoinChatRoomGroup */
  6,        /* JoinMiniGameForChatRoomGroup */
  30,        /* JoinVoiceChat */
  9,        /* KickUserFromGroup */
  24,        /* LeaveChatRoomGroup */
  31,        /* LeaveVoiceChat */
  8,        /* MuteUserInGroup */
  27,        /* RenameChatRoom */
  2,        /* RenameChatRoomGroup */
  14,        /* RenameRole */
  28,        /* ReorderChatRoom */
  15,        /* ReorderRole */
  18,        /* ReplaceRoleActions */
  11,        /* RevokeInviteToGroup */
  1,        /* SaveChatRoomGroup */
  50,        /* SearchMembers */
  29,        /* SendChatMessage */
  36,        /* SetAppChatRoomGroupForceActive */
  37,        /* SetAppChatRoomGroupStopForceActive */
  4,        /* SetChatRoomGroupAvatar */
  3,        /* SetChatRoomGroupTagline */
  5,        /* SetChatRoomGroupWatchingBroadcast */
  46,        /* SetSessionActiveChatRoomGroups */
  10,        /* SetUserBanState */
  47,        /* SetUserChatGroupPreferences */
  49,        /* UpdateMemberListView */
  51         /* UpdateMessageReaction */
};
const ProtobufCServiceDescriptor chat_room__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "ChatRoom",
  "ChatRoom",
  "ChatRoom",
  "",
  53,
  chat_room__method_descriptors,
  chat_room__method_indices_by_name
};
void chat_room__create_chat_room_group(ProtobufCService *service,
                                       const CChatRoomCreateChatRoomGroupRequest *input,
                                       CChatRoomCreateChatRoomGroupResponse_Closure closure,
                                       void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__save_chat_room_group(ProtobufCService *service,
                                     const CChatRoomSaveChatRoomGroupRequest *input,
                                     CChatRoomSaveChatRoomGroupResponse_Closure closure,
                                     void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 1, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__rename_chat_room_group(ProtobufCService *service,
                                       const CChatRoomRenameChatRoomGroupRequest *input,
                                       CChatRoomRenameChatRoomGroupResponse_Closure closure,
                                       void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 2, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__set_chat_room_group_tagline(ProtobufCService *service,
                                            const CChatRoomSetChatRoomGroupTaglineRequest *input,
                                            CChatRoomSetChatRoomGroupTaglineResponse_Closure closure,
                                            void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 3, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__set_chat_room_group_avatar(ProtobufCService *service,
                                           const CChatRoomSetChatRoomGroupAvatarRequest *input,
                                           CChatRoomSetChatRoomGroupAvatarResponse_Closure closure,
                                           void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 4, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__set_chat_room_group_watching_broadcast(ProtobufCService *service,
                                                       const CChatRoomSetChatRoomGroupWatchingBroadcastRequest *input,
                                                       CChatRoomSetChatRoomGroupWatchingBroadcastResponse_Closure closure,
                                                       void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 5, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__join_mini_game_for_chat_room_group(ProtobufCService *service,
                                                   const CChatRoomJoinMiniGameForChatRoomGroupRequest *input,
                                                   CChatRoomJoinMiniGameForChatRoomGroupResponse_Closure closure,
                                                   void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 6, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__end_mini_game_for_chat_room_group(ProtobufCService *service,
                                                  const CChatRoomEndMiniGameForChatRoomGroupRequest *input,
                                                  CChatRoomEndMiniGameForChatRoomGroupResponse_Closure closure,
                                                  void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 7, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__mute_user_in_group(ProtobufCService *service,
                                   const CChatRoomMuteUserRequest *input,
                                   CChatRoomMuteUserResponse_Closure closure,
                                   void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 8, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__kick_user_from_group(ProtobufCService *service,
                                     const CChatRoomKickUserRequest *input,
                                     CChatRoomKickUserResponse_Closure closure,
                                     void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 9, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__set_user_ban_state(ProtobufCService *service,
                                   const CChatRoomSetUserBanStateRequest *input,
                                   CChatRoomSetUserBanStateResponse_Closure closure,
                                   void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 10, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__revoke_invite_to_group(ProtobufCService *service,
                                       const CChatRoomRevokeInviteRequest *input,
                                       CChatRoomRevokeInviteResponse_Closure closure,
                                       void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 11, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__create_role(ProtobufCService *service,
                            const CChatRoomCreateRoleRequest *input,
                            CChatRoomCreateRoleResponse_Closure closure,
                            void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 12, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_roles(ProtobufCService *service,
                          const CChatRoomGetRolesRequest *input,
                          CChatRoomGetRolesResponse_Closure closure,
                          void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 13, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__rename_role(ProtobufCService *service,
                            const CChatRoomRenameRoleRequest *input,
                            CChatRoomRenameRoleResponse_Closure closure,
                            void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 14, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__reorder_role(ProtobufCService *service,
                             const CChatRoomReorderRoleRequest *input,
                             CChatRoomReorderRoleResponse_Closure closure,
                             void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 15, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__delete_role(ProtobufCService *service,
                            const CChatRoomDeleteRoleRequest *input,
                            CChatRoomDeleteRoleResponse_Closure closure,
                            void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 16, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_role_actions(ProtobufCService *service,
                                 const CChatRoomGetRoleActionsRequest *input,
                                 CChatRoomGetRoleActionsResponse_Closure closure,
                                 void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 17, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__replace_role_actions(ProtobufCService *service,
                                     const CChatRoomReplaceRoleActionsRequest *input,
                                     CChatRoomReplaceRoleActionsResponse_Closure closure,
                                     void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 18, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__add_role_to_user(ProtobufCService *service,
                                 const CChatRoomAddRoleToUserRequest *input,
                                 CChatRoomAddRoleToUserResponse_Closure closure,
                                 void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 19, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_roles_for_user(ProtobufCService *service,
                                   const CChatRoomGetRolesForUserRequest *input,
                                   CChatRoomGetRolesForUserResponse_Closure closure,
                                   void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 20, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__delete_role_from_user(ProtobufCService *service,
                                      const CChatRoomDeleteRoleFromUserRequest *input,
                                      CChatRoomDeleteRoleFromUserResponse_Closure closure,
                                      void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 21, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__join_chat_room_group(ProtobufCService *service,
                                     const CChatRoomJoinChatRoomGroupRequest *input,
                                     CChatRoomJoinChatRoomGroupResponse_Closure closure,
                                     void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 22, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__invite_friend_to_chat_room_group(ProtobufCService *service,
                                                 const CChatRoomInviteFriendToChatRoomGroupRequest *input,
                                                 CChatRoomInviteFriendToChatRoomGroupResponse_Closure closure,
                                                 void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 23, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__leave_chat_room_group(ProtobufCService *service,
                                      const CChatRoomLeaveChatRoomGroupRequest *input,
                                      CChatRoomLeaveChatRoomGroupResponse_Closure closure,
                                      void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 24, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__create_chat_room(ProtobufCService *service,
                                 const CChatRoomCreateChatRoomRequest *input,
                                 CChatRoomCreateChatRoomResponse_Closure closure,
                                 void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 25, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__delete_chat_room(ProtobufCService *service,
                                 const CChatRoomDeleteChatRoomRequest *input,
                                 CChatRoomDeleteChatRoomResponse_Closure closure,
                                 void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 26, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__rename_chat_room(ProtobufCService *service,
                                 const CChatRoomRenameChatRoomRequest *input,
                                 CChatRoomRenameChatRoomResponse_Closure closure,
                                 void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 27, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__reorder_chat_room(ProtobufCService *service,
                                  const CChatRoomReorderChatRoomRequest *input,
                                  CChatRoomReorderChatRoomResponse_Closure closure,
                                  void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 28, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__send_chat_message(ProtobufCService *service,
                                  const CChatRoomSendChatMessageRequest *input,
                                  CChatRoomSendChatMessageResponse_Closure closure,
                                  void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 29, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__join_voice_chat(ProtobufCService *service,
                                const CChatRoomJoinVoiceChatRequest *input,
                                CChatRoomJoinVoiceChatResponse_Closure closure,
                                void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 30, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__leave_voice_chat(ProtobufCService *service,
                                 const CChatRoomLeaveVoiceChatRequest *input,
                                 CChatRoomLeaveVoiceChatResponse_Closure closure,
                                 void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 31, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_message_history(ProtobufCService *service,
                                    const CChatRoomGetMessageHistoryRequest *input,
                                    CChatRoomGetMessageHistoryResponse_Closure closure,
                                    void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 32, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_my_chat_room_groups(ProtobufCService *service,
                                        const CChatRoomGetMyChatRoomGroupsRequest *input,
                                        CChatRoomGetMyChatRoomGroupsResponse_Closure closure,
                                        void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 33, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_chat_room_group_state(ProtobufCService *service,
                                          const CChatRoomGetChatRoomGroupStateRequest *input,
                                          CChatRoomGetChatRoomGroupStateResponse_Closure closure,
                                          void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 34, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_chat_room_group_summary(ProtobufCService *service,
                                            const CChatRoomGetChatRoomGroupSummaryRequest *input,
                                            CChatRoomGetChatRoomGroupSummaryResponse_Closure closure,
                                            void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 35, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__set_app_chat_room_group_force_active(ProtobufCService *service,
                                                     const CChatRoomSetAppChatRoomGroupForceActiveRequest *input,
                                                     CChatRoomSetAppChatRoomGroupForceActiveResponse_Closure closure,
                                                     void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 36, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__set_app_chat_room_group_stop_force_active(ProtobufCService *service,
                                                          const CChatRoomSetAppChatRoomGroupStopForceActiveNotification *input,
                                                          NoResponse_Closure closure,
                                                          void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 37, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__ack_chat_message(ProtobufCService *service,
                                 const CChatRoomAckChatMessageNotification *input,
                                 NoResponse_Closure closure,
                                 void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 38, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__create_invite_link(ProtobufCService *service,
                                   const CChatRoomCreateInviteLinkRequest *input,
                                   CChatRoomCreateInviteLinkResponse_Closure closure,
                                   void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 39, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_invite_link_info(ProtobufCService *service,
                                     const CChatRoomGetInviteLinkInfoRequest *input,
                                     CChatRoomGetInviteLinkInfoResponse_Closure closure,
                                     void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 40, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_invite_info(ProtobufCService *service,
                                const CChatRoomGetInviteInfoRequest *input,
                                CChatRoomGetInviteInfoResponse_Closure closure,
                                void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 41, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_invite_links_for_group(ProtobufCService *service,
                                           const CChatRoomGetInviteLinksForGroupRequest *input,
                                           CChatRoomGetInviteLinksForGroupResponse_Closure closure,
                                           void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 42, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_ban_list(ProtobufCService *service,
                             const CChatRoomGetBanListRequest *input,
                             CChatRoomGetBanListResponse_Closure closure,
                             void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 43, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_invite_list(ProtobufCService *service,
                                const CChatRoomGetInviteListRequest *input,
                                CChatRoomGetInviteListResponse_Closure closure,
                                void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 44, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__delete_invite_link(ProtobufCService *service,
                                   const CChatRoomDeleteInviteLinkRequest *input,
                                   CChatRoomDeleteInviteLinkResponse_Closure closure,
                                   void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 45, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__set_session_active_chat_room_groups(ProtobufCService *service,
                                                    const CChatRoomSetSessionActiveChatRoomGroupsRequest *input,
                                                    CChatRoomSetSessionActiveChatRoomGroupsResponse_Closure closure,
                                                    void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 46, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__set_user_chat_group_preferences(ProtobufCService *service,
                                                const CChatRoomSetUserChatGroupPreferencesRequest *input,
                                                CChatRoomSetUserChatGroupPreferencesResponse_Closure closure,
                                                void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 47, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__delete_chat_messages(ProtobufCService *service,
                                     const CChatRoomDeleteChatMessagesRequest *input,
                                     CChatRoomDeleteChatMessagesResponse_Closure closure,
                                     void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 48, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__update_member_list_view(ProtobufCService *service,
                                        const CChatRoomUpdateMemberListViewNotification *input,
                                        NoResponse_Closure closure,
                                        void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 49, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__search_members(ProtobufCService *service,
                               const CChatRoomSearchMembersRequest *input,
                               CChatRoomSearchMembersResponse_Closure closure,
                               void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 50, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__update_message_reaction(ProtobufCService *service,
                                        const CChatRoomUpdateMessageReactionRequest *input,
                                        CChatRoomUpdateMessageReactionResponse_Closure closure,
                                        void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 51, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__get_message_reaction_reactors(ProtobufCService *service,
                                              const CChatRoomGetMessageReactionReactorsRequest *input,
                                              CChatRoomGetMessageReactionReactorsResponse_Closure closure,
                                              void *closure_data)
{
  assert(service->descriptor == &chat_room__descriptor);
  service->invoke(service, 52, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room__init (ChatRoom_Service *service,
                      ChatRoom_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &chat_room__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
static const ProtobufCMethodDescriptor clan_chat_rooms__method_descriptors[2] =
{
  { "GetClanChatRoomInfo", &cclan_chat_rooms__get_clan_chat_room_info__request__descriptor, &cclan_chat_rooms__get_clan_chat_room_info__response__descriptor },
  { "SetClanChatRoomPrivate", &cclan_chat_rooms__set_clan_chat_room_private__request__descriptor, &cclan_chat_rooms__set_clan_chat_room_private__response__descriptor },
};
const unsigned clan_chat_rooms__method_indices_by_name[] = {
  0,        /* GetClanChatRoomInfo */
  1         /* SetClanChatRoomPrivate */
};
const ProtobufCServiceDescriptor clan_chat_rooms__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "ClanChatRooms",
  "ClanChatRooms",
  "ClanChatRooms",
  "",
  2,
  clan_chat_rooms__method_descriptors,
  clan_chat_rooms__method_indices_by_name
};
void clan_chat_rooms__get_clan_chat_room_info(ProtobufCService *service,
                                              const CClanChatRoomsGetClanChatRoomInfoRequest *input,
                                              CClanChatRoomsGetClanChatRoomInfoResponse_Closure closure,
                                              void *closure_data)
{
  assert(service->descriptor == &clan_chat_rooms__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void clan_chat_rooms__set_clan_chat_room_private(ProtobufCService *service,
                                                 const CClanChatRoomsSetClanChatRoomPrivateRequest *input,
                                                 CClanChatRoomsSetClanChatRoomPrivateResponse_Closure closure,
                                                 void *closure_data)
{
  assert(service->descriptor == &clan_chat_rooms__descriptor);
  service->invoke(service, 1, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void clan_chat_rooms__init (ClanChatRooms_Service *service,
                            ClanChatRooms_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &clan_chat_rooms__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
static const ProtobufCMethodDescriptor chat_room_client__method_descriptors[11] =
{
  { "NotifyIncomingChatMessage", &cchat_room__incoming_chat_message__notification__descriptor, &no_response__descriptor },
  { "NotifyChatMessageModified", &cchat_room__chat_message_modified__notification__descriptor, &no_response__descriptor },
  { "NotifyMemberStateChange", &cchat_room__member_state_change__notification__descriptor, &no_response__descriptor },
  { "NotifyChatRoomHeaderStateChange", &cchat_room__chat_room_header_state__notification__descriptor, &no_response__descriptor },
  { "NotifyChatRoomGroupRoomsChange", &cchat_room__chat_room_group_rooms_change__notification__descriptor, &no_response__descriptor },
  { "NotifyShouldRejoinChatRoomVoiceChat", &cchat_room__notify_should_rejoin_chat_room_voice_chat__notification__descriptor, &no_response__descriptor },
  { "NotifyChatGroupUserStateChanged", &chat_room_client__notify_chat_group_user_state_changed__notification__descriptor, &no_response__descriptor },
  { "NotifyAckChatMessageEcho", &cchat_room__ack_chat_message__notification__descriptor, &no_response__descriptor },
  { "NotifyChatRoomDisconnect", &chat_room_client__notify_chat_room_disconnect__notification__descriptor, &no_response__descriptor },
  { "NotifyMemberListViewUpdated", &cchat_room_client__member_list_view_updated__notification__descriptor, &no_response__descriptor },
  { "NotifyMessageReaction", &cchat_room__message_reaction__notification__descriptor, &no_response__descriptor },
};
const unsigned chat_room_client__method_indices_by_name[] = {
  7,        /* NotifyAckChatMessageEcho */
  6,        /* NotifyChatGroupUserStateChanged */
  1,        /* NotifyChatMessageModified */
  8,        /* NotifyChatRoomDisconnect */
  4,        /* NotifyChatRoomGroupRoomsChange */
  3,        /* NotifyChatRoomHeaderStateChange */
  0,        /* NotifyIncomingChatMessage */
  9,        /* NotifyMemberListViewUpdated */
  2,        /* NotifyMemberStateChange */
  10,        /* NotifyMessageReaction */
  5         /* NotifyShouldRejoinChatRoomVoiceChat */
};
const ProtobufCServiceDescriptor chat_room_client__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "ChatRoomClient",
  "ChatRoomClient",
  "ChatRoomClient",
  "",
  11,
  chat_room_client__method_descriptors,
  chat_room_client__method_indices_by_name
};
void chat_room_client__notify_incoming_chat_message(ProtobufCService *service,
                                                    const CChatRoomIncomingChatMessageNotification *input,
                                                    NoResponse_Closure closure,
                                                    void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_chat_message_modified(ProtobufCService *service,
                                                    const CChatRoomChatMessageModifiedNotification *input,
                                                    NoResponse_Closure closure,
                                                    void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 1, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_member_state_change(ProtobufCService *service,
                                                  const CChatRoomMemberStateChangeNotification *input,
                                                  NoResponse_Closure closure,
                                                  void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 2, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_chat_room_header_state_change(ProtobufCService *service,
                                                            const CChatRoomChatRoomHeaderStateNotification *input,
                                                            NoResponse_Closure closure,
                                                            void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 3, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_chat_room_group_rooms_change(ProtobufCService *service,
                                                           const CChatRoomChatRoomGroupRoomsChangeNotification *input,
                                                           NoResponse_Closure closure,
                                                           void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 4, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_should_rejoin_chat_room_voice_chat(ProtobufCService *service,
                                                                 const CChatRoomNotifyShouldRejoinChatRoomVoiceChatNotification *input,
                                                                 NoResponse_Closure closure,
                                                                 void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 5, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_chat_group_user_state_changed(ProtobufCService *service,
                                                            const ChatRoomClientNotifyChatGroupUserStateChangedNotification *input,
                                                            NoResponse_Closure closure,
                                                            void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 6, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_ack_chat_message_echo(ProtobufCService *service,
                                                    const CChatRoomAckChatMessageNotification *input,
                                                    NoResponse_Closure closure,
                                                    void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 7, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_chat_room_disconnect(ProtobufCService *service,
                                                   const ChatRoomClientNotifyChatRoomDisconnectNotification *input,
                                                   NoResponse_Closure closure,
                                                   void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 8, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_member_list_view_updated(ProtobufCService *service,
                                                       const CChatRoomClientMemberListViewUpdatedNotification *input,
                                                       NoResponse_Closure closure,
                                                       void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 9, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__notify_message_reaction(ProtobufCService *service,
                                               const CChatRoomMessageReactionNotification *input,
                                               NoResponse_Closure closure,
                                               void *closure_data)
{
  assert(service->descriptor == &chat_room_client__descriptor);
  service->invoke(service, 10, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_room_client__init (ChatRoomClient_Service *service,
                             ChatRoomClient_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &chat_room_client__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
static const ProtobufCMethodDescriptor chat_usability__method_descriptors[1] =
{
  { "NotifyClientUsabilityMetrics", &cchat_usability__client_usability_metrics__notification__descriptor, &no_response__descriptor },
};
const unsigned chat_usability__method_indices_by_name[] = {
  0         /* NotifyClientUsabilityMetrics */
};
const ProtobufCServiceDescriptor chat_usability__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "ChatUsability",
  "ChatUsability",
  "ChatUsability",
  "",
  1,
  chat_usability__method_descriptors,
  chat_usability__method_indices_by_name
};
void chat_usability__notify_client_usability_metrics(ProtobufCService *service,
                                                     const CChatUsabilityClientUsabilityMetricsNotification *input,
                                                     NoResponse_Closure closure,
                                                     void *closure_data)
{
  assert(service->descriptor == &chat_usability__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_usability__init (ChatUsability_Service *service,
                           ChatUsability_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &chat_usability__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
static const ProtobufCMethodDescriptor chat_usability_client__method_descriptors[1] =
{
  { "NotifyRequestClientUsabilityMetrics", &cchat_usability__request_client_usability_metrics__notification__descriptor, &no_response__descriptor },
};
const unsigned chat_usability_client__method_indices_by_name[] = {
  0         /* NotifyRequestClientUsabilityMetrics */
};
const ProtobufCServiceDescriptor chat_usability_client__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "ChatUsabilityClient",
  "ChatUsabilityClient",
  "ChatUsabilityClient",
  "",
  1,
  chat_usability_client__method_descriptors,
  chat_usability_client__method_indices_by_name
};
void chat_usability_client__notify_request_client_usability_metrics(ProtobufCService *service,
                                                                    const CChatUsabilityRequestClientUsabilityMetricsNotification *input,
                                                                    NoResponse_Closure closure,
                                                                    void *closure_data)
{
  assert(service->descriptor == &chat_usability_client__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void chat_usability_client__init (ChatUsabilityClient_Service *service,
                                  ChatUsabilityClient_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &chat_usability_client__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
