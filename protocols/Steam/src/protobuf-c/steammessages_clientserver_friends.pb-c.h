/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_clientserver_friends.proto */

#ifndef PROTOBUF_C_steammessages_5fclientserver_5ffriends_2eproto__INCLUDED
#define PROTOBUF_C_steammessages_5fclientserver_5ffriends_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "steammessages_base.pb-c.h"

struct CMsgClientFriendMsg;
struct CMsgClientFriendMsgIncoming;
struct CMsgClientAddFriend;
struct CMsgClientAddFriendResponse;
struct CMsgClientRemoveFriend;
struct CMsgClientHideFriend;
struct CMsgClientFriendsList;
struct CMsgClientFriendsList__Friend;
struct CMsgClientFriendsGroupsList;
struct CMsgClientFriendsGroupsList__FriendGroup;
struct CMsgClientFriendsGroupsList__FriendGroupsMembership;
struct CMsgClientPlayerNicknameList;
struct CMsgClientPlayerNicknameList__PlayerNickname;
struct CMsgClientSetPlayerNickname;
struct CMsgClientSetPlayerNicknameResponse;
struct CMsgClientRequestFriendData;
struct CMsgClientChangeStatus;
struct CMsgPersonaChangeResponse;
struct CMsgClientPersonaState;
struct CMsgClientPersonaState__Friend;
struct CMsgClientPersonaState__Friend__ClanData;
struct CMsgClientPersonaState__Friend__KV;
struct CMsgClientFriendProfileInfo;
struct CMsgClientFriendProfileInfoResponse;
struct CMsgClientCreateFriendsGroup;
struct CMsgClientCreateFriendsGroupResponse;
struct CMsgClientDeleteFriendsGroup;
struct CMsgClientDeleteFriendsGroupResponse;
struct CMsgClientManageFriendsGroup;
struct CMsgClientManageFriendsGroupResponse;
struct CMsgClientAddFriendToGroup;
struct CMsgClientAddFriendToGroupResponse;
struct CMsgClientRemoveFriendFromGroup;
struct CMsgClientRemoveFriendFromGroupResponse;
struct CMsgClientGetEmoticonList;
struct CMsgClientEmoticonList;
struct CMsgClientEmoticonList__Emoticon;
struct CMsgClientEmoticonList__Sticker;
struct CMsgClientEmoticonList__Effect;


/* --- enums --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cmsg_client_friend_msg__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_friend_msg_incoming__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_add_friend__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_add_friend_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_remove_friend__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_hide_friend__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_friends_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_friends_list__friend__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_friends_groups_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_friends_groups_list__friend_group__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_friends_groups_list__friend_groups_membership__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_player_nickname_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_player_nickname_list__player_nickname__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_set_player_nickname__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_set_player_nickname_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_request_friend_data__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_change_status__descriptor;
extern const ProtobufCMessageDescriptor cmsg_persona_change_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_persona_state__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_persona_state__friend__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_persona_state__friend__clan_data__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_persona_state__friend__kv__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_friend_profile_info__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_friend_profile_info_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_create_friends_group__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_create_friends_group_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_delete_friends_group__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_delete_friends_group_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_manage_friends_group__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_manage_friends_group_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_add_friend_to_group__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_add_friend_to_group_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_remove_friend_from_group__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_remove_friend_from_group_response__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_get_emoticon_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_emoticon_list__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_emoticon_list__emoticon__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_emoticon_list__sticker__descriptor;
extern const ProtobufCMessageDescriptor cmsg_client_emoticon_list__effect__descriptor;

/* --- messages --- */

extern "C" void message_init_generic(const ProtobufCMessageDescriptor * desc, ProtobufCMessage * message);

struct CMsgClientFriendMsg : public ProtobufCppMessage
{
  CMsgClientFriendMsg() :
     ProtobufCppMessage(cmsg_client_friend_msg__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  protobuf_c_boolean has_chat_entry_type;
  int32_t chat_entry_type;
  protobuf_c_boolean has_message;
  ProtobufCBinaryData message;
  protobuf_c_boolean has_rtime32_server_timestamp;
  uint32_t rtime32_server_timestamp;
  protobuf_c_boolean has_echo_to_sender;
  protobuf_c_boolean echo_to_sender;
};

struct CMsgClientFriendMsgIncoming : public ProtobufCppMessage
{
  CMsgClientFriendMsgIncoming() :
     ProtobufCppMessage(cmsg_client_friend_msg_incoming__descriptor)
  {}

  protobuf_c_boolean has_steamid_from;
  uint64_t steamid_from;
  protobuf_c_boolean has_chat_entry_type;
  int32_t chat_entry_type;
  protobuf_c_boolean has_from_limited_account;
  protobuf_c_boolean from_limited_account;
  protobuf_c_boolean has_message;
  ProtobufCBinaryData message;
  protobuf_c_boolean has_rtime32_server_timestamp;
  uint32_t rtime32_server_timestamp;
};

struct CMsgClientAddFriend : public ProtobufCppMessage
{
  CMsgClientAddFriend() :
     ProtobufCppMessage(cmsg_client_add_friend__descriptor)
  {}

  protobuf_c_boolean has_steamid_to_add;
  uint64_t steamid_to_add;
  char *accountname_or_email_to_add;
};

struct CMsgClientAddFriendResponse : public ProtobufCppMessage
{
  CMsgClientAddFriendResponse() :
     ProtobufCppMessage(cmsg_client_add_friend_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  int32_t eresult;
  protobuf_c_boolean has_steam_id_added;
  uint64_t steam_id_added;
  char *persona_name_added;
};

struct CMsgClientRemoveFriend : public ProtobufCppMessage
{
  CMsgClientRemoveFriend() :
     ProtobufCppMessage(cmsg_client_remove_friend__descriptor)
  {}

  protobuf_c_boolean has_friendid;
  uint64_t friendid;
};

struct CMsgClientHideFriend : public ProtobufCppMessage
{
  CMsgClientHideFriend() :
     ProtobufCppMessage(cmsg_client_hide_friend__descriptor)
  {}

  protobuf_c_boolean has_friendid;
  uint64_t friendid;
  protobuf_c_boolean has_hide;
  protobuf_c_boolean hide;
};

struct CMsgClientFriendsList__Friend : public ProtobufCppMessage
{
  CMsgClientFriendsList__Friend() :
     ProtobufCppMessage(cmsg_client_friends_list__friend__descriptor)
  {}

  protobuf_c_boolean has_ulfriendid;
  uint64_t ulfriendid;
  protobuf_c_boolean has_efriendrelationship;
  uint32_t efriendrelationship;
};

struct CMsgClientFriendsList : public ProtobufCppMessage
{
  CMsgClientFriendsList() :
     ProtobufCppMessage(cmsg_client_friends_list__descriptor)
  {}

  protobuf_c_boolean has_bincremental;
  protobuf_c_boolean bincremental;
  size_t n_friends;
  CMsgClientFriendsList__Friend **friends;
  protobuf_c_boolean has_max_friend_count;
  uint32_t max_friend_count;
  protobuf_c_boolean has_active_friend_count;
  uint32_t active_friend_count;
  protobuf_c_boolean has_friends_limit_hit;
  protobuf_c_boolean friends_limit_hit;
};

struct CMsgClientFriendsGroupsList__FriendGroup : public ProtobufCppMessage
{
  CMsgClientFriendsGroupsList__FriendGroup() :
     ProtobufCppMessage(cmsg_client_friends_groups_list__friend_group__descriptor)
  {}

  protobuf_c_boolean has_ngroupid;
  int32_t ngroupid;
  char *strgroupname;
};

struct CMsgClientFriendsGroupsList__FriendGroupsMembership : public ProtobufCppMessage
{
  CMsgClientFriendsGroupsList__FriendGroupsMembership() :
     ProtobufCppMessage(cmsg_client_friends_groups_list__friend_groups_membership__descriptor)
  {}

  protobuf_c_boolean has_ulsteamid;
  uint64_t ulsteamid;
  protobuf_c_boolean has_ngroupid;
  int32_t ngroupid;
};

struct CMsgClientFriendsGroupsList : public ProtobufCppMessage
{
  CMsgClientFriendsGroupsList() :
     ProtobufCppMessage(cmsg_client_friends_groups_list__descriptor)
  {}

  protobuf_c_boolean has_bremoval;
  protobuf_c_boolean bremoval;
  protobuf_c_boolean has_bincremental;
  protobuf_c_boolean bincremental;
  size_t n_friendgroups;
  CMsgClientFriendsGroupsList__FriendGroup **friendgroups;
  size_t n_memberships;
  CMsgClientFriendsGroupsList__FriendGroupsMembership **memberships;
};

struct CMsgClientPlayerNicknameList__PlayerNickname : public ProtobufCppMessage
{
  CMsgClientPlayerNicknameList__PlayerNickname() :
     ProtobufCppMessage(cmsg_client_player_nickname_list__player_nickname__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  char *nickname;
};

struct CMsgClientPlayerNicknameList : public ProtobufCppMessage
{
  CMsgClientPlayerNicknameList() :
     ProtobufCppMessage(cmsg_client_player_nickname_list__descriptor)
  {}

  protobuf_c_boolean has_removal;
  protobuf_c_boolean removal;
  protobuf_c_boolean has_incremental;
  protobuf_c_boolean incremental;
  size_t n_nicknames;
  CMsgClientPlayerNicknameList__PlayerNickname **nicknames;
};

struct CMsgClientSetPlayerNickname : public ProtobufCppMessage
{
  CMsgClientSetPlayerNickname() :
     ProtobufCppMessage(cmsg_client_set_player_nickname__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  char *nickname;
};

struct CMsgClientSetPlayerNicknameResponse : public ProtobufCppMessage
{
  CMsgClientSetPlayerNicknameResponse() :
     ProtobufCppMessage(cmsg_client_set_player_nickname_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  uint32_t eresult;
};

struct CMsgClientRequestFriendData : public ProtobufCppMessage
{
  CMsgClientRequestFriendData() :
     ProtobufCppMessage(cmsg_client_request_friend_data__descriptor)
  {}

  protobuf_c_boolean has_persona_state_requested;
  uint32_t persona_state_requested;
  size_t n_friends;
  uint64_t *friends;
};

struct CMsgClientChangeStatus : public ProtobufCppMessage
{
  CMsgClientChangeStatus() :
     ProtobufCppMessage(cmsg_client_change_status__descriptor)
  {}

  protobuf_c_boolean has_persona_state;
  uint32_t persona_state;
  char *player_name;
  protobuf_c_boolean has_is_auto_generated_name;
  protobuf_c_boolean is_auto_generated_name;
  protobuf_c_boolean has_high_priority;
  protobuf_c_boolean high_priority;
  protobuf_c_boolean has_persona_set_by_user;
  protobuf_c_boolean persona_set_by_user;
  protobuf_c_boolean has_persona_state_flags;
  uint32_t persona_state_flags;
  protobuf_c_boolean has_need_persona_response;
  protobuf_c_boolean need_persona_response;
  protobuf_c_boolean has_is_client_idle;
  protobuf_c_boolean is_client_idle;
};

struct CMsgPersonaChangeResponse : public ProtobufCppMessage
{
  CMsgPersonaChangeResponse() :
     ProtobufCppMessage(cmsg_persona_change_response__descriptor)
  {}

  protobuf_c_boolean has_result;
  uint32_t result;
  char *player_name;
};

struct CMsgClientPersonaState__Friend__ClanData : public ProtobufCppMessage
{
  CMsgClientPersonaState__Friend__ClanData() :
     ProtobufCppMessage(cmsg_client_persona_state__friend__clan_data__descriptor)
  {}

  protobuf_c_boolean has_ogg_app_id;
  uint32_t ogg_app_id;
  protobuf_c_boolean has_chat_group_id;
  uint64_t chat_group_id;
};

struct CMsgClientPersonaState__Friend__KV : public ProtobufCppMessage
{
  CMsgClientPersonaState__Friend__KV() :
     ProtobufCppMessage(cmsg_client_persona_state__friend__kv__descriptor)
  {}

  char *key;
  char *value;
};

struct CMsgClientPersonaState__Friend : public ProtobufCppMessage
{
  CMsgClientPersonaState__Friend() :
     ProtobufCppMessage(cmsg_client_persona_state__friend__descriptor)
  {}

  protobuf_c_boolean has_friendid;
  uint64_t friendid;
  protobuf_c_boolean has_persona_state;
  uint32_t persona_state;
  protobuf_c_boolean has_game_played_app_id;
  uint32_t game_played_app_id;
  protobuf_c_boolean has_game_server_ip;
  uint32_t game_server_ip;
  protobuf_c_boolean has_game_server_port;
  uint32_t game_server_port;
  protobuf_c_boolean has_persona_state_flags;
  uint32_t persona_state_flags;
  protobuf_c_boolean has_online_session_instances;
  uint32_t online_session_instances;
  protobuf_c_boolean has_persona_set_by_user;
  protobuf_c_boolean persona_set_by_user;
  char *player_name;
  protobuf_c_boolean has_query_port;
  uint32_t query_port;
  protobuf_c_boolean has_steamid_source;
  uint64_t steamid_source;
  protobuf_c_boolean has_avatar_hash;
  ProtobufCBinaryData avatar_hash;
  protobuf_c_boolean has_last_logoff;
  uint32_t last_logoff;
  protobuf_c_boolean has_last_logon;
  uint32_t last_logon;
  protobuf_c_boolean has_last_seen_online;
  uint32_t last_seen_online;
  protobuf_c_boolean has_clan_rank;
  uint32_t clan_rank;
  char *game_name;
  protobuf_c_boolean has_gameid;
  uint64_t gameid;
  protobuf_c_boolean has_game_data_blob;
  ProtobufCBinaryData game_data_blob;
  CMsgClientPersonaState__Friend__ClanData *clan_data;
  char *clan_tag;
  size_t n_rich_presence;
  CMsgClientPersonaState__Friend__KV **rich_presence;
  protobuf_c_boolean has_broadcast_id;
  uint64_t broadcast_id;
  protobuf_c_boolean has_game_lobby_id;
  uint64_t game_lobby_id;
  protobuf_c_boolean has_watching_broadcast_accountid;
  uint32_t watching_broadcast_accountid;
  protobuf_c_boolean has_watching_broadcast_appid;
  uint32_t watching_broadcast_appid;
  protobuf_c_boolean has_watching_broadcast_viewers;
  uint32_t watching_broadcast_viewers;
  char *watching_broadcast_title;
  protobuf_c_boolean has_is_community_banned;
  protobuf_c_boolean is_community_banned;
  protobuf_c_boolean has_player_name_pending_review;
  protobuf_c_boolean player_name_pending_review;
  protobuf_c_boolean has_avatar_pending_review;
  protobuf_c_boolean avatar_pending_review;
};

struct CMsgClientPersonaState : public ProtobufCppMessage
{
  CMsgClientPersonaState() :
     ProtobufCppMessage(cmsg_client_persona_state__descriptor)
  {}

  protobuf_c_boolean has_status_flags;
  uint32_t status_flags;
  size_t n_friends;
  CMsgClientPersonaState__Friend **friends;
};

struct CMsgClientFriendProfileInfo : public ProtobufCppMessage
{
  CMsgClientFriendProfileInfo() :
     ProtobufCppMessage(cmsg_client_friend_profile_info__descriptor)
  {}

  protobuf_c_boolean has_steamid_friend;
  uint64_t steamid_friend;
};

struct CMsgClientFriendProfileInfoResponse : public ProtobufCppMessage
{
  CMsgClientFriendProfileInfoResponse() :
     ProtobufCppMessage(cmsg_client_friend_profile_info_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  int32_t eresult;
  protobuf_c_boolean has_steamid_friend;
  uint64_t steamid_friend;
  protobuf_c_boolean has_time_created;
  uint32_t time_created;
  char *real_name;
  char *city_name;
  char *state_name;
  char *country_name;
  char *headline;
  char *summary;
};

struct CMsgClientCreateFriendsGroup : public ProtobufCppMessage
{
  CMsgClientCreateFriendsGroup() :
     ProtobufCppMessage(cmsg_client_create_friends_group__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  char *groupname;
  size_t n_steamid_friends;
  uint64_t *steamid_friends;
};

struct CMsgClientCreateFriendsGroupResponse : public ProtobufCppMessage
{
  CMsgClientCreateFriendsGroupResponse() :
     ProtobufCppMessage(cmsg_client_create_friends_group_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  uint32_t eresult;
  protobuf_c_boolean has_groupid;
  int32_t groupid;
};

struct CMsgClientDeleteFriendsGroup : public ProtobufCppMessage
{
  CMsgClientDeleteFriendsGroup() :
     ProtobufCppMessage(cmsg_client_delete_friends_group__descriptor)
  {}

  protobuf_c_boolean has_steamid;
  uint64_t steamid;
  protobuf_c_boolean has_groupid;
  int32_t groupid;
};

struct CMsgClientDeleteFriendsGroupResponse : public ProtobufCppMessage
{
  CMsgClientDeleteFriendsGroupResponse() :
     ProtobufCppMessage(cmsg_client_delete_friends_group_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  uint32_t eresult;
};

struct CMsgClientManageFriendsGroup : public ProtobufCppMessage
{
  CMsgClientManageFriendsGroup() :
     ProtobufCppMessage(cmsg_client_manage_friends_group__descriptor)
  {}

  protobuf_c_boolean has_groupid;
  int32_t groupid;
  char *groupname;
  size_t n_steamid_friends_added;
  uint64_t *steamid_friends_added;
  size_t n_steamid_friends_removed;
  uint64_t *steamid_friends_removed;
};

struct CMsgClientManageFriendsGroupResponse : public ProtobufCppMessage
{
  CMsgClientManageFriendsGroupResponse() :
     ProtobufCppMessage(cmsg_client_manage_friends_group_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  uint32_t eresult;
};

struct CMsgClientAddFriendToGroup : public ProtobufCppMessage
{
  CMsgClientAddFriendToGroup() :
     ProtobufCppMessage(cmsg_client_add_friend_to_group__descriptor)
  {}

  protobuf_c_boolean has_groupid;
  int32_t groupid;
  protobuf_c_boolean has_steamiduser;
  uint64_t steamiduser;
};

struct CMsgClientAddFriendToGroupResponse : public ProtobufCppMessage
{
  CMsgClientAddFriendToGroupResponse() :
     ProtobufCppMessage(cmsg_client_add_friend_to_group_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  uint32_t eresult;
};

struct CMsgClientRemoveFriendFromGroup : public ProtobufCppMessage
{
  CMsgClientRemoveFriendFromGroup() :
     ProtobufCppMessage(cmsg_client_remove_friend_from_group__descriptor)
  {}

  protobuf_c_boolean has_groupid;
  int32_t groupid;
  protobuf_c_boolean has_steamiduser;
  uint64_t steamiduser;
};

struct CMsgClientRemoveFriendFromGroupResponse : public ProtobufCppMessage
{
  CMsgClientRemoveFriendFromGroupResponse() :
     ProtobufCppMessage(cmsg_client_remove_friend_from_group_response__descriptor)
  {}

  protobuf_c_boolean has_eresult;
  uint32_t eresult;
};

struct CMsgClientGetEmoticonList : public ProtobufCppMessage
{
  CMsgClientGetEmoticonList() :
     ProtobufCppMessage(cmsg_client_get_emoticon_list__descriptor)
  {}

};

struct CMsgClientEmoticonList__Emoticon : public ProtobufCppMessage
{
  CMsgClientEmoticonList__Emoticon() :
     ProtobufCppMessage(cmsg_client_emoticon_list__emoticon__descriptor)
  {}

  char *name;
  protobuf_c_boolean has_count;
  int32_t count;
  protobuf_c_boolean has_time_last_used;
  uint32_t time_last_used;
  protobuf_c_boolean has_use_count;
  uint32_t use_count;
  protobuf_c_boolean has_time_received;
  uint32_t time_received;
  protobuf_c_boolean has_appid;
  uint32_t appid;
};

struct CMsgClientEmoticonList__Sticker : public ProtobufCppMessage
{
  CMsgClientEmoticonList__Sticker() :
     ProtobufCppMessage(cmsg_client_emoticon_list__sticker__descriptor)
  {}

  char *name;
  protobuf_c_boolean has_count;
  int32_t count;
  protobuf_c_boolean has_time_received;
  uint32_t time_received;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_time_last_used;
  uint32_t time_last_used;
  protobuf_c_boolean has_use_count;
  uint32_t use_count;
};

struct CMsgClientEmoticonList__Effect : public ProtobufCppMessage
{
  CMsgClientEmoticonList__Effect() :
     ProtobufCppMessage(cmsg_client_emoticon_list__effect__descriptor)
  {}

  char *name;
  protobuf_c_boolean has_count;
  int32_t count;
  protobuf_c_boolean has_time_received;
  uint32_t time_received;
  protobuf_c_boolean has_infinite_use;
  protobuf_c_boolean infinite_use;
  protobuf_c_boolean has_appid;
  uint32_t appid;
};

struct CMsgClientEmoticonList : public ProtobufCppMessage
{
  CMsgClientEmoticonList() :
     ProtobufCppMessage(cmsg_client_emoticon_list__descriptor)
  {}

  size_t n_emoticons;
  CMsgClientEmoticonList__Emoticon **emoticons;
  size_t n_stickers;
  CMsgClientEmoticonList__Sticker **stickers;
  size_t n_effects;
  CMsgClientEmoticonList__Effect **effects;
};

size_t cmsg_client_friend_msg__get_packed_size
                     (const CMsgClientFriendMsg   *message);
size_t cmsg_client_friend_msg__pack
                     (const CMsgClientFriendMsg   *message,
                      uint8_t             *out);
size_t cmsg_client_friend_msg__pack_to_buffer
                     (const CMsgClientFriendMsg   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientFriendMsg *
       cmsg_client_friend_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_friend_msg__free_unpacked
                     (CMsgClientFriendMsg *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_friend_msg_incoming__get_packed_size
                     (const CMsgClientFriendMsgIncoming   *message);
size_t cmsg_client_friend_msg_incoming__pack
                     (const CMsgClientFriendMsgIncoming   *message,
                      uint8_t             *out);
size_t cmsg_client_friend_msg_incoming__pack_to_buffer
                     (const CMsgClientFriendMsgIncoming   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientFriendMsgIncoming *
       cmsg_client_friend_msg_incoming__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_friend_msg_incoming__free_unpacked
                     (CMsgClientFriendMsgIncoming *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_add_friend__get_packed_size
                     (const CMsgClientAddFriend   *message);
size_t cmsg_client_add_friend__pack
                     (const CMsgClientAddFriend   *message,
                      uint8_t             *out);
size_t cmsg_client_add_friend__pack_to_buffer
                     (const CMsgClientAddFriend   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAddFriend *
       cmsg_client_add_friend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_add_friend__free_unpacked
                     (CMsgClientAddFriend *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_add_friend_response__get_packed_size
                     (const CMsgClientAddFriendResponse   *message);
size_t cmsg_client_add_friend_response__pack
                     (const CMsgClientAddFriendResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_add_friend_response__pack_to_buffer
                     (const CMsgClientAddFriendResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAddFriendResponse *
       cmsg_client_add_friend_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_add_friend_response__free_unpacked
                     (CMsgClientAddFriendResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_remove_friend__get_packed_size
                     (const CMsgClientRemoveFriend   *message);
size_t cmsg_client_remove_friend__pack
                     (const CMsgClientRemoveFriend   *message,
                      uint8_t             *out);
size_t cmsg_client_remove_friend__pack_to_buffer
                     (const CMsgClientRemoveFriend   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRemoveFriend *
       cmsg_client_remove_friend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_remove_friend__free_unpacked
                     (CMsgClientRemoveFriend *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_hide_friend__get_packed_size
                     (const CMsgClientHideFriend   *message);
size_t cmsg_client_hide_friend__pack
                     (const CMsgClientHideFriend   *message,
                      uint8_t             *out);
size_t cmsg_client_hide_friend__pack_to_buffer
                     (const CMsgClientHideFriend   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientHideFriend *
       cmsg_client_hide_friend__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_hide_friend__free_unpacked
                     (CMsgClientHideFriend *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_friends_list__get_packed_size
                     (const CMsgClientFriendsList   *message);
size_t cmsg_client_friends_list__pack
                     (const CMsgClientFriendsList   *message,
                      uint8_t             *out);
size_t cmsg_client_friends_list__pack_to_buffer
                     (const CMsgClientFriendsList   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientFriendsList *
       cmsg_client_friends_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_friends_list__free_unpacked
                     (CMsgClientFriendsList *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_friends_groups_list__get_packed_size
                     (const CMsgClientFriendsGroupsList   *message);
size_t cmsg_client_friends_groups_list__pack
                     (const CMsgClientFriendsGroupsList   *message,
                      uint8_t             *out);
size_t cmsg_client_friends_groups_list__pack_to_buffer
                     (const CMsgClientFriendsGroupsList   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientFriendsGroupsList *
       cmsg_client_friends_groups_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_friends_groups_list__free_unpacked
                     (CMsgClientFriendsGroupsList *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_player_nickname_list__get_packed_size
                     (const CMsgClientPlayerNicknameList   *message);
size_t cmsg_client_player_nickname_list__pack
                     (const CMsgClientPlayerNicknameList   *message,
                      uint8_t             *out);
size_t cmsg_client_player_nickname_list__pack_to_buffer
                     (const CMsgClientPlayerNicknameList   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientPlayerNicknameList *
       cmsg_client_player_nickname_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_player_nickname_list__free_unpacked
                     (CMsgClientPlayerNicknameList *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_set_player_nickname__get_packed_size
                     (const CMsgClientSetPlayerNickname   *message);
size_t cmsg_client_set_player_nickname__pack
                     (const CMsgClientSetPlayerNickname   *message,
                      uint8_t             *out);
size_t cmsg_client_set_player_nickname__pack_to_buffer
                     (const CMsgClientSetPlayerNickname   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientSetPlayerNickname *
       cmsg_client_set_player_nickname__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_set_player_nickname__free_unpacked
                     (CMsgClientSetPlayerNickname *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_set_player_nickname_response__get_packed_size
                     (const CMsgClientSetPlayerNicknameResponse   *message);
size_t cmsg_client_set_player_nickname_response__pack
                     (const CMsgClientSetPlayerNicknameResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_set_player_nickname_response__pack_to_buffer
                     (const CMsgClientSetPlayerNicknameResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientSetPlayerNicknameResponse *
       cmsg_client_set_player_nickname_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_set_player_nickname_response__free_unpacked
                     (CMsgClientSetPlayerNicknameResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_request_friend_data__get_packed_size
                     (const CMsgClientRequestFriendData   *message);
size_t cmsg_client_request_friend_data__pack
                     (const CMsgClientRequestFriendData   *message,
                      uint8_t             *out);
size_t cmsg_client_request_friend_data__pack_to_buffer
                     (const CMsgClientRequestFriendData   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRequestFriendData *
       cmsg_client_request_friend_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_request_friend_data__free_unpacked
                     (CMsgClientRequestFriendData *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_change_status__get_packed_size
                     (const CMsgClientChangeStatus   *message);
size_t cmsg_client_change_status__pack
                     (const CMsgClientChangeStatus   *message,
                      uint8_t             *out);
size_t cmsg_client_change_status__pack_to_buffer
                     (const CMsgClientChangeStatus   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientChangeStatus *
       cmsg_client_change_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_change_status__free_unpacked
                     (CMsgClientChangeStatus *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_persona_change_response__get_packed_size
                     (const CMsgPersonaChangeResponse   *message);
size_t cmsg_persona_change_response__pack
                     (const CMsgPersonaChangeResponse   *message,
                      uint8_t             *out);
size_t cmsg_persona_change_response__pack_to_buffer
                     (const CMsgPersonaChangeResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgPersonaChangeResponse *
       cmsg_persona_change_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_persona_change_response__free_unpacked
                     (CMsgPersonaChangeResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_persona_state__get_packed_size
                     (const CMsgClientPersonaState   *message);
size_t cmsg_client_persona_state__pack
                     (const CMsgClientPersonaState   *message,
                      uint8_t             *out);
size_t cmsg_client_persona_state__pack_to_buffer
                     (const CMsgClientPersonaState   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientPersonaState *
       cmsg_client_persona_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_persona_state__free_unpacked
                     (CMsgClientPersonaState *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_friend_profile_info__get_packed_size
                     (const CMsgClientFriendProfileInfo   *message);
size_t cmsg_client_friend_profile_info__pack
                     (const CMsgClientFriendProfileInfo   *message,
                      uint8_t             *out);
size_t cmsg_client_friend_profile_info__pack_to_buffer
                     (const CMsgClientFriendProfileInfo   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientFriendProfileInfo *
       cmsg_client_friend_profile_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_friend_profile_info__free_unpacked
                     (CMsgClientFriendProfileInfo *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_friend_profile_info_response__get_packed_size
                     (const CMsgClientFriendProfileInfoResponse   *message);
size_t cmsg_client_friend_profile_info_response__pack
                     (const CMsgClientFriendProfileInfoResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_friend_profile_info_response__pack_to_buffer
                     (const CMsgClientFriendProfileInfoResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientFriendProfileInfoResponse *
       cmsg_client_friend_profile_info_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_friend_profile_info_response__free_unpacked
                     (CMsgClientFriendProfileInfoResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_create_friends_group__get_packed_size
                     (const CMsgClientCreateFriendsGroup   *message);
size_t cmsg_client_create_friends_group__pack
                     (const CMsgClientCreateFriendsGroup   *message,
                      uint8_t             *out);
size_t cmsg_client_create_friends_group__pack_to_buffer
                     (const CMsgClientCreateFriendsGroup   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientCreateFriendsGroup *
       cmsg_client_create_friends_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_create_friends_group__free_unpacked
                     (CMsgClientCreateFriendsGroup *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_create_friends_group_response__get_packed_size
                     (const CMsgClientCreateFriendsGroupResponse   *message);
size_t cmsg_client_create_friends_group_response__pack
                     (const CMsgClientCreateFriendsGroupResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_create_friends_group_response__pack_to_buffer
                     (const CMsgClientCreateFriendsGroupResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientCreateFriendsGroupResponse *
       cmsg_client_create_friends_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_create_friends_group_response__free_unpacked
                     (CMsgClientCreateFriendsGroupResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_delete_friends_group__get_packed_size
                     (const CMsgClientDeleteFriendsGroup   *message);
size_t cmsg_client_delete_friends_group__pack
                     (const CMsgClientDeleteFriendsGroup   *message,
                      uint8_t             *out);
size_t cmsg_client_delete_friends_group__pack_to_buffer
                     (const CMsgClientDeleteFriendsGroup   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientDeleteFriendsGroup *
       cmsg_client_delete_friends_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_delete_friends_group__free_unpacked
                     (CMsgClientDeleteFriendsGroup *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_delete_friends_group_response__get_packed_size
                     (const CMsgClientDeleteFriendsGroupResponse   *message);
size_t cmsg_client_delete_friends_group_response__pack
                     (const CMsgClientDeleteFriendsGroupResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_delete_friends_group_response__pack_to_buffer
                     (const CMsgClientDeleteFriendsGroupResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientDeleteFriendsGroupResponse *
       cmsg_client_delete_friends_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_delete_friends_group_response__free_unpacked
                     (CMsgClientDeleteFriendsGroupResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_manage_friends_group__get_packed_size
                     (const CMsgClientManageFriendsGroup   *message);
size_t cmsg_client_manage_friends_group__pack
                     (const CMsgClientManageFriendsGroup   *message,
                      uint8_t             *out);
size_t cmsg_client_manage_friends_group__pack_to_buffer
                     (const CMsgClientManageFriendsGroup   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientManageFriendsGroup *
       cmsg_client_manage_friends_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_manage_friends_group__free_unpacked
                     (CMsgClientManageFriendsGroup *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_manage_friends_group_response__get_packed_size
                     (const CMsgClientManageFriendsGroupResponse   *message);
size_t cmsg_client_manage_friends_group_response__pack
                     (const CMsgClientManageFriendsGroupResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_manage_friends_group_response__pack_to_buffer
                     (const CMsgClientManageFriendsGroupResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientManageFriendsGroupResponse *
       cmsg_client_manage_friends_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_manage_friends_group_response__free_unpacked
                     (CMsgClientManageFriendsGroupResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_add_friend_to_group__get_packed_size
                     (const CMsgClientAddFriendToGroup   *message);
size_t cmsg_client_add_friend_to_group__pack
                     (const CMsgClientAddFriendToGroup   *message,
                      uint8_t             *out);
size_t cmsg_client_add_friend_to_group__pack_to_buffer
                     (const CMsgClientAddFriendToGroup   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAddFriendToGroup *
       cmsg_client_add_friend_to_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_add_friend_to_group__free_unpacked
                     (CMsgClientAddFriendToGroup *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_add_friend_to_group_response__get_packed_size
                     (const CMsgClientAddFriendToGroupResponse   *message);
size_t cmsg_client_add_friend_to_group_response__pack
                     (const CMsgClientAddFriendToGroupResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_add_friend_to_group_response__pack_to_buffer
                     (const CMsgClientAddFriendToGroupResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientAddFriendToGroupResponse *
       cmsg_client_add_friend_to_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_add_friend_to_group_response__free_unpacked
                     (CMsgClientAddFriendToGroupResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_remove_friend_from_group__get_packed_size
                     (const CMsgClientRemoveFriendFromGroup   *message);
size_t cmsg_client_remove_friend_from_group__pack
                     (const CMsgClientRemoveFriendFromGroup   *message,
                      uint8_t             *out);
size_t cmsg_client_remove_friend_from_group__pack_to_buffer
                     (const CMsgClientRemoveFriendFromGroup   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRemoveFriendFromGroup *
       cmsg_client_remove_friend_from_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_remove_friend_from_group__free_unpacked
                     (CMsgClientRemoveFriendFromGroup *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_remove_friend_from_group_response__get_packed_size
                     (const CMsgClientRemoveFriendFromGroupResponse   *message);
size_t cmsg_client_remove_friend_from_group_response__pack
                     (const CMsgClientRemoveFriendFromGroupResponse   *message,
                      uint8_t             *out);
size_t cmsg_client_remove_friend_from_group_response__pack_to_buffer
                     (const CMsgClientRemoveFriendFromGroupResponse   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientRemoveFriendFromGroupResponse *
       cmsg_client_remove_friend_from_group_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_remove_friend_from_group_response__free_unpacked
                     (CMsgClientRemoveFriendFromGroupResponse *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_get_emoticon_list__get_packed_size
                     (const CMsgClientGetEmoticonList   *message);
size_t cmsg_client_get_emoticon_list__pack
                     (const CMsgClientGetEmoticonList   *message,
                      uint8_t             *out);
size_t cmsg_client_get_emoticon_list__pack_to_buffer
                     (const CMsgClientGetEmoticonList   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientGetEmoticonList *
       cmsg_client_get_emoticon_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_get_emoticon_list__free_unpacked
                     (CMsgClientGetEmoticonList *message,
                      ProtobufCAllocator *allocator);
size_t cmsg_client_emoticon_list__get_packed_size
                     (const CMsgClientEmoticonList   *message);
size_t cmsg_client_emoticon_list__pack
                     (const CMsgClientEmoticonList   *message,
                      uint8_t             *out);
size_t cmsg_client_emoticon_list__pack_to_buffer
                     (const CMsgClientEmoticonList   *message,
                      ProtobufCBuffer     *buffer);
CMsgClientEmoticonList *
       cmsg_client_emoticon_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmsg_client_emoticon_list__free_unpacked
                     (CMsgClientEmoticonList *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CMsgClientFriendMsg_Closure)
                 (const CMsgClientFriendMsg *message,
                  void *closure_data);
typedef void (*CMsgClientFriendMsgIncoming_Closure)
                 (const CMsgClientFriendMsgIncoming *message,
                  void *closure_data);
typedef void (*CMsgClientAddFriend_Closure)
                 (const CMsgClientAddFriend *message,
                  void *closure_data);
typedef void (*CMsgClientAddFriendResponse_Closure)
                 (const CMsgClientAddFriendResponse *message,
                  void *closure_data);
typedef void (*CMsgClientRemoveFriend_Closure)
                 (const CMsgClientRemoveFriend *message,
                  void *closure_data);
typedef void (*CMsgClientHideFriend_Closure)
                 (const CMsgClientHideFriend *message,
                  void *closure_data);
typedef void (*CMsgClientFriendsList__Friend_Closure)
                 (const CMsgClientFriendsList__Friend *message,
                  void *closure_data);
typedef void (*CMsgClientFriendsList_Closure)
                 (const CMsgClientFriendsList *message,
                  void *closure_data);
typedef void (*CMsgClientFriendsGroupsList__FriendGroup_Closure)
                 (const CMsgClientFriendsGroupsList__FriendGroup *message,
                  void *closure_data);
typedef void (*CMsgClientFriendsGroupsList__FriendGroupsMembership_Closure)
                 (const CMsgClientFriendsGroupsList__FriendGroupsMembership *message,
                  void *closure_data);
typedef void (*CMsgClientFriendsGroupsList_Closure)
                 (const CMsgClientFriendsGroupsList *message,
                  void *closure_data);
typedef void (*CMsgClientPlayerNicknameList__PlayerNickname_Closure)
                 (const CMsgClientPlayerNicknameList__PlayerNickname *message,
                  void *closure_data);
typedef void (*CMsgClientPlayerNicknameList_Closure)
                 (const CMsgClientPlayerNicknameList *message,
                  void *closure_data);
typedef void (*CMsgClientSetPlayerNickname_Closure)
                 (const CMsgClientSetPlayerNickname *message,
                  void *closure_data);
typedef void (*CMsgClientSetPlayerNicknameResponse_Closure)
                 (const CMsgClientSetPlayerNicknameResponse *message,
                  void *closure_data);
typedef void (*CMsgClientRequestFriendData_Closure)
                 (const CMsgClientRequestFriendData *message,
                  void *closure_data);
typedef void (*CMsgClientChangeStatus_Closure)
                 (const CMsgClientChangeStatus *message,
                  void *closure_data);
typedef void (*CMsgPersonaChangeResponse_Closure)
                 (const CMsgPersonaChangeResponse *message,
                  void *closure_data);
typedef void (*CMsgClientPersonaState__Friend__ClanData_Closure)
                 (const CMsgClientPersonaState__Friend__ClanData *message,
                  void *closure_data);
typedef void (*CMsgClientPersonaState__Friend__KV_Closure)
                 (const CMsgClientPersonaState__Friend__KV *message,
                  void *closure_data);
typedef void (*CMsgClientPersonaState__Friend_Closure)
                 (const CMsgClientPersonaState__Friend *message,
                  void *closure_data);
typedef void (*CMsgClientPersonaState_Closure)
                 (const CMsgClientPersonaState *message,
                  void *closure_data);
typedef void (*CMsgClientFriendProfileInfo_Closure)
                 (const CMsgClientFriendProfileInfo *message,
                  void *closure_data);
typedef void (*CMsgClientFriendProfileInfoResponse_Closure)
                 (const CMsgClientFriendProfileInfoResponse *message,
                  void *closure_data);
typedef void (*CMsgClientCreateFriendsGroup_Closure)
                 (const CMsgClientCreateFriendsGroup *message,
                  void *closure_data);
typedef void (*CMsgClientCreateFriendsGroupResponse_Closure)
                 (const CMsgClientCreateFriendsGroupResponse *message,
                  void *closure_data);
typedef void (*CMsgClientDeleteFriendsGroup_Closure)
                 (const CMsgClientDeleteFriendsGroup *message,
                  void *closure_data);
typedef void (*CMsgClientDeleteFriendsGroupResponse_Closure)
                 (const CMsgClientDeleteFriendsGroupResponse *message,
                  void *closure_data);
typedef void (*CMsgClientManageFriendsGroup_Closure)
                 (const CMsgClientManageFriendsGroup *message,
                  void *closure_data);
typedef void (*CMsgClientManageFriendsGroupResponse_Closure)
                 (const CMsgClientManageFriendsGroupResponse *message,
                  void *closure_data);
typedef void (*CMsgClientAddFriendToGroup_Closure)
                 (const CMsgClientAddFriendToGroup *message,
                  void *closure_data);
typedef void (*CMsgClientAddFriendToGroupResponse_Closure)
                 (const CMsgClientAddFriendToGroupResponse *message,
                  void *closure_data);
typedef void (*CMsgClientRemoveFriendFromGroup_Closure)
                 (const CMsgClientRemoveFriendFromGroup *message,
                  void *closure_data);
typedef void (*CMsgClientRemoveFriendFromGroupResponse_Closure)
                 (const CMsgClientRemoveFriendFromGroupResponse *message,
                  void *closure_data);
typedef void (*CMsgClientGetEmoticonList_Closure)
                 (const CMsgClientGetEmoticonList *message,
                  void *closure_data);
typedef void (*CMsgClientEmoticonList__Emoticon_Closure)
                 (const CMsgClientEmoticonList__Emoticon *message,
                  void *closure_data);
typedef void (*CMsgClientEmoticonList__Sticker_Closure)
                 (const CMsgClientEmoticonList__Sticker *message,
                  void *closure_data);
typedef void (*CMsgClientEmoticonList__Effect_Closure)
                 (const CMsgClientEmoticonList__Effect *message,
                  void *closure_data);
typedef void (*CMsgClientEmoticonList_Closure)
                 (const CMsgClientEmoticonList *message,
                  void *closure_data);

/* --- services --- */


PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_steammessages_5fclientserver_5ffriends_2eproto__INCLUDED */
