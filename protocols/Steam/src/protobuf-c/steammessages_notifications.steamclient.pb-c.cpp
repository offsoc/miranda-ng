/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: steammessages_notifications.steamclient.proto */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "steammessages_notifications.steamclient.pb-c.h"
size_t steam_notification_data__get_packed_size
                     (const SteamNotificationData *message)
{
  assert(message->descriptor == &steam_notification_data__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t steam_notification_data__pack
                     (const SteamNotificationData *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &steam_notification_data__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t steam_notification_data__pack_to_buffer
                     (const SteamNotificationData *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &steam_notification_data__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
SteamNotificationData *
       steam_notification_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (SteamNotificationData *)
     protobuf_c_message_unpack (&steam_notification_data__descriptor,
                                allocator, len, data);
}
void   steam_notification_data__free_unpacked
                     (SteamNotificationData *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &steam_notification_data__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t csteam_notification__notifications_received__notification__get_packed_size
                     (const CSteamNotificationNotificationsReceivedNotification *message)
{
  assert(message->descriptor == &csteam_notification__notifications_received__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t csteam_notification__notifications_received__notification__pack
                     (const CSteamNotificationNotificationsReceivedNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &csteam_notification__notifications_received__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t csteam_notification__notifications_received__notification__pack_to_buffer
                     (const CSteamNotificationNotificationsReceivedNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &csteam_notification__notifications_received__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CSteamNotificationNotificationsReceivedNotification *
       csteam_notification__notifications_received__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CSteamNotificationNotificationsReceivedNotification *)
     protobuf_c_message_unpack (&csteam_notification__notifications_received__notification__descriptor,
                                allocator, len, data);
}
void   csteam_notification__notifications_received__notification__free_unpacked
                     (CSteamNotificationNotificationsReceivedNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &csteam_notification__notifications_received__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t steam_notification_preference__get_packed_size
                     (const SteamNotificationPreference *message)
{
  assert(message->descriptor == &steam_notification_preference__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t steam_notification_preference__pack
                     (const SteamNotificationPreference *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &steam_notification_preference__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t steam_notification_preference__pack_to_buffer
                     (const SteamNotificationPreference *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &steam_notification_preference__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
SteamNotificationPreference *
       steam_notification_preference__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (SteamNotificationPreference *)
     protobuf_c_message_unpack (&steam_notification_preference__descriptor,
                                allocator, len, data);
}
void   steam_notification_preference__free_unpacked
                     (SteamNotificationPreference *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &steam_notification_preference__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

size_t csteam_notification__preferences_updated__notification__get_packed_size
                     (const CSteamNotificationPreferencesUpdatedNotification *message)
{
  assert(message->descriptor == &csteam_notification__preferences_updated__notification__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t csteam_notification__preferences_updated__notification__pack
                     (const CSteamNotificationPreferencesUpdatedNotification *message,
                      uint8_t       *out)
{
  assert(message->descriptor == &csteam_notification__preferences_updated__notification__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t csteam_notification__preferences_updated__notification__pack_to_buffer
                     (const CSteamNotificationPreferencesUpdatedNotification *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->descriptor == &csteam_notification__preferences_updated__notification__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
CSteamNotificationPreferencesUpdatedNotification *
       csteam_notification__preferences_updated__notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (CSteamNotificationPreferencesUpdatedNotification *)
     protobuf_c_message_unpack (&csteam_notification__preferences_updated__notification__descriptor,
                                allocator, len, data);
}
void   csteam_notification__preferences_updated__notification__free_unpacked
                     (CSteamNotificationPreferencesUpdatedNotification *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->descriptor == &csteam_notification__preferences_updated__notification__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}

static const ESteamNotificationType steam_notification_data__notification_type__default_value = ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_Invalid;
static const ProtobufCFieldDescriptor steam_notification_data__field_descriptors[9] =
{
  {
    "notification_id",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(SteamNotificationData, has_notification_id),
    offsetof(SteamNotificationData, notification_id),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "notification_targets",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(SteamNotificationData, has_notification_targets),
    offsetof(SteamNotificationData, notification_targets),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "notification_type",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(SteamNotificationData, has_notification_type),
    offsetof(SteamNotificationData, notification_type),
    &esteam_notification_type__descriptor,
    &steam_notification_data__notification_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "body_data",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(SteamNotificationData, body_data),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "read",
    7,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(SteamNotificationData, has_read),
    offsetof(SteamNotificationData, read),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "timestamp",
    8,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(SteamNotificationData, has_timestamp),
    offsetof(SteamNotificationData, timestamp),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "hidden",
    9,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_BOOL,
    offsetof(SteamNotificationData, has_hidden),
    offsetof(SteamNotificationData, hidden),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "expiry",
    10,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(SteamNotificationData, has_expiry),
    offsetof(SteamNotificationData, expiry),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "viewed",
    11,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(SteamNotificationData, has_viewed),
    offsetof(SteamNotificationData, viewed),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned steam_notification_data__field_indices_by_name[] = {
  3,   /* field[3] = body_data */
  7,   /* field[7] = expiry */
  6,   /* field[6] = hidden */
  0,   /* field[0] = notification_id */
  1,   /* field[1] = notification_targets */
  2,   /* field[2] = notification_type */
  4,   /* field[4] = read */
  5,   /* field[5] = timestamp */
  8,   /* field[8] = viewed */
};
static const ProtobufCIntRange steam_notification_data__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 7, 4 },
  { 0, 9 }
};
const ProtobufCMessageDescriptor steam_notification_data__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "SteamNotificationData",
  "SteamNotificationData",
  "SteamNotificationData",
  "",
  sizeof(SteamNotificationData),
  9,
  steam_notification_data__field_descriptors,
  steam_notification_data__field_indices_by_name,
  2,  steam_notification_data__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor csteam_notification__notifications_received__notification__field_descriptors[4] =
{
  {
    "notifications",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CSteamNotificationNotificationsReceivedNotification, n_notifications),
    offsetof(CSteamNotificationNotificationsReceivedNotification, notifications),
    &steam_notification_data__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "pending_gift_count",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSteamNotificationNotificationsReceivedNotification, has_pending_gift_count),
    offsetof(CSteamNotificationNotificationsReceivedNotification, pending_gift_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "pending_friend_count",
    3,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSteamNotificationNotificationsReceivedNotification, has_pending_friend_count),
    offsetof(CSteamNotificationNotificationsReceivedNotification, pending_friend_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "pending_family_invite_count",
    4,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(CSteamNotificationNotificationsReceivedNotification, has_pending_family_invite_count),
    offsetof(CSteamNotificationNotificationsReceivedNotification, pending_family_invite_count),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned csteam_notification__notifications_received__notification__field_indices_by_name[] = {
  0,   /* field[0] = notifications */
  3,   /* field[3] = pending_family_invite_count */
  2,   /* field[2] = pending_friend_count */
  1,   /* field[1] = pending_gift_count */
};
static const ProtobufCIntRange csteam_notification__notifications_received__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor csteam_notification__notifications_received__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CSteamNotification_NotificationsReceived_Notification",
  "CSteamNotificationNotificationsReceivedNotification",
  "CSteamNotificationNotificationsReceivedNotification",
  "",
  sizeof(CSteamNotificationNotificationsReceivedNotification),
  4,
  csteam_notification__notifications_received__notification__field_descriptors,
  csteam_notification__notifications_received__notification__field_indices_by_name,
  1,  csteam_notification__notifications_received__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ESteamNotificationType steam_notification_preference__notification_type__default_value = ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_Invalid;
static const ProtobufCFieldDescriptor steam_notification_preference__field_descriptors[2] =
{
  {
    "notification_type",
    1,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_ENUM,
    offsetof(SteamNotificationPreference, has_notification_type),
    offsetof(SteamNotificationPreference, notification_type),
    &esteam_notification_type__descriptor,
    &steam_notification_preference__notification_type__default_value,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "notification_targets",
    2,
    PROTOBUF_C_LABEL_OPTIONAL,
    PROTOBUF_C_TYPE_UINT32,
    offsetof(SteamNotificationPreference, has_notification_targets),
    offsetof(SteamNotificationPreference, notification_targets),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned steam_notification_preference__field_indices_by_name[] = {
  1,   /* field[1] = notification_targets */
  0,   /* field[0] = notification_type */
};
static const ProtobufCIntRange steam_notification_preference__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor steam_notification_preference__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "SteamNotificationPreference",
  "SteamNotificationPreference",
  "SteamNotificationPreference",
  "",
  sizeof(SteamNotificationPreference),
  2,
  steam_notification_preference__field_descriptors,
  steam_notification_preference__field_indices_by_name,
  1,  steam_notification_preference__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor csteam_notification__preferences_updated__notification__field_descriptors[1] =
{
  {
    "preferences",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(CSteamNotificationPreferencesUpdatedNotification, n_preferences),
    offsetof(CSteamNotificationPreferencesUpdatedNotification, preferences),
    &steam_notification_preference__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned csteam_notification__preferences_updated__notification__field_indices_by_name[] = {
  0,   /* field[0] = preferences */
};
static const ProtobufCIntRange csteam_notification__preferences_updated__notification__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor csteam_notification__preferences_updated__notification__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "CSteamNotification_PreferencesUpdated_Notification",
  "CSteamNotificationPreferencesUpdatedNotification",
  "CSteamNotificationPreferencesUpdatedNotification",
  "",
  sizeof(CSteamNotificationPreferencesUpdatedNotification),
  1,
  csteam_notification__preferences_updated__notification__field_descriptors,
  csteam_notification__preferences_updated__notification__field_indices_by_name,
  1,  csteam_notification__preferences_updated__notification__number_ranges,
  NULL,NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCEnumValue esteam_notification_type__enum_values_by_number[28] =
{
  { "k_ESteamNotificationType_Invalid", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_Invalid", 0 },
  { "k_ESteamNotificationType_Test", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_Test", 1 },
  { "k_ESteamNotificationType_Gift", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_Gift", 2 },
  { "k_ESteamNotificationType_Comment", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_Comment", 3 },
  { "k_ESteamNotificationType_Item", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_Item", 4 },
  { "k_ESteamNotificationType_FriendInvite", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_FriendInvite", 5 },
  { "k_ESteamNotificationType_MajorSale", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_MajorSale", 6 },
  { "k_ESteamNotificationType_PreloadAvailable", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_PreloadAvailable", 7 },
  { "k_ESteamNotificationType_Wishlist", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_Wishlist", 8 },
  { "k_ESteamNotificationType_TradeOffer", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_TradeOffer", 9 },
  { "k_ESteamNotificationType_General", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_General", 10 },
  { "k_ESteamNotificationType_HelpRequest", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_HelpRequest", 11 },
  { "k_ESteamNotificationType_AsyncGame", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_AsyncGame", 12 },
  { "k_ESteamNotificationType_ChatMsg", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_ChatMsg", 13 },
  { "k_ESteamNotificationType_ModeratorMsg", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_ModeratorMsg", 14 },
  { "k_ESteamNotificationType_ParentalFeatureAccessRequest", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_ParentalFeatureAccessRequest", 15 },
  { "k_ESteamNotificationType_FamilyInvite", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_FamilyInvite", 16 },
  { "k_ESteamNotificationType_FamilyPurchaseRequest", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_FamilyPurchaseRequest", 17 },
  { "k_ESteamNotificationType_ParentalPlaytimeRequest", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_ParentalPlaytimeRequest", 18 },
  { "k_ESteamNotificationType_FamilyPurchaseRequestResponse", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_FamilyPurchaseRequestResponse", 19 },
  { "k_ESteamNotificationType_ParentalFeatureAccessResponse", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_ParentalFeatureAccessResponse", 20 },
  { "k_ESteamNotificationType_ParentalPlaytimeResponse", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_ParentalPlaytimeResponse", 21 },
  { "k_ESteamNotificationType_RequestedGameAdded", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_RequestedGameAdded", 22 },
  { "k_ESteamNotificationType_SendToPhone", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_SendToPhone", 23 },
  { "k_ESteamNotificationType_ClipDownloaded", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_ClipDownloaded", 24 },
  { "k_ESteamNotificationType_2FAPrompt", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_2FAPrompt", 25 },
  { "k_ESteamNotificationType_MobileConfirmation", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_MobileConfirmation", 26 },
  { "k_ESteamNotificationType_PartnerEvent", "ESTEAM_NOTIFICATION_TYPE__k_ESteamNotificationType_PartnerEvent", 27 },
};
static const ProtobufCIntRange esteam_notification_type__value_ranges[] = {
{0, 0},{0, 28}
};
static const ProtobufCEnumValueIndex esteam_notification_type__enum_values_by_name[28] =
{
  { "k_ESteamNotificationType_2FAPrompt", 25 },
  { "k_ESteamNotificationType_AsyncGame", 12 },
  { "k_ESteamNotificationType_ChatMsg", 13 },
  { "k_ESteamNotificationType_ClipDownloaded", 24 },
  { "k_ESteamNotificationType_Comment", 3 },
  { "k_ESteamNotificationType_FamilyInvite", 16 },
  { "k_ESteamNotificationType_FamilyPurchaseRequest", 17 },
  { "k_ESteamNotificationType_FamilyPurchaseRequestResponse", 19 },
  { "k_ESteamNotificationType_FriendInvite", 5 },
  { "k_ESteamNotificationType_General", 10 },
  { "k_ESteamNotificationType_Gift", 2 },
  { "k_ESteamNotificationType_HelpRequest", 11 },
  { "k_ESteamNotificationType_Invalid", 0 },
  { "k_ESteamNotificationType_Item", 4 },
  { "k_ESteamNotificationType_MajorSale", 6 },
  { "k_ESteamNotificationType_MobileConfirmation", 26 },
  { "k_ESteamNotificationType_ModeratorMsg", 14 },
  { "k_ESteamNotificationType_ParentalFeatureAccessRequest", 15 },
  { "k_ESteamNotificationType_ParentalFeatureAccessResponse", 20 },
  { "k_ESteamNotificationType_ParentalPlaytimeRequest", 18 },
  { "k_ESteamNotificationType_ParentalPlaytimeResponse", 21 },
  { "k_ESteamNotificationType_PartnerEvent", 27 },
  { "k_ESteamNotificationType_PreloadAvailable", 7 },
  { "k_ESteamNotificationType_RequestedGameAdded", 22 },
  { "k_ESteamNotificationType_SendToPhone", 23 },
  { "k_ESteamNotificationType_Test", 1 },
  { "k_ESteamNotificationType_TradeOffer", 9 },
  { "k_ESteamNotificationType_Wishlist", 8 },
};
const ProtobufCEnumDescriptor esteam_notification_type__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "ESteamNotificationType",
  "ESteamNotificationType",
  "ESteamNotificationType",
  "",
  28,
  esteam_notification_type__enum_values_by_number,
  28,
  esteam_notification_type__enum_values_by_name,
  1,
  esteam_notification_type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCMethodDescriptor steam_notification_client__method_descriptors[2] =
{
  { "NotificationsReceived", &csteam_notification__notifications_received__notification__descriptor, &no_response__descriptor },
  { "PreferencesUpdated", &csteam_notification__preferences_updated__notification__descriptor, &no_response__descriptor },
};
const unsigned steam_notification_client__method_indices_by_name[] = {
  0,        /* NotificationsReceived */
  1         /* PreferencesUpdated */
};
const ProtobufCServiceDescriptor steam_notification_client__descriptor =
{
  PROTOBUF_C__SERVICE_DESCRIPTOR_MAGIC,
  "SteamNotificationClient",
  "SteamNotificationClient",
  "SteamNotificationClient",
  "",
  2,
  steam_notification_client__method_descriptors,
  steam_notification_client__method_indices_by_name
};
void steam_notification_client__notifications_received(ProtobufCService *service,
                                                       const CSteamNotificationNotificationsReceivedNotification *input,
                                                       NoResponse_Closure closure,
                                                       void *closure_data)
{
  assert(service->descriptor == &steam_notification_client__descriptor);
  service->invoke(service, 0, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void steam_notification_client__preferences_updated(ProtobufCService *service,
                                                    const CSteamNotificationPreferencesUpdatedNotification *input,
                                                    NoResponse_Closure closure,
                                                    void *closure_data)
{
  assert(service->descriptor == &steam_notification_client__descriptor);
  service->invoke(service, 1, (const ProtobufCMessage *) input, (ProtobufCClosure) closure, closure_data);
}
void steam_notification_client__init (SteamNotificationClient_Service *service,
                                      SteamNotificationClient_ServiceDestroy destroy)
{
  protobuf_c_service_generated_init (&service->base,
                                     &steam_notification_client__descriptor,
                                     (ProtobufCServiceDestroy) destroy);
}
